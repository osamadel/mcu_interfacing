In archive libtrafficLights_app.a:

MDIO_program.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000005c4  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000049f  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.MDIO_SetPinDirection 00000398  00000000  00000000  00000a97  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.MDIO_SetPortDirection 00000084  00000000  00000000  00000e2f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.MDIO_SetPinOutput 000001c8  00000000  00000000  00000eb3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.MDIO_SetPortValue 00000084  00000000  00000000  0000107b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.MDIO_GetPinValue 000000f8  00000000  00000000  000010ff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.MDIO_GetPortValue 0000008a  00000000  00000000  000011f7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.MDIO_SetPinDirection:

00000000 <MDIO_SetPinDirection>:
#include "../libraries/L_STD_TYPES.h"
#include "../libraries/L_UTILS.h"
#include "MDIO_private.h"
#include "MDIO_interface.h"

void MDIO_SetPinDirection (uint8 port, uint8 bitNum, uint8 status) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2d 97       	sbiw	r28, 0x0d	; 13
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	89 83       	std	Y+1, r24	; 0x01
  16:	6a 83       	std	Y+2, r22	; 0x02
  18:	4b 83       	std	Y+3, r20	; 0x03
    // TODO: switch on port
	switch (port) {
  1a:	89 81       	ldd	r24, Y+1	; 0x01
  1c:	28 2f       	mov	r18, r24
  1e:	30 e0       	ldi	r19, 0x00	; 0
  20:	3d 87       	std	Y+13, r19	; 0x0d
  22:	2c 87       	std	Y+12, r18	; 0x0c
  24:	8c 85       	ldd	r24, Y+12	; 0x0c
  26:	9d 85       	ldd	r25, Y+13	; 0x0d
  28:	82 30       	cpi	r24, 0x02	; 2
  2a:	91 05       	cpc	r25, r1
  2c:	01 f4       	brne	.+0      	; 0x2e <MDIO_SetPinDirection+0x2e>
  2e:	00 c0       	rjmp	.+0      	; 0x30 <MDIO_SetPinDirection+0x30>
  30:	2c 85       	ldd	r18, Y+12	; 0x0c
  32:	3d 85       	ldd	r19, Y+13	; 0x0d
  34:	23 30       	cpi	r18, 0x03	; 3
  36:	31 05       	cpc	r19, r1
  38:	04 f4       	brge	.+0      	; 0x3a <MDIO_SetPinDirection+0x3a>
  3a:	8c 85       	ldd	r24, Y+12	; 0x0c
  3c:	9d 85       	ldd	r25, Y+13	; 0x0d
  3e:	81 30       	cpi	r24, 0x01	; 1
  40:	91 05       	cpc	r25, r1
  42:	01 f0       	breq	.+0      	; 0x44 <MDIO_SetPinDirection+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <MDIO_SetPinDirection+0x46>
  46:	2c 85       	ldd	r18, Y+12	; 0x0c
  48:	3d 85       	ldd	r19, Y+13	; 0x0d
  4a:	23 30       	cpi	r18, 0x03	; 3
  4c:	31 05       	cpc	r19, r1
  4e:	01 f4       	brne	.+0      	; 0x50 <MDIO_SetPinDirection+0x50>
  50:	00 c0       	rjmp	.+0      	; 0x52 <MDIO_SetPinDirection+0x52>
  52:	8c 85       	ldd	r24, Y+12	; 0x0c
  54:	9d 85       	ldd	r25, Y+13	; 0x0d
  56:	84 30       	cpi	r24, 0x04	; 4
  58:	91 05       	cpc	r25, r1
  5a:	01 f4       	brne	.+0      	; 0x5c <MDIO_SetPinDirection+0x5c>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <MDIO_SetPinDirection+0x5e>
  5e:	00 c0       	rjmp	.+0      	; 0x60 <MDIO_SetPinDirection+0x60>
	// ********************* PORTA ****************************
	case PORTA:
		switch (status) {
  60:	8b 81       	ldd	r24, Y+3	; 0x03
  62:	28 2f       	mov	r18, r24
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	3b 87       	std	Y+11, r19	; 0x0b
  68:	2a 87       	std	Y+10, r18	; 0x0a
  6a:	8a 85       	ldd	r24, Y+10	; 0x0a
  6c:	9b 85       	ldd	r25, Y+11	; 0x0b
  6e:	82 30       	cpi	r24, 0x02	; 2
  70:	91 05       	cpc	r25, r1
  72:	01 f0       	breq	.+0      	; 0x74 <MDIO_SetPinDirection+0x74>
  74:	2a 85       	ldd	r18, Y+10	; 0x0a
  76:	3b 85       	ldd	r19, Y+11	; 0x0b
  78:	23 30       	cpi	r18, 0x03	; 3
  7a:	31 05       	cpc	r19, r1
  7c:	01 f0       	breq	.+0      	; 0x7e <MDIO_SetPinDirection+0x7e>
  7e:	8a 85       	ldd	r24, Y+10	; 0x0a
  80:	9b 85       	ldd	r25, Y+11	; 0x0b
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	91 05       	cpc	r25, r1
  86:	01 f0       	breq	.+0      	; 0x88 <MDIO_SetPinDirection+0x88>
  88:	00 c0       	rjmp	.+0      	; 0x8a <MDIO_SetPinDirection+0x8a>
		case OUTPUT:
			SET_BIT(MDIO_DDRA, bitNum);				// set DDRA bitNum to 1
  8a:	aa e3       	ldi	r26, 0x3A	; 58
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	ea e3       	ldi	r30, 0x3A	; 58
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	48 2f       	mov	r20, r24
  96:	8a 81       	ldd	r24, Y+2	; 0x02
  98:	28 2f       	mov	r18, r24
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	02 2e       	mov	r0, r18
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <MDIO_SetPinDirection+0xa4>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	0a 94       	dec	r0
  aa:	02 f4       	brpl	.+0      	; 0xac <MDIO_SetPinDirection+0xac>
  ac:	84 2b       	or	r24, r20
  ae:	8c 93       	st	X, r24
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <MDIO_SetPinDirection+0xb2>
			break;
		case INPUT_FLOAT:
			CLR_BIT(MDIO_DDRA, bitNum);				// set DDRA bitNum to 0
  b2:	aa e3       	ldi	r26, 0x3A	; 58
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	ea e3       	ldi	r30, 0x3A	; 58
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	48 2f       	mov	r20, r24
  be:	8a 81       	ldd	r24, Y+2	; 0x02
  c0:	28 2f       	mov	r18, r24
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 2e       	mov	r0, r18
  ca:	00 c0       	rjmp	.+0      	; 0xcc <MDIO_SetPinDirection+0xcc>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	0a 94       	dec	r0
  d2:	02 f4       	brpl	.+0      	; 0xd4 <MDIO_SetPinDirection+0xd4>
  d4:	80 95       	com	r24
  d6:	84 23       	and	r24, r20
  d8:	8c 93       	st	X, r24
  da:	00 c0       	rjmp	.+0      	; 0xdc <MDIO_SetPinDirection+0xdc>
			break;
		case INPUT_PULLUP:
			CLR_BIT(MDIO_DDRA, bitNum);				// set DDRA bitNum to 0
  dc:	aa e3       	ldi	r26, 0x3A	; 58
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	ea e3       	ldi	r30, 0x3A	; 58
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	48 2f       	mov	r20, r24
  e8:	8a 81       	ldd	r24, Y+2	; 0x02
  ea:	28 2f       	mov	r18, r24
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <MDIO_SetPinDirection+0xf4>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	2a 95       	dec	r18
  fa:	02 f4       	brpl	.+0      	; 0xfc <MDIO_SetPinDirection+0xfc>
  fc:	80 95       	com	r24
  fe:	84 23       	and	r24, r20
 100:	8c 93       	st	X, r24
			SET_BIT(MDIO_PORTA, bitNum);			// set PORTA bitNum to 1
 102:	ab e3       	ldi	r26, 0x3B	; 59
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	eb e3       	ldi	r30, 0x3B	; 59
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	48 2f       	mov	r20, r24
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	28 2f       	mov	r18, r24
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 2e       	mov	r0, r18
 11a:	00 c0       	rjmp	.+0      	; 0x11c <MDIO_SetPinDirection+0x11c>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	02 f4       	brpl	.+0      	; 0x124 <MDIO_SetPinDirection+0x124>
 124:	84 2b       	or	r24, r20
 126:	8c 93       	st	X, r24
 128:	00 c0       	rjmp	.+0      	; 0x12a <MDIO_SetPinDirection+0x12a>
			break;
		} // end switch(status)
		break;
	// ********************* PORTB ****************************
	case PORTB:
		switch (status) {
 12a:	8b 81       	ldd	r24, Y+3	; 0x03
 12c:	28 2f       	mov	r18, r24
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	39 87       	std	Y+9, r19	; 0x09
 132:	28 87       	std	Y+8, r18	; 0x08
 134:	88 85       	ldd	r24, Y+8	; 0x08
 136:	99 85       	ldd	r25, Y+9	; 0x09
 138:	82 30       	cpi	r24, 0x02	; 2
 13a:	91 05       	cpc	r25, r1
 13c:	01 f0       	breq	.+0      	; 0x13e <MDIO_SetPinDirection+0x13e>
 13e:	28 85       	ldd	r18, Y+8	; 0x08
 140:	39 85       	ldd	r19, Y+9	; 0x09
 142:	23 30       	cpi	r18, 0x03	; 3
 144:	31 05       	cpc	r19, r1
 146:	01 f0       	breq	.+0      	; 0x148 <MDIO_SetPinDirection+0x148>
 148:	88 85       	ldd	r24, Y+8	; 0x08
 14a:	99 85       	ldd	r25, Y+9	; 0x09
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	91 05       	cpc	r25, r1
 150:	01 f0       	breq	.+0      	; 0x152 <MDIO_SetPinDirection+0x152>
 152:	00 c0       	rjmp	.+0      	; 0x154 <MDIO_SetPinDirection+0x154>
		case OUTPUT:
			SET_BIT(MDIO_DDRB, bitNum);				// set DDRB bitNum to 1
 154:	a7 e3       	ldi	r26, 0x37	; 55
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	e7 e3       	ldi	r30, 0x37	; 55
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	48 2f       	mov	r20, r24
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	28 2f       	mov	r18, r24
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 2e       	mov	r0, r18
 16c:	00 c0       	rjmp	.+0      	; 0x16e <MDIO_SetPinDirection+0x16e>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	0a 94       	dec	r0
 174:	02 f4       	brpl	.+0      	; 0x176 <MDIO_SetPinDirection+0x176>
 176:	84 2b       	or	r24, r20
 178:	8c 93       	st	X, r24
 17a:	00 c0       	rjmp	.+0      	; 0x17c <MDIO_SetPinDirection+0x17c>
			break;
		case INPUT_FLOAT:
			CLR_BIT(MDIO_DDRB, bitNum);				// set DDRB bitNum to 0
 17c:	a7 e3       	ldi	r26, 0x37	; 55
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	e7 e3       	ldi	r30, 0x37	; 55
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	48 2f       	mov	r20, r24
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	28 2f       	mov	r18, r24
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 2e       	mov	r0, r18
 194:	00 c0       	rjmp	.+0      	; 0x196 <MDIO_SetPinDirection+0x196>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	0a 94       	dec	r0
 19c:	02 f4       	brpl	.+0      	; 0x19e <MDIO_SetPinDirection+0x19e>
 19e:	80 95       	com	r24
 1a0:	84 23       	and	r24, r20
 1a2:	8c 93       	st	X, r24
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <MDIO_SetPinDirection+0x1a6>
			break;
		case INPUT_PULLUP:
			CLR_BIT(MDIO_DDRB, bitNum);				// set DDRB bitNum to 0
 1a6:	a7 e3       	ldi	r26, 0x37	; 55
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	e7 e3       	ldi	r30, 0x37	; 55
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	48 2f       	mov	r20, r24
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	28 2f       	mov	r18, r24
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <MDIO_SetPinDirection+0x1be>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	2a 95       	dec	r18
 1c4:	02 f4       	brpl	.+0      	; 0x1c6 <MDIO_SetPinDirection+0x1c6>
 1c6:	80 95       	com	r24
 1c8:	84 23       	and	r24, r20
 1ca:	8c 93       	st	X, r24
			SET_BIT(MDIO_PORTB, bitNum);			// set PORTB bitNum to 1
 1cc:	a8 e3       	ldi	r26, 0x38	; 56
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	e8 e3       	ldi	r30, 0x38	; 56
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	48 2f       	mov	r20, r24
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	28 2f       	mov	r18, r24
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 2e       	mov	r0, r18
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <MDIO_SetPinDirection+0x1e6>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	0a 94       	dec	r0
 1ec:	02 f4       	brpl	.+0      	; 0x1ee <MDIO_SetPinDirection+0x1ee>
 1ee:	84 2b       	or	r24, r20
 1f0:	8c 93       	st	X, r24
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <MDIO_SetPinDirection+0x1f4>
			break;
		} // end switch(status)
		break;
	// ********************* PORTC ****************************
	case PORTC:
		switch (status) {
 1f4:	8b 81       	ldd	r24, Y+3	; 0x03
 1f6:	28 2f       	mov	r18, r24
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	3f 83       	std	Y+7, r19	; 0x07
 1fc:	2e 83       	std	Y+6, r18	; 0x06
 1fe:	8e 81       	ldd	r24, Y+6	; 0x06
 200:	9f 81       	ldd	r25, Y+7	; 0x07
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	91 05       	cpc	r25, r1
 206:	01 f0       	breq	.+0      	; 0x208 <MDIO_SetPinDirection+0x208>
 208:	2e 81       	ldd	r18, Y+6	; 0x06
 20a:	3f 81       	ldd	r19, Y+7	; 0x07
 20c:	23 30       	cpi	r18, 0x03	; 3
 20e:	31 05       	cpc	r19, r1
 210:	01 f0       	breq	.+0      	; 0x212 <MDIO_SetPinDirection+0x212>
 212:	8e 81       	ldd	r24, Y+6	; 0x06
 214:	9f 81       	ldd	r25, Y+7	; 0x07
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	91 05       	cpc	r25, r1
 21a:	01 f0       	breq	.+0      	; 0x21c <MDIO_SetPinDirection+0x21c>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <MDIO_SetPinDirection+0x21e>
		case OUTPUT:
			SET_BIT(MDIO_DDRC, bitNum);				// set DDRC bitNum to 1
 21e:	a4 e3       	ldi	r26, 0x34	; 52
 220:	b0 e0       	ldi	r27, 0x00	; 0
 222:	e4 e3       	ldi	r30, 0x34	; 52
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	48 2f       	mov	r20, r24
 22a:	8a 81       	ldd	r24, Y+2	; 0x02
 22c:	28 2f       	mov	r18, r24
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 2e       	mov	r0, r18
 236:	00 c0       	rjmp	.+0      	; 0x238 <MDIO_SetPinDirection+0x238>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	0a 94       	dec	r0
 23e:	02 f4       	brpl	.+0      	; 0x240 <MDIO_SetPinDirection+0x240>
 240:	84 2b       	or	r24, r20
 242:	8c 93       	st	X, r24
 244:	00 c0       	rjmp	.+0      	; 0x246 <MDIO_SetPinDirection+0x246>
			break;
		case INPUT_FLOAT:
			CLR_BIT(MDIO_DDRC, bitNum);				// set DDRC bitNum to 0
 246:	a4 e3       	ldi	r26, 0x34	; 52
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	e4 e3       	ldi	r30, 0x34	; 52
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	48 2f       	mov	r20, r24
 252:	8a 81       	ldd	r24, Y+2	; 0x02
 254:	28 2f       	mov	r18, r24
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 2e       	mov	r0, r18
 25e:	00 c0       	rjmp	.+0      	; 0x260 <MDIO_SetPinDirection+0x260>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	0a 94       	dec	r0
 266:	02 f4       	brpl	.+0      	; 0x268 <MDIO_SetPinDirection+0x268>
 268:	80 95       	com	r24
 26a:	84 23       	and	r24, r20
 26c:	8c 93       	st	X, r24
 26e:	00 c0       	rjmp	.+0      	; 0x270 <MDIO_SetPinDirection+0x270>
			break;
		case INPUT_PULLUP:
			CLR_BIT(MDIO_DDRC, bitNum);				// set DDRC bitNum to 0
 270:	a4 e3       	ldi	r26, 0x34	; 52
 272:	b0 e0       	ldi	r27, 0x00	; 0
 274:	e4 e3       	ldi	r30, 0x34	; 52
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	48 2f       	mov	r20, r24
 27c:	8a 81       	ldd	r24, Y+2	; 0x02
 27e:	28 2f       	mov	r18, r24
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	00 c0       	rjmp	.+0      	; 0x288 <MDIO_SetPinDirection+0x288>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	2a 95       	dec	r18
 28e:	02 f4       	brpl	.+0      	; 0x290 <MDIO_SetPinDirection+0x290>
 290:	80 95       	com	r24
 292:	84 23       	and	r24, r20
 294:	8c 93       	st	X, r24
			SET_BIT(MDIO_PORTC, bitNum);			// set PORTC bitNum to 1
 296:	a5 e3       	ldi	r26, 0x35	; 53
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	e5 e3       	ldi	r30, 0x35	; 53
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	48 2f       	mov	r20, r24
 2a2:	8a 81       	ldd	r24, Y+2	; 0x02
 2a4:	28 2f       	mov	r18, r24
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 2e       	mov	r0, r18
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <MDIO_SetPinDirection+0x2b0>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	0a 94       	dec	r0
 2b6:	02 f4       	brpl	.+0      	; 0x2b8 <MDIO_SetPinDirection+0x2b8>
 2b8:	84 2b       	or	r24, r20
 2ba:	8c 93       	st	X, r24
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <MDIO_SetPinDirection+0x2be>
			break;
		} // end switch(status)
		break;
	// ********************* PORTD ****************************
	case PORTD:
		switch (status) {
 2be:	8b 81       	ldd	r24, Y+3	; 0x03
 2c0:	28 2f       	mov	r18, r24
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	3d 83       	std	Y+5, r19	; 0x05
 2c6:	2c 83       	std	Y+4, r18	; 0x04
 2c8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ca:	9d 81       	ldd	r25, Y+5	; 0x05
 2cc:	82 30       	cpi	r24, 0x02	; 2
 2ce:	91 05       	cpc	r25, r1
 2d0:	01 f0       	breq	.+0      	; 0x2d2 <MDIO_SetPinDirection+0x2d2>
 2d2:	2c 81       	ldd	r18, Y+4	; 0x04
 2d4:	3d 81       	ldd	r19, Y+5	; 0x05
 2d6:	23 30       	cpi	r18, 0x03	; 3
 2d8:	31 05       	cpc	r19, r1
 2da:	01 f0       	breq	.+0      	; 0x2dc <MDIO_SetPinDirection+0x2dc>
 2dc:	8c 81       	ldd	r24, Y+4	; 0x04
 2de:	9d 81       	ldd	r25, Y+5	; 0x05
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	91 05       	cpc	r25, r1
 2e4:	01 f0       	breq	.+0      	; 0x2e6 <MDIO_SetPinDirection+0x2e6>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <MDIO_SetPinDirection+0x2e8>
		case OUTPUT:
			SET_BIT(MDIO_DDRD, bitNum);				// set DDRD bitNum to 1
 2e8:	a1 e3       	ldi	r26, 0x31	; 49
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	e1 e3       	ldi	r30, 0x31	; 49
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	48 2f       	mov	r20, r24
 2f4:	8a 81       	ldd	r24, Y+2	; 0x02
 2f6:	28 2f       	mov	r18, r24
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 2e       	mov	r0, r18
 300:	00 c0       	rjmp	.+0      	; 0x302 <MDIO_SetPinDirection+0x302>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	0a 94       	dec	r0
 308:	02 f4       	brpl	.+0      	; 0x30a <MDIO_SetPinDirection+0x30a>
 30a:	84 2b       	or	r24, r20
 30c:	8c 93       	st	X, r24
 30e:	00 c0       	rjmp	.+0      	; 0x310 <MDIO_SetPinDirection+0x310>
			break;
		case INPUT_FLOAT:
			CLR_BIT(MDIO_DDRD, bitNum);				// set DDRD bitNum to 0
 310:	a1 e3       	ldi	r26, 0x31	; 49
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	e1 e3       	ldi	r30, 0x31	; 49
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	48 2f       	mov	r20, r24
 31c:	8a 81       	ldd	r24, Y+2	; 0x02
 31e:	28 2f       	mov	r18, r24
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 2e       	mov	r0, r18
 328:	00 c0       	rjmp	.+0      	; 0x32a <MDIO_SetPinDirection+0x32a>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	0a 94       	dec	r0
 330:	02 f4       	brpl	.+0      	; 0x332 <MDIO_SetPinDirection+0x332>
 332:	80 95       	com	r24
 334:	84 23       	and	r24, r20
 336:	8c 93       	st	X, r24
 338:	00 c0       	rjmp	.+0      	; 0x33a <MDIO_SetPinDirection+0x33a>
			break;
		case INPUT_PULLUP:
			CLR_BIT(MDIO_DDRD, bitNum);				// set DDRD bitNum to 0
 33a:	a1 e3       	ldi	r26, 0x31	; 49
 33c:	b0 e0       	ldi	r27, 0x00	; 0
 33e:	e1 e3       	ldi	r30, 0x31	; 49
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	48 2f       	mov	r20, r24
 346:	8a 81       	ldd	r24, Y+2	; 0x02
 348:	28 2f       	mov	r18, r24
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	00 c0       	rjmp	.+0      	; 0x352 <MDIO_SetPinDirection+0x352>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	2a 95       	dec	r18
 358:	02 f4       	brpl	.+0      	; 0x35a <MDIO_SetPinDirection+0x35a>
 35a:	80 95       	com	r24
 35c:	84 23       	and	r24, r20
 35e:	8c 93       	st	X, r24
			SET_BIT(MDIO_PORTD, bitNum);			// set PORTD bitNum to 1
 360:	a2 e3       	ldi	r26, 0x32	; 50
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	e2 e3       	ldi	r30, 0x32	; 50
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	48 2f       	mov	r20, r24
 36c:	8a 81       	ldd	r24, Y+2	; 0x02
 36e:	28 2f       	mov	r18, r24
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 2e       	mov	r0, r18
 378:	00 c0       	rjmp	.+0      	; 0x37a <MDIO_SetPinDirection+0x37a>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	0a 94       	dec	r0
 380:	02 f4       	brpl	.+0      	; 0x382 <MDIO_SetPinDirection+0x382>
 382:	84 2b       	or	r24, r20
 384:	8c 93       	st	X, r24
		} // end switch(status)
		break;
	} // end switch(port)

	return;
} // end MDIO_SetPinDirection
 386:	2d 96       	adiw	r28, 0x0d	; 13
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	de bf       	out	0x3e, r29	; 62
 38e:	0f be       	out	0x3f, r0	; 63
 390:	cd bf       	out	0x3d, r28	; 61
 392:	cf 91       	pop	r28
 394:	df 91       	pop	r29
 396:	08 95       	ret

Disassembly of section .text.MDIO_SetPortDirection:

00000000 <MDIO_SetPortDirection>:
#include "../libraries/L_STD_TYPES.h"
#include "../libraries/L_UTILS.h"
#include "MDIO_private.h"
#include "MDIO_interface.h"

void MDIO_SetPinDirection (uint8 port, uint8 bitNum, uint8 status) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <MDIO_SetPortDirection+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <MDIO_SetPortDirection+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	6a 83       	std	Y+2, r22	; 0x02
  10:	89 81       	ldd	r24, Y+1	; 0x01
  12:	28 2f       	mov	r18, r24
  14:	30 e0       	ldi	r19, 0x00	; 0
  16:	3c 83       	std	Y+4, r19	; 0x04
  18:	2b 83       	std	Y+3, r18	; 0x03
    // TODO: switch on port
	switch (port) {
  1a:	8b 81       	ldd	r24, Y+3	; 0x03
  1c:	9c 81       	ldd	r25, Y+4	; 0x04
  1e:	82 30       	cpi	r24, 0x02	; 2
  20:	91 05       	cpc	r25, r1
  22:	01 f0       	breq	.+0      	; 0x24 <MDIO_SetPortDirection+0x24>
  24:	2b 81       	ldd	r18, Y+3	; 0x03
  26:	3c 81       	ldd	r19, Y+4	; 0x04
  28:	23 30       	cpi	r18, 0x03	; 3
  2a:	31 05       	cpc	r19, r1
  2c:	04 f4       	brge	.+0      	; 0x2e <MDIO_SetPortDirection+0x2e>
  2e:	8b 81       	ldd	r24, Y+3	; 0x03
  30:	9c 81       	ldd	r25, Y+4	; 0x04
  32:	81 30       	cpi	r24, 0x01	; 1
  34:	91 05       	cpc	r25, r1
  36:	01 f0       	breq	.+0      	; 0x38 <MDIO_SetPortDirection+0x38>
  38:	00 c0       	rjmp	.+0      	; 0x3a <MDIO_SetPortDirection+0x3a>
  3a:	2b 81       	ldd	r18, Y+3	; 0x03
  3c:	3c 81       	ldd	r19, Y+4	; 0x04
  3e:	23 30       	cpi	r18, 0x03	; 3
  40:	31 05       	cpc	r19, r1
  42:	01 f0       	breq	.+0      	; 0x44 <MDIO_SetPortDirection+0x44>
  44:	8b 81       	ldd	r24, Y+3	; 0x03
  46:	9c 81       	ldd	r25, Y+4	; 0x04
  48:	84 30       	cpi	r24, 0x04	; 4
  4a:	91 05       	cpc	r25, r1
  4c:	01 f0       	breq	.+0      	; 0x4e <MDIO_SetPortDirection+0x4e>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <MDIO_SetPortDirection+0x50>
  50:	ea e3       	ldi	r30, 0x3A	; 58
  52:	f0 e0       	ldi	r31, 0x00	; 0
  54:	8a 81       	ldd	r24, Y+2	; 0x02
  56:	80 83       	st	Z, r24
  58:	00 c0       	rjmp	.+0      	; 0x5a <MDIO_SetPortDirection+0x5a>
  5a:	e1 e3       	ldi	r30, 0x31	; 49
  5c:	f0 e0       	ldi	r31, 0x00	; 0
  5e:	8a 81       	ldd	r24, Y+2	; 0x02
	// ********************* PORTA ****************************
	case PORTA:
		switch (status) {
  60:	80 83       	st	Z, r24
  62:	00 c0       	rjmp	.+0      	; 0x64 <MDIO_SetPortDirection+0x64>
  64:	e4 e3       	ldi	r30, 0x34	; 52
  66:	f0 e0       	ldi	r31, 0x00	; 0
  68:	8a 81       	ldd	r24, Y+2	; 0x02
  6a:	80 83       	st	Z, r24
  6c:	00 c0       	rjmp	.+0      	; 0x6e <MDIO_SetPortDirection+0x6e>
  6e:	e1 e3       	ldi	r30, 0x31	; 49
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	8a 81       	ldd	r24, Y+2	; 0x02
  74:	80 83       	st	Z, r24
  76:	0f 90       	pop	r0
  78:	0f 90       	pop	r0
  7a:	0f 90       	pop	r0
  7c:	0f 90       	pop	r0
  7e:	cf 91       	pop	r28
  80:	df 91       	pop	r29
  82:	08 95       	ret

Disassembly of section .text.MDIO_SetPinOutput:

00000000 <MDIO_SetPinOutput>:
#include "../libraries/L_STD_TYPES.h"
#include "../libraries/L_UTILS.h"
#include "MDIO_private.h"
#include "MDIO_interface.h"

void MDIO_SetPinDirection (uint8 port, uint8 bitNum, uint8 status) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <MDIO_SetPinOutput+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <MDIO_SetPinOutput+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	6a 83       	std	Y+2, r22	; 0x02
  12:	4b 83       	std	Y+3, r20	; 0x03
  14:	89 81       	ldd	r24, Y+1	; 0x01
  16:	28 2f       	mov	r18, r24
  18:	30 e0       	ldi	r19, 0x00	; 0
    // TODO: switch on port
	switch (port) {
  1a:	3d 83       	std	Y+5, r19	; 0x05
  1c:	2c 83       	std	Y+4, r18	; 0x04
  1e:	8c 81       	ldd	r24, Y+4	; 0x04
  20:	9d 81       	ldd	r25, Y+5	; 0x05
  22:	82 30       	cpi	r24, 0x02	; 2
  24:	91 05       	cpc	r25, r1
  26:	01 f4       	brne	.+0      	; 0x28 <MDIO_SetPinOutput+0x28>
  28:	00 c0       	rjmp	.+0      	; 0x2a <MDIO_SetPinOutput+0x2a>
  2a:	2c 81       	ldd	r18, Y+4	; 0x04
  2c:	3d 81       	ldd	r19, Y+5	; 0x05
  2e:	23 30       	cpi	r18, 0x03	; 3
  30:	31 05       	cpc	r19, r1
  32:	04 f4       	brge	.+0      	; 0x34 <MDIO_SetPinOutput+0x34>
  34:	8c 81       	ldd	r24, Y+4	; 0x04
  36:	9d 81       	ldd	r25, Y+5	; 0x05
  38:	81 30       	cpi	r24, 0x01	; 1
  3a:	91 05       	cpc	r25, r1
  3c:	01 f0       	breq	.+0      	; 0x3e <MDIO_SetPinOutput+0x3e>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <MDIO_SetPinOutput+0x40>
  40:	2c 81       	ldd	r18, Y+4	; 0x04
  42:	3d 81       	ldd	r19, Y+5	; 0x05
  44:	23 30       	cpi	r18, 0x03	; 3
  46:	31 05       	cpc	r19, r1
  48:	01 f4       	brne	.+0      	; 0x4a <MDIO_SetPinOutput+0x4a>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <MDIO_SetPinOutput+0x4c>
  4c:	8c 81       	ldd	r24, Y+4	; 0x04
  4e:	9d 81       	ldd	r25, Y+5	; 0x05
  50:	84 30       	cpi	r24, 0x04	; 4
  52:	91 05       	cpc	r25, r1
  54:	01 f4       	brne	.+0      	; 0x56 <MDIO_SetPinOutput+0x56>
  56:	00 c0       	rjmp	.+0      	; 0x58 <MDIO_SetPinOutput+0x58>
  58:	00 c0       	rjmp	.+0      	; 0x5a <MDIO_SetPinOutput+0x5a>
  5a:	8b 81       	ldd	r24, Y+3	; 0x03
  5c:	88 23       	and	r24, r24
  5e:	01 f0       	breq	.+0      	; 0x60 <MDIO_SetPinOutput+0x60>
	// ********************* PORTA ****************************
	case PORTA:
		switch (status) {
  60:	ab e3       	ldi	r26, 0x3B	; 59
  62:	b0 e0       	ldi	r27, 0x00	; 0
  64:	eb e3       	ldi	r30, 0x3B	; 59
  66:	f0 e0       	ldi	r31, 0x00	; 0
  68:	80 81       	ld	r24, Z
  6a:	48 2f       	mov	r20, r24
  6c:	8a 81       	ldd	r24, Y+2	; 0x02
  6e:	28 2f       	mov	r18, r24
  70:	30 e0       	ldi	r19, 0x00	; 0
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	02 2e       	mov	r0, r18
  78:	00 c0       	rjmp	.+0      	; 0x7a <MDIO_SetPinOutput+0x7a>
  7a:	88 0f       	add	r24, r24
  7c:	99 1f       	adc	r25, r25
  7e:	0a 94       	dec	r0
  80:	02 f4       	brpl	.+0      	; 0x82 <MDIO_SetPinOutput+0x82>
  82:	84 2b       	or	r24, r20
  84:	8c 93       	st	X, r24
  86:	00 c0       	rjmp	.+0      	; 0x88 <MDIO_SetPinOutput+0x88>
  88:	ab e3       	ldi	r26, 0x3B	; 59
		case OUTPUT:
			SET_BIT(MDIO_DDRA, bitNum);				// set DDRA bitNum to 1
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	eb e3       	ldi	r30, 0x3B	; 59
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	48 2f       	mov	r20, r24
  94:	8a 81       	ldd	r24, Y+2	; 0x02
  96:	28 2f       	mov	r18, r24
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 2e       	mov	r0, r18
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <MDIO_SetPinOutput+0xa2>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	0a 94       	dec	r0
  a8:	02 f4       	brpl	.+0      	; 0xaa <MDIO_SetPinOutput+0xaa>
  aa:	80 95       	com	r24
  ac:	84 23       	and	r24, r20
  ae:	8c 93       	st	X, r24
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <MDIO_SetPinOutput+0xb2>
			break;
		case INPUT_FLOAT:
			CLR_BIT(MDIO_DDRA, bitNum);				// set DDRA bitNum to 0
  b2:	8b 81       	ldd	r24, Y+3	; 0x03
  b4:	88 23       	and	r24, r24
  b6:	01 f0       	breq	.+0      	; 0xb8 <MDIO_SetPinOutput+0xb8>
  b8:	a8 e3       	ldi	r26, 0x38	; 56
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	e8 e3       	ldi	r30, 0x38	; 56
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	48 2f       	mov	r20, r24
  c4:	8a 81       	ldd	r24, Y+2	; 0x02
  c6:	28 2f       	mov	r18, r24
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 2e       	mov	r0, r18
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <MDIO_SetPinOutput+0xd2>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	0a 94       	dec	r0
  d8:	02 f4       	brpl	.+0      	; 0xda <MDIO_SetPinOutput+0xda>
  da:	84 2b       	or	r24, r20
			break;
		case INPUT_PULLUP:
			CLR_BIT(MDIO_DDRA, bitNum);				// set DDRA bitNum to 0
  dc:	8c 93       	st	X, r24
  de:	00 c0       	rjmp	.+0      	; 0xe0 <MDIO_SetPinOutput+0xe0>
  e0:	a8 e3       	ldi	r26, 0x38	; 56
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e8 e3       	ldi	r30, 0x38	; 56
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	48 2f       	mov	r20, r24
  ec:	8a 81       	ldd	r24, Y+2	; 0x02
  ee:	28 2f       	mov	r18, r24
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 2e       	mov	r0, r18
  f8:	00 c0       	rjmp	.+0      	; 0xfa <MDIO_SetPinOutput+0xfa>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	0a 94       	dec	r0
 100:	02 f4       	brpl	.+0      	; 0x102 <MDIO_SetPinOutput+0x102>
			SET_BIT(MDIO_PORTA, bitNum);			// set PORTA bitNum to 1
 102:	80 95       	com	r24
 104:	84 23       	and	r24, r20
 106:	8c 93       	st	X, r24
 108:	00 c0       	rjmp	.+0      	; 0x10a <MDIO_SetPinOutput+0x10a>
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	88 23       	and	r24, r24
 10e:	01 f0       	breq	.+0      	; 0x110 <MDIO_SetPinOutput+0x110>
 110:	a5 e3       	ldi	r26, 0x35	; 53
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e5 e3       	ldi	r30, 0x35	; 53
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	48 2f       	mov	r20, r24
 11c:	8a 81       	ldd	r24, Y+2	; 0x02
 11e:	28 2f       	mov	r18, r24
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 2e       	mov	r0, r18
 128:	00 c0       	rjmp	.+0      	; 0x12a <MDIO_SetPinOutput+0x12a>
			break;
		} // end switch(status)
		break;
	// ********************* PORTB ****************************
	case PORTB:
		switch (status) {
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	0a 94       	dec	r0
 130:	02 f4       	brpl	.+0      	; 0x132 <MDIO_SetPinOutput+0x132>
 132:	84 2b       	or	r24, r20
 134:	8c 93       	st	X, r24
 136:	00 c0       	rjmp	.+0      	; 0x138 <MDIO_SetPinOutput+0x138>
 138:	a5 e3       	ldi	r26, 0x35	; 53
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	e5 e3       	ldi	r30, 0x35	; 53
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	48 2f       	mov	r20, r24
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	28 2f       	mov	r18, r24
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 2e       	mov	r0, r18
 150:	00 c0       	rjmp	.+0      	; 0x152 <MDIO_SetPinOutput+0x152>
 152:	88 0f       	add	r24, r24
		case OUTPUT:
			SET_BIT(MDIO_DDRB, bitNum);				// set DDRB bitNum to 1
 154:	99 1f       	adc	r25, r25
 156:	0a 94       	dec	r0
 158:	02 f4       	brpl	.+0      	; 0x15a <MDIO_SetPinOutput+0x15a>
 15a:	80 95       	com	r24
 15c:	84 23       	and	r24, r20
 15e:	8c 93       	st	X, r24
 160:	00 c0       	rjmp	.+0      	; 0x162 <MDIO_SetPinOutput+0x162>
 162:	8b 81       	ldd	r24, Y+3	; 0x03
 164:	88 23       	and	r24, r24
 166:	01 f0       	breq	.+0      	; 0x168 <MDIO_SetPinOutput+0x168>
 168:	a2 e3       	ldi	r26, 0x32	; 50
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	e2 e3       	ldi	r30, 0x32	; 50
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	48 2f       	mov	r20, r24
 174:	8a 81       	ldd	r24, Y+2	; 0x02
 176:	28 2f       	mov	r18, r24
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	81 e0       	ldi	r24, 0x01	; 1
			break;
		case INPUT_FLOAT:
			CLR_BIT(MDIO_DDRB, bitNum);				// set DDRB bitNum to 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 2e       	mov	r0, r18
 180:	00 c0       	rjmp	.+0      	; 0x182 <MDIO_SetPinOutput+0x182>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	0a 94       	dec	r0
 188:	02 f4       	brpl	.+0      	; 0x18a <MDIO_SetPinOutput+0x18a>
 18a:	84 2b       	or	r24, r20
 18c:	8c 93       	st	X, r24
 18e:	00 c0       	rjmp	.+0      	; 0x190 <MDIO_SetPinOutput+0x190>
 190:	a2 e3       	ldi	r26, 0x32	; 50
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	e2 e3       	ldi	r30, 0x32	; 50
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	48 2f       	mov	r20, r24
 19c:	8a 81       	ldd	r24, Y+2	; 0x02
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case INPUT_PULLUP:
			CLR_BIT(MDIO_DDRB, bitNum);				// set DDRB bitNum to 0
 1a6:	02 2e       	mov	r0, r18
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <MDIO_SetPinOutput+0x1aa>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	0a 94       	dec	r0
 1b0:	02 f4       	brpl	.+0      	; 0x1b2 <MDIO_SetPinOutput+0x1b2>
 1b2:	80 95       	com	r24
 1b4:	84 23       	and	r24, r20
 1b6:	8c 93       	st	X, r24
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	cf 91       	pop	r28
 1c4:	df 91       	pop	r29
 1c6:	08 95       	ret

Disassembly of section .text.MDIO_SetPortValue:

00000000 <MDIO_SetPortValue>:
#include "../libraries/L_STD_TYPES.h"
#include "../libraries/L_UTILS.h"
#include "MDIO_private.h"
#include "MDIO_interface.h"

void MDIO_SetPinDirection (uint8 port, uint8 bitNum, uint8 status) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <MDIO_SetPortValue+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <MDIO_SetPortValue+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	6a 83       	std	Y+2, r22	; 0x02
  10:	89 81       	ldd	r24, Y+1	; 0x01
  12:	28 2f       	mov	r18, r24
  14:	30 e0       	ldi	r19, 0x00	; 0
  16:	3c 83       	std	Y+4, r19	; 0x04
  18:	2b 83       	std	Y+3, r18	; 0x03
    // TODO: switch on port
	switch (port) {
  1a:	8b 81       	ldd	r24, Y+3	; 0x03
  1c:	9c 81       	ldd	r25, Y+4	; 0x04
  1e:	82 30       	cpi	r24, 0x02	; 2
  20:	91 05       	cpc	r25, r1
  22:	01 f0       	breq	.+0      	; 0x24 <MDIO_SetPortValue+0x24>
  24:	2b 81       	ldd	r18, Y+3	; 0x03
  26:	3c 81       	ldd	r19, Y+4	; 0x04
  28:	23 30       	cpi	r18, 0x03	; 3
  2a:	31 05       	cpc	r19, r1
  2c:	04 f4       	brge	.+0      	; 0x2e <MDIO_SetPortValue+0x2e>
  2e:	8b 81       	ldd	r24, Y+3	; 0x03
  30:	9c 81       	ldd	r25, Y+4	; 0x04
  32:	81 30       	cpi	r24, 0x01	; 1
  34:	91 05       	cpc	r25, r1
  36:	01 f0       	breq	.+0      	; 0x38 <MDIO_SetPortValue+0x38>
  38:	00 c0       	rjmp	.+0      	; 0x3a <MDIO_SetPortValue+0x3a>
  3a:	2b 81       	ldd	r18, Y+3	; 0x03
  3c:	3c 81       	ldd	r19, Y+4	; 0x04
  3e:	23 30       	cpi	r18, 0x03	; 3
  40:	31 05       	cpc	r19, r1
  42:	01 f0       	breq	.+0      	; 0x44 <MDIO_SetPortValue+0x44>
  44:	8b 81       	ldd	r24, Y+3	; 0x03
  46:	9c 81       	ldd	r25, Y+4	; 0x04
  48:	84 30       	cpi	r24, 0x04	; 4
  4a:	91 05       	cpc	r25, r1
  4c:	01 f0       	breq	.+0      	; 0x4e <MDIO_SetPortValue+0x4e>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <MDIO_SetPortValue+0x50>
  50:	eb e3       	ldi	r30, 0x3B	; 59
  52:	f0 e0       	ldi	r31, 0x00	; 0
  54:	8a 81       	ldd	r24, Y+2	; 0x02
  56:	80 83       	st	Z, r24
  58:	00 c0       	rjmp	.+0      	; 0x5a <MDIO_SetPortValue+0x5a>
  5a:	e8 e3       	ldi	r30, 0x38	; 56
  5c:	f0 e0       	ldi	r31, 0x00	; 0
  5e:	8a 81       	ldd	r24, Y+2	; 0x02
	// ********************* PORTA ****************************
	case PORTA:
		switch (status) {
  60:	80 83       	st	Z, r24
  62:	00 c0       	rjmp	.+0      	; 0x64 <MDIO_SetPortValue+0x64>
  64:	e5 e3       	ldi	r30, 0x35	; 53
  66:	f0 e0       	ldi	r31, 0x00	; 0
  68:	8a 81       	ldd	r24, Y+2	; 0x02
  6a:	80 83       	st	Z, r24
  6c:	00 c0       	rjmp	.+0      	; 0x6e <MDIO_SetPortValue+0x6e>
  6e:	e2 e3       	ldi	r30, 0x32	; 50
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	8a 81       	ldd	r24, Y+2	; 0x02
  74:	80 83       	st	Z, r24
  76:	0f 90       	pop	r0
  78:	0f 90       	pop	r0
  7a:	0f 90       	pop	r0
  7c:	0f 90       	pop	r0
  7e:	cf 91       	pop	r28
  80:	df 91       	pop	r29
  82:	08 95       	ret

Disassembly of section .text.MDIO_GetPinValue:

00000000 <MDIO_GetPinValue>:
#include "../libraries/L_STD_TYPES.h"
#include "../libraries/L_UTILS.h"
#include "MDIO_private.h"
#include "MDIO_interface.h"

void MDIO_SetPinDirection (uint8 port, uint8 bitNum, uint8 status) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <MDIO_GetPinValue+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <MDIO_GetPinValue+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8a 83       	std	Y+2, r24	; 0x02
  10:	6b 83       	std	Y+3, r22	; 0x03
  12:	8a 81       	ldd	r24, Y+2	; 0x02
  14:	28 2f       	mov	r18, r24
  16:	30 e0       	ldi	r19, 0x00	; 0
  18:	3d 83       	std	Y+5, r19	; 0x05
    // TODO: switch on port
	switch (port) {
  1a:	2c 83       	std	Y+4, r18	; 0x04
  1c:	4c 81       	ldd	r20, Y+4	; 0x04
  1e:	5d 81       	ldd	r21, Y+5	; 0x05
  20:	42 30       	cpi	r20, 0x02	; 2
  22:	51 05       	cpc	r21, r1
  24:	01 f0       	breq	.+0      	; 0x26 <MDIO_GetPinValue+0x26>
  26:	8c 81       	ldd	r24, Y+4	; 0x04
  28:	9d 81       	ldd	r25, Y+5	; 0x05
  2a:	83 30       	cpi	r24, 0x03	; 3
  2c:	91 05       	cpc	r25, r1
  2e:	04 f4       	brge	.+0      	; 0x30 <MDIO_GetPinValue+0x30>
  30:	2c 81       	ldd	r18, Y+4	; 0x04
  32:	3d 81       	ldd	r19, Y+5	; 0x05
  34:	21 30       	cpi	r18, 0x01	; 1
  36:	31 05       	cpc	r19, r1
  38:	01 f0       	breq	.+0      	; 0x3a <MDIO_GetPinValue+0x3a>
  3a:	00 c0       	rjmp	.+0      	; 0x3c <MDIO_GetPinValue+0x3c>
  3c:	4c 81       	ldd	r20, Y+4	; 0x04
  3e:	5d 81       	ldd	r21, Y+5	; 0x05
  40:	43 30       	cpi	r20, 0x03	; 3
  42:	51 05       	cpc	r21, r1
  44:	01 f0       	breq	.+0      	; 0x46 <MDIO_GetPinValue+0x46>
  46:	8c 81       	ldd	r24, Y+4	; 0x04
  48:	9d 81       	ldd	r25, Y+5	; 0x05
  4a:	84 30       	cpi	r24, 0x04	; 4
  4c:	91 05       	cpc	r25, r1
  4e:	01 f0       	breq	.+0      	; 0x50 <MDIO_GetPinValue+0x50>
  50:	00 c0       	rjmp	.+0      	; 0x52 <MDIO_GetPinValue+0x52>
  52:	e9 e3       	ldi	r30, 0x39	; 57
  54:	f0 e0       	ldi	r31, 0x00	; 0
  56:	80 81       	ld	r24, Z
  58:	28 2f       	mov	r18, r24
  5a:	30 e0       	ldi	r19, 0x00	; 0
  5c:	8b 81       	ldd	r24, Y+3	; 0x03
  5e:	88 2f       	mov	r24, r24
	// ********************* PORTA ****************************
	case PORTA:
		switch (status) {
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	a9 01       	movw	r20, r18
  64:	00 c0       	rjmp	.+0      	; 0x66 <MDIO_GetPinValue+0x66>
  66:	55 95       	asr	r21
  68:	47 95       	ror	r20
  6a:	8a 95       	dec	r24
  6c:	02 f4       	brpl	.+0      	; 0x6e <MDIO_GetPinValue+0x6e>
  6e:	ca 01       	movw	r24, r20
  70:	81 70       	andi	r24, 0x01	; 1
  72:	89 83       	std	Y+1, r24	; 0x01
  74:	00 c0       	rjmp	.+0      	; 0x76 <MDIO_GetPinValue+0x76>
  76:	e6 e3       	ldi	r30, 0x36	; 54
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	80 81       	ld	r24, Z
  7c:	28 2f       	mov	r18, r24
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	8b 81       	ldd	r24, Y+3	; 0x03
  82:	88 2f       	mov	r24, r24
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	a9 01       	movw	r20, r18
  88:	00 c0       	rjmp	.+0      	; 0x8a <MDIO_GetPinValue+0x8a>
		case OUTPUT:
			SET_BIT(MDIO_DDRA, bitNum);				// set DDRA bitNum to 1
  8a:	55 95       	asr	r21
  8c:	47 95       	ror	r20
  8e:	8a 95       	dec	r24
  90:	02 f4       	brpl	.+0      	; 0x92 <MDIO_GetPinValue+0x92>
  92:	ca 01       	movw	r24, r20
  94:	81 70       	andi	r24, 0x01	; 1
  96:	89 83       	std	Y+1, r24	; 0x01
  98:	00 c0       	rjmp	.+0      	; 0x9a <MDIO_GetPinValue+0x9a>
  9a:	e3 e3       	ldi	r30, 0x33	; 51
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	28 2f       	mov	r18, r24
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	8b 81       	ldd	r24, Y+3	; 0x03
  a6:	88 2f       	mov	r24, r24
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	a9 01       	movw	r20, r18
  ac:	00 c0       	rjmp	.+0      	; 0xae <MDIO_GetPinValue+0xae>
  ae:	55 95       	asr	r21
  b0:	47 95       	ror	r20
			break;
		case INPUT_FLOAT:
			CLR_BIT(MDIO_DDRA, bitNum);				// set DDRA bitNum to 0
  b2:	8a 95       	dec	r24
  b4:	02 f4       	brpl	.+0      	; 0xb6 <MDIO_GetPinValue+0xb6>
  b6:	ca 01       	movw	r24, r20
  b8:	81 70       	andi	r24, 0x01	; 1
  ba:	89 83       	std	Y+1, r24	; 0x01
  bc:	00 c0       	rjmp	.+0      	; 0xbe <MDIO_GetPinValue+0xbe>
  be:	e0 e3       	ldi	r30, 0x30	; 48
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	28 2f       	mov	r18, r24
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	8b 81       	ldd	r24, Y+3	; 0x03
  ca:	88 2f       	mov	r24, r24
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	a9 01       	movw	r20, r18
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <MDIO_GetPinValue+0xd2>
  d2:	55 95       	asr	r21
  d4:	47 95       	ror	r20
  d6:	8a 95       	dec	r24
  d8:	02 f4       	brpl	.+0      	; 0xda <MDIO_GetPinValue+0xda>
  da:	ca 01       	movw	r24, r20
			break;
		case INPUT_PULLUP:
			CLR_BIT(MDIO_DDRA, bitNum);				// set DDRA bitNum to 0
  dc:	81 70       	andi	r24, 0x01	; 1
  de:	89 83       	std	Y+1, r24	; 0x01
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <MDIO_GetPinValue+0xe2>
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	89 83       	std	Y+1, r24	; 0x01
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	cf 91       	pop	r28
  f4:	df 91       	pop	r29
  f6:	08 95       	ret

Disassembly of section .text.MDIO_GetPortValue:

00000000 <MDIO_GetPortValue>:
#include "../libraries/L_STD_TYPES.h"
#include "../libraries/L_UTILS.h"
#include "MDIO_private.h"
#include "MDIO_interface.h"

void MDIO_SetPinDirection (uint8 port, uint8 bitNum, uint8 status) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <MDIO_GetPortValue+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <MDIO_GetPortValue+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	8a 83       	std	Y+2, r24	; 0x02
   e:	8a 81       	ldd	r24, Y+2	; 0x02
  10:	28 2f       	mov	r18, r24
  12:	30 e0       	ldi	r19, 0x00	; 0
  14:	3c 83       	std	Y+4, r19	; 0x04
  16:	2b 83       	std	Y+3, r18	; 0x03
  18:	8b 81       	ldd	r24, Y+3	; 0x03
    // TODO: switch on port
	switch (port) {
  1a:	9c 81       	ldd	r25, Y+4	; 0x04
  1c:	82 30       	cpi	r24, 0x02	; 2
  1e:	91 05       	cpc	r25, r1
  20:	01 f0       	breq	.+0      	; 0x22 <MDIO_GetPortValue+0x22>
  22:	2b 81       	ldd	r18, Y+3	; 0x03
  24:	3c 81       	ldd	r19, Y+4	; 0x04
  26:	23 30       	cpi	r18, 0x03	; 3
  28:	31 05       	cpc	r19, r1
  2a:	04 f4       	brge	.+0      	; 0x2c <MDIO_GetPortValue+0x2c>
  2c:	8b 81       	ldd	r24, Y+3	; 0x03
  2e:	9c 81       	ldd	r25, Y+4	; 0x04
  30:	81 30       	cpi	r24, 0x01	; 1
  32:	91 05       	cpc	r25, r1
  34:	01 f0       	breq	.+0      	; 0x36 <MDIO_GetPortValue+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <MDIO_GetPortValue+0x38>
  38:	2b 81       	ldd	r18, Y+3	; 0x03
  3a:	3c 81       	ldd	r19, Y+4	; 0x04
  3c:	23 30       	cpi	r18, 0x03	; 3
  3e:	31 05       	cpc	r19, r1
  40:	01 f0       	breq	.+0      	; 0x42 <MDIO_GetPortValue+0x42>
  42:	8b 81       	ldd	r24, Y+3	; 0x03
  44:	9c 81       	ldd	r25, Y+4	; 0x04
  46:	84 30       	cpi	r24, 0x04	; 4
  48:	91 05       	cpc	r25, r1
  4a:	01 f0       	breq	.+0      	; 0x4c <MDIO_GetPortValue+0x4c>
  4c:	00 c0       	rjmp	.+0      	; 0x4e <MDIO_GetPortValue+0x4e>
  4e:	e9 e3       	ldi	r30, 0x39	; 57
  50:	f0 e0       	ldi	r31, 0x00	; 0
  52:	80 81       	ld	r24, Z
  54:	89 83       	std	Y+1, r24	; 0x01
  56:	00 c0       	rjmp	.+0      	; 0x58 <MDIO_GetPortValue+0x58>
  58:	e6 e3       	ldi	r30, 0x36	; 54
  5a:	f0 e0       	ldi	r31, 0x00	; 0
  5c:	80 81       	ld	r24, Z
  5e:	89 83       	std	Y+1, r24	; 0x01
	// ********************* PORTA ****************************
	case PORTA:
		switch (status) {
  60:	00 c0       	rjmp	.+0      	; 0x62 <MDIO_GetPortValue+0x62>
  62:	e3 e3       	ldi	r30, 0x33	; 51
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	80 81       	ld	r24, Z
  68:	89 83       	std	Y+1, r24	; 0x01
  6a:	00 c0       	rjmp	.+0      	; 0x6c <MDIO_GetPortValue+0x6c>
  6c:	e0 e3       	ldi	r30, 0x30	; 48
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	89 83       	std	Y+1, r24	; 0x01
  74:	00 c0       	rjmp	.+0      	; 0x76 <MDIO_GetPortValue+0x76>
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	89 83       	std	Y+1, r24	; 0x01
  7a:	89 81       	ldd	r24, Y+1	; 0x01
  7c:	0f 90       	pop	r0
  7e:	0f 90       	pop	r0
  80:	0f 90       	pop	r0
  82:	0f 90       	pop	r0
  84:	cf 91       	pop	r28
  86:	df 91       	pop	r29
  88:	08 95       	ret

HKeyPad_program.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000002f4  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000003d9  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .data.KPD_arr 00000010  00000000  00000000  00000701  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .text.HKeyPad_init 0000001e  00000000  00000000  00000711  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.HKeyPad_getKey 000000b0  00000000  00000000  0000072f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.HKeyPad_init:

00000000 <HKeyPad_init>:
#include "../MCAL/MDIO_interface.h"
#include "HKeyPad_private.h"
#include "HKeyPad_interface.h"


void HKeyPad_init() {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
    MDIO_SetPortDirection(KPD_PORT, KPD_DIRECTION);
   8:	81 e0       	ldi	r24, 0x01	; 1
   a:	6f e0       	ldi	r22, 0x0F	; 15
   c:	0e 94 00 00 	call	0	; 0x0 <HKeyPad_init>
    MDIO_SetPortValue(KPD_PORT, ~(KPD_DIRECTION));
  10:	81 e0       	ldi	r24, 0x01	; 1
  12:	60 ef       	ldi	r22, 0xF0	; 240
  14:	0e 94 00 00 	call	0	; 0x0 <HKeyPad_init>
}// end HKeyPad_init
  18:	cf 91       	pop	r28
  1a:	df 91       	pop	r29
  1c:	08 95       	ret

Disassembly of section .text.HKeyPad_getKey:

00000000 <HKeyPad_getKey>:
#include "../MCAL/MDIO_interface.h"
#include "HKeyPad_private.h"
#include "HKeyPad_interface.h"


void HKeyPad_init() {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <HKeyPad_getKey+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <HKeyPad_getKey+0x8>
    MDIO_SetPortDirection(KPD_PORT, KPD_DIRECTION);
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	1a 82       	std	Y+2, r1	; 0x02
   e:	00 c0       	rjmp	.+0      	; 0x10 <HKeyPad_getKey+0x10>
    MDIO_SetPortValue(KPD_PORT, ~(KPD_DIRECTION));
  10:	81 e0       	ldi	r24, 0x01	; 1
  12:	60 e0       	ldi	r22, 0x00	; 0
  14:	41 e0       	ldi	r20, 0x01	; 1
  16:	0e 94 00 00 	call	0	; 0x0 <HKeyPad_getKey>
}// end HKeyPad_init
  1a:	81 e0       	ldi	r24, 0x01	; 1
  1c:	61 e0       	ldi	r22, 0x01	; 1
  1e:	41 e0       	ldi	r20, 0x01	; 1
  20:	0e 94 00 00 	call	0	; 0x0 <HKeyPad_getKey>
  24:	81 e0       	ldi	r24, 0x01	; 1
  26:	62 e0       	ldi	r22, 0x02	; 2
  28:	41 e0       	ldi	r20, 0x01	; 1
  2a:	0e 94 00 00 	call	0	; 0x0 <HKeyPad_getKey>
  2e:	81 e0       	ldi	r24, 0x01	; 1
  30:	63 e0       	ldi	r22, 0x03	; 3
  32:	41 e0       	ldi	r20, 0x01	; 1
  34:	0e 94 00 00 	call	0	; 0x0 <HKeyPad_getKey>
  38:	81 e0       	ldi	r24, 0x01	; 1
  3a:	6a 81       	ldd	r22, Y+2	; 0x02
  3c:	40 e0       	ldi	r20, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <HKeyPad_getKey>
  42:	84 e0       	ldi	r24, 0x04	; 4
  44:	89 83       	std	Y+1, r24	; 0x01
  46:	00 c0       	rjmp	.+0      	; 0x48 <HKeyPad_getKey+0x48>
  48:	81 e0       	ldi	r24, 0x01	; 1
  4a:	69 81       	ldd	r22, Y+1	; 0x01
  4c:	0e 94 00 00 	call	0	; 0x0 <HKeyPad_getKey>
  50:	8b 83       	std	Y+3, r24	; 0x03
  52:	8b 81       	ldd	r24, Y+3	; 0x03
  54:	88 23       	and	r24, r24
  56:	01 f4       	brne	.+0      	; 0x58 <HKeyPad_getKey+0x58>
  58:	89 81       	ldd	r24, Y+1	; 0x01
  5a:	88 2f       	mov	r24, r24
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	ac 01       	movw	r20, r24
  60:	44 50       	subi	r20, 0x04	; 4
  62:	50 40       	sbci	r21, 0x00	; 0
  64:	8a 81       	ldd	r24, Y+2	; 0x02
  66:	28 2f       	mov	r18, r24
  68:	30 e0       	ldi	r19, 0x00	; 0
  6a:	ca 01       	movw	r24, r20
  6c:	88 0f       	add	r24, r24
  6e:	99 1f       	adc	r25, r25
  70:	88 0f       	add	r24, r24
  72:	99 1f       	adc	r25, r25
  74:	82 0f       	add	r24, r18
  76:	93 1f       	adc	r25, r19
  78:	fc 01       	movw	r30, r24
  7a:	e0 50       	subi	r30, 0x00	; 0
  7c:	f0 40       	sbci	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	8c 83       	std	Y+4, r24	; 0x04
  82:	00 c0       	rjmp	.+0      	; 0x84 <HKeyPad_getKey+0x84>
  84:	89 81       	ldd	r24, Y+1	; 0x01
  86:	8f 5f       	subi	r24, 0xFF	; 255
  88:	89 83       	std	Y+1, r24	; 0x01
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	88 30       	cpi	r24, 0x08	; 8
  8e:	00 f0       	brcs	.+0      	; 0x90 <HKeyPad_getKey+0x90>
  90:	8a 81       	ldd	r24, Y+2	; 0x02
  92:	8f 5f       	subi	r24, 0xFF	; 255
  94:	8a 83       	std	Y+2, r24	; 0x02
  96:	8a 81       	ldd	r24, Y+2	; 0x02
  98:	84 30       	cpi	r24, 0x04	; 4
  9a:	00 f4       	brcc	.+0      	; 0x9c <HKeyPad_getKey+0x9c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <HKeyPad_getKey+0x9e>
  9e:	1c 82       	std	Y+4, r1	; 0x04
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	0f 90       	pop	r0
  a4:	0f 90       	pop	r0
  a6:	0f 90       	pop	r0
  a8:	0f 90       	pop	r0
  aa:	cf 91       	pop	r28
  ac:	df 91       	pop	r29
  ae:	08 95       	ret

HLCD_program.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000011ac  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001d36  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .data.mode    00000001  00000000  00000000  00002f16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .text.writeText 00000052  00000000  00000000  00002f17  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.HLCD_clear 0000002a  00000000  00000000  00002f69  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.HLCD_setLine 0000001c  00000000  00000000  00002f93  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.HLCD_setCursor 0000005e  00000000  00000000  00002faf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.HLCD_shiftDisplay 0000005e  00000000  00000000  0000300d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.HLCD_shiftCursor 000000b6  00000000  00000000  0000306b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.HLCD_init 00000888  00000000  00000000  00003121  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.HLCD_writeCMD 0000013c  00000000  00000000  000039a9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text.HLCD_writeData 00000362  00000000  00000000  00003ae5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.writeText:

00000000 <writeText>:
	_delay_ms(2);							// delay 2ms
	MDIO_SetPinOutput(HLCD_E, LOW);			// Set E to 0 (falling edge: Write Data)
	return;
}// end HLCD_writeCMD

void HLCD_writeData(uint8 data) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <writeText+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9b 83       	std	Y+3, r25	; 0x03
   e:	8a 83       	std	Y+2, r24	; 0x02
  10:	19 82       	std	Y+1, r1	; 0x01
  12:	00 c0       	rjmp	.+0      	; 0x14 <writeText+0x14>
  14:	89 81       	ldd	r24, Y+1	; 0x01
	MDIO_SetPinOutput(HLCD_RS, HIGH);		// set RS to 1 (Data Reg)
  16:	28 2f       	mov	r18, r24
  18:	30 e0       	ldi	r19, 0x00	; 0
  1a:	8a 81       	ldd	r24, Y+2	; 0x02
  1c:	9b 81       	ldd	r25, Y+3	; 0x03
  1e:	fc 01       	movw	r30, r24
	MDIO_SetPinOutput(HLCD_RW, LOW); 		// Set RW to 0
  20:	e2 0f       	add	r30, r18
  22:	f3 1f       	adc	r31, r19
  24:	80 81       	ld	r24, Z
  26:	0e 94 00 00 	call	0	; 0x0 <writeText>

	if (mode == HLCD_8_BIT) {
  2a:	89 81       	ldd	r24, Y+1	; 0x01
  2c:	8f 5f       	subi	r24, 0xFF	; 255
  2e:	89 83       	std	Y+1, r24	; 0x01
  30:	89 81       	ldd	r24, Y+1	; 0x01
  32:	28 2f       	mov	r18, r24
		MDIO_SetPortValue(HLCD_PORT, data);	// Write the data to D0-D7
  34:	30 e0       	ldi	r19, 0x00	; 0
  36:	8a 81       	ldd	r24, Y+2	; 0x02
  38:	9b 81       	ldd	r25, Y+3	; 0x03
  3a:	fc 01       	movw	r30, r24
		MDIO_SetPinOutput(HLCD_E, HIGH); 		// Set E to 1 (Read Data)
  3c:	e2 0f       	add	r30, r18
  3e:	f3 1f       	adc	r31, r19
  40:	80 81       	ld	r24, Z
  42:	88 23       	and	r24, r24
  44:	01 f4       	brne	.+0      	; 0x46 <writeText+0x46>
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	0f 90       	pop	r0
  4c:	cf 91       	pop	r28
  4e:	df 91       	pop	r29
  50:	08 95       	ret

Disassembly of section .text.HLCD_clear:

00000000 <HLCD_clear>:
	_delay_ms(2);							// delay 2ms
	MDIO_SetPinOutput(HLCD_E, LOW);			// Set E to 0 (falling edge: Write Data)
	return;
}// end HLCD_writeCMD

void HLCD_writeData(uint8 data) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	80 91 00 00 	lds	r24, 0x0000
   c:	81 30       	cpi	r24, 0x01	; 1
   e:	01 f4       	brne	.+0      	; 0x10 <HLCD_clear+0x10>
  10:	81 e0       	ldi	r24, 0x01	; 1
  12:	0e 94 00 00 	call	0	; 0x0 <HLCD_clear>
	MDIO_SetPinOutput(HLCD_RS, HIGH);		// set RS to 1 (Data Reg)
  16:	00 c0       	rjmp	.+0      	; 0x18 <HLCD_clear+0x18>
  18:	81 e0       	ldi	r24, 0x01	; 1
  1a:	0e 94 00 00 	call	0	; 0x0 <HLCD_clear>
  1e:	80 e1       	ldi	r24, 0x10	; 16
	MDIO_SetPinOutput(HLCD_RW, LOW); 		// Set RW to 0
  20:	0e 94 00 00 	call	0	; 0x0 <HLCD_clear>
  24:	cf 91       	pop	r28
  26:	df 91       	pop	r29
  28:	08 95       	ret

Disassembly of section .text.HLCD_setLine:

00000000 <HLCD_setLine>:
	_delay_ms(2);							// delay 2ms
	MDIO_SetPinOutput(HLCD_E, LOW);			// Set E to 0 (falling edge: Write Data)
	return;
}// end HLCD_writeCMD

void HLCD_writeData(uint8 data) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
   c:	89 81       	ldd	r24, Y+1	; 0x01
   e:	60 e0       	ldi	r22, 0x00	; 0
  10:	0e 94 00 00 	call	0	; 0x0 <HLCD_setLine>
  14:	0f 90       	pop	r0
	MDIO_SetPinOutput(HLCD_RS, HIGH);		// set RS to 1 (Data Reg)
  16:	cf 91       	pop	r28
  18:	df 91       	pop	r29
  1a:	08 95       	ret

Disassembly of section .text.HLCD_setCursor:

00000000 <HLCD_setCursor>:
	_delay_ms(2);							// delay 2ms
	MDIO_SetPinOutput(HLCD_E, LOW);			// Set E to 0 (falling edge: Write Data)
	return;
}// end HLCD_writeCMD

void HLCD_writeData(uint8 data) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <HLCD_setCursor+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	8a 83       	std	Y+2, r24	; 0x02
   e:	6b 83       	std	Y+3, r22	; 0x03
  10:	8a 81       	ldd	r24, Y+2	; 0x02
  12:	88 2f       	mov	r24, r24
  14:	90 e0       	ldi	r25, 0x00	; 0
	MDIO_SetPinOutput(HLCD_RS, HIGH);		// set RS to 1 (Data Reg)
  16:	00 24       	eor	r0, r0
  18:	96 95       	lsr	r25
  1a:	87 95       	ror	r24
  1c:	07 94       	ror	r0
  1e:	96 95       	lsr	r25
	MDIO_SetPinOutput(HLCD_RW, LOW); 		// Set RW to 0
  20:	87 95       	ror	r24
  22:	07 94       	ror	r0
  24:	98 2f       	mov	r25, r24
  26:	80 2d       	mov	r24, r0
  28:	80 68       	ori	r24, 0x80	; 128

	if (mode == HLCD_8_BIT) {
  2a:	98 2f       	mov	r25, r24
  2c:	8b 81       	ldd	r24, Y+3	; 0x03
  2e:	89 0f       	add	r24, r25
  30:	89 83       	std	Y+1, r24	; 0x01
  32:	80 91 00 00 	lds	r24, 0x0000
		MDIO_SetPortValue(HLCD_PORT, data);	// Write the data to D0-D7
  36:	81 30       	cpi	r24, 0x01	; 1
  38:	01 f4       	brne	.+0      	; 0x3a <HLCD_setCursor+0x3a>
  3a:	89 81       	ldd	r24, Y+1	; 0x01
		MDIO_SetPinOutput(HLCD_E, HIGH); 		// Set E to 1 (Read Data)
  3c:	0e 94 00 00 	call	0	; 0x0 <HLCD_setCursor>
  40:	00 c0       	rjmp	.+0      	; 0x42 <HLCD_setCursor+0x42>
  42:	89 81       	ldd	r24, Y+1	; 0x01
  44:	0e 94 00 00 	call	0	; 0x0 <HLCD_setCursor>
  48:	89 81       	ldd	r24, Y+1	; 0x01
  4a:	82 95       	swap	r24
  4c:	80 7f       	andi	r24, 0xF0	; 240
  4e:	0e 94 00 00 	call	0	; 0x0 <HLCD_setCursor>
  52:	0f 90       	pop	r0
  54:	0f 90       	pop	r0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  56:	0f 90       	pop	r0
  58:	cf 91       	pop	r28
  5a:	df 91       	pop	r29
  5c:	08 95       	ret

Disassembly of section .text.HLCD_shiftDisplay:

00000000 <HLCD_shiftDisplay>:
	_delay_ms(2);							// delay 2ms
	MDIO_SetPinOutput(HLCD_E, LOW);			// Set E to 0 (falling edge: Write Data)
	return;
}// end HLCD_writeCMD

void HLCD_writeData(uint8 data) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
   c:	80 91 00 00 	lds	r24, 0x0000
  10:	81 30       	cpi	r24, 0x01	; 1
  12:	01 f4       	brne	.+0      	; 0x14 <HLCD_shiftDisplay+0x14>
  14:	89 81       	ldd	r24, Y+1	; 0x01
	MDIO_SetPinOutput(HLCD_RS, HIGH);		// set RS to 1 (Data Reg)
  16:	81 30       	cpi	r24, 0x01	; 1
  18:	01 f4       	brne	.+0      	; 0x1a <HLCD_shiftDisplay+0x1a>
  1a:	88 e1       	ldi	r24, 0x18	; 24
  1c:	0e 94 00 00 	call	0	; 0x0 <HLCD_shiftDisplay>
	MDIO_SetPinOutput(HLCD_RW, LOW); 		// Set RW to 0
  20:	00 c0       	rjmp	.+0      	; 0x22 <HLCD_shiftDisplay+0x22>
  22:	89 81       	ldd	r24, Y+1	; 0x01
  24:	82 30       	cpi	r24, 0x02	; 2
  26:	01 f4       	brne	.+0      	; 0x28 <HLCD_shiftDisplay+0x28>
  28:	8c e1       	ldi	r24, 0x1C	; 28

	if (mode == HLCD_8_BIT) {
  2a:	0e 94 00 00 	call	0	; 0x0 <HLCD_shiftDisplay>
  2e:	00 c0       	rjmp	.+0      	; 0x30 <HLCD_shiftDisplay+0x30>
  30:	89 81       	ldd	r24, Y+1	; 0x01
  32:	81 30       	cpi	r24, 0x01	; 1
		MDIO_SetPortValue(HLCD_PORT, data);	// Write the data to D0-D7
  34:	01 f4       	brne	.+0      	; 0x36 <HLCD_shiftDisplay+0x36>
  36:	88 e1       	ldi	r24, 0x18	; 24
  38:	0e 94 00 00 	call	0	; 0x0 <HLCD_shiftDisplay>
		MDIO_SetPinOutput(HLCD_E, HIGH); 		// Set E to 1 (Read Data)
  3c:	80 e8       	ldi	r24, 0x80	; 128
  3e:	0e 94 00 00 	call	0	; 0x0 <HLCD_shiftDisplay>
  42:	00 c0       	rjmp	.+0      	; 0x44 <HLCD_shiftDisplay+0x44>
  44:	89 81       	ldd	r24, Y+1	; 0x01
  46:	82 30       	cpi	r24, 0x02	; 2
  48:	01 f4       	brne	.+0      	; 0x4a <HLCD_shiftDisplay+0x4a>
  4a:	8c e1       	ldi	r24, 0x1C	; 28
  4c:	0e 94 00 00 	call	0	; 0x0 <HLCD_shiftDisplay>
  50:	80 ec       	ldi	r24, 0xC0	; 192
  52:	0e 94 00 00 	call	0	; 0x0 <HLCD_shiftDisplay>
  56:	0f 90       	pop	r0
  58:	cf 91       	pop	r28
  5a:	df 91       	pop	r29
  5c:	08 95       	ret

Disassembly of section .text.HLCD_shiftCursor:

00000000 <HLCD_shiftCursor>:
	_delay_ms(2);							// delay 2ms
	MDIO_SetPinOutput(HLCD_E, LOW);			// Set E to 0 (falling edge: Write Data)
	return;
}// end HLCD_writeCMD

void HLCD_writeData(uint8 data) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <HLCD_shiftCursor+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <HLCD_shiftCursor+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <HLCD_shiftCursor+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8d 83       	std	Y+5, r24	; 0x05
  10:	6e 83       	std	Y+6, r22	; 0x06
  12:	80 91 00 00 	lds	r24, 0x0000
	MDIO_SetPinOutput(HLCD_RS, HIGH);		// set RS to 1 (Data Reg)
  16:	81 30       	cpi	r24, 0x01	; 1
  18:	01 f4       	brne	.+0      	; 0x1a <HLCD_shiftCursor+0x1a>
  1a:	8d 81       	ldd	r24, Y+5	; 0x05
  1c:	81 30       	cpi	r24, 0x01	; 1
  1e:	01 f4       	brne	.+0      	; 0x20 <HLCD_shiftCursor+0x20>
	MDIO_SetPinOutput(HLCD_RW, LOW); 		// Set RW to 0
  20:	1c 82       	std	Y+4, r1	; 0x04
  22:	00 c0       	rjmp	.+0      	; 0x24 <HLCD_shiftCursor+0x24>
  24:	80 e1       	ldi	r24, 0x10	; 16
  26:	0e 94 00 00 	call	0	; 0x0 <HLCD_shiftCursor>

	if (mode == HLCD_8_BIT) {
  2a:	8c 81       	ldd	r24, Y+4	; 0x04
  2c:	8f 5f       	subi	r24, 0xFF	; 255
  2e:	8c 83       	std	Y+4, r24	; 0x04
  30:	9c 81       	ldd	r25, Y+4	; 0x04
  32:	8e 81       	ldd	r24, Y+6	; 0x06
		MDIO_SetPortValue(HLCD_PORT, data);	// Write the data to D0-D7
  34:	98 17       	cp	r25, r24
  36:	00 f0       	brcs	.+0      	; 0x38 <HLCD_shiftCursor+0x38>
  38:	00 c0       	rjmp	.+0      	; 0x3a <HLCD_shiftCursor+0x3a>
  3a:	8d 81       	ldd	r24, Y+5	; 0x05
		MDIO_SetPinOutput(HLCD_E, HIGH); 		// Set E to 1 (Read Data)
  3c:	82 30       	cpi	r24, 0x02	; 2
  3e:	01 f4       	brne	.+0      	; 0x40 <HLCD_shiftCursor+0x40>
  40:	1b 82       	std	Y+3, r1	; 0x03
  42:	00 c0       	rjmp	.+0      	; 0x44 <HLCD_shiftCursor+0x44>
  44:	84 e1       	ldi	r24, 0x14	; 20
  46:	0e 94 00 00 	call	0	; 0x0 <HLCD_shiftCursor>
  4a:	8b 81       	ldd	r24, Y+3	; 0x03
  4c:	8f 5f       	subi	r24, 0xFF	; 255
  4e:	8b 83       	std	Y+3, r24	; 0x03
  50:	9b 81       	ldd	r25, Y+3	; 0x03
  52:	8e 81       	ldd	r24, Y+6	; 0x06
  54:	98 17       	cp	r25, r24
  56:	00 f0       	brcs	.+0      	; 0x58 <HLCD_shiftCursor+0x58>
  58:	00 c0       	rjmp	.+0      	; 0x5a <HLCD_shiftCursor+0x5a>
  5a:	8d 81       	ldd	r24, Y+5	; 0x05
  5c:	81 30       	cpi	r24, 0x01	; 1
  5e:	01 f4       	brne	.+0      	; 0x60 <HLCD_shiftCursor+0x60>
  60:	1a 82       	std	Y+2, r1	; 0x02
  62:	00 c0       	rjmp	.+0      	; 0x64 <HLCD_shiftCursor+0x64>
  64:	80 e1       	ldi	r24, 0x10	; 16
  66:	0e 94 00 00 	call	0	; 0x0 <HLCD_shiftCursor>
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	0e 94 00 00 	call	0	; 0x0 <HLCD_shiftCursor>
  70:	8a 81       	ldd	r24, Y+2	; 0x02
  72:	8f 5f       	subi	r24, 0xFF	; 255
  74:	8a 83       	std	Y+2, r24	; 0x02
	if (__tmp < 1.0)
  76:	9a 81       	ldd	r25, Y+2	; 0x02
  78:	8e 81       	ldd	r24, Y+6	; 0x06
  7a:	98 17       	cp	r25, r24
  7c:	00 f0       	brcs	.+0      	; 0x7e <HLCD_shiftCursor+0x7e>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <HLCD_shiftCursor+0x80>
  80:	8d 81       	ldd	r24, Y+5	; 0x05
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	01 f4       	brne	.+0      	; 0x86 <HLCD_shiftCursor+0x86>
  86:	19 82       	std	Y+1, r1	; 0x01
  88:	00 c0       	rjmp	.+0      	; 0x8a <HLCD_shiftCursor+0x8a>
  8a:	84 e1       	ldi	r24, 0x14	; 20
  8c:	0e 94 00 00 	call	0	; 0x0 <HLCD_shiftCursor>
		__ticks = 1;
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	0e 94 00 00 	call	0	; 0x0 <HLCD_shiftCursor>
  96:	89 81       	ldd	r24, Y+1	; 0x01
	else if (__tmp > 65535)
  98:	8f 5f       	subi	r24, 0xFF	; 255
  9a:	89 83       	std	Y+1, r24	; 0x01
  9c:	99 81       	ldd	r25, Y+1	; 0x01
  9e:	8e 81       	ldd	r24, Y+6	; 0x06
  a0:	98 17       	cp	r25, r24
  a2:	00 f0       	brcs	.+0      	; 0xa4 <HLCD_shiftCursor+0xa4>
  a4:	26 96       	adiw	r28, 0x06	; 6
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  b0:	cf 91       	pop	r28
  b2:	df 91       	pop	r29
  b4:	08 95       	ret

Disassembly of section .text.HLCD_init:

00000000 <HLCD_init>:
	_delay_ms(2);							// delay 2ms
	MDIO_SetPinOutput(HLCD_E, LOW);			// Set E to 0 (falling edge: Write Data)
	return;
}// end HLCD_writeCMD

void HLCD_writeData(uint8 data) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	df 93       	push	r29
   6:	cf 93       	push	r28
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	c3 56       	subi	r28, 0x63	; 99
   e:	d0 40       	sbci	r29, 0x00	; 0
  10:	0f b6       	in	r0, 0x3f	; 63
  12:	f8 94       	cli
  14:	de bf       	out	0x3e, r29	; 62
	MDIO_SetPinOutput(HLCD_RS, HIGH);		// set RS to 1 (Data Reg)
  16:	0f be       	out	0x3f, r0	; 63
  18:	cd bf       	out	0x3d, r28	; 61
  1a:	fe 01       	movw	r30, r28
  1c:	ed 59       	subi	r30, 0x9D	; 157
  1e:	ff 4f       	sbci	r31, 0xFF	; 255
	MDIO_SetPinOutput(HLCD_RW, LOW); 		// Set RW to 0
  20:	80 83       	st	Z, r24
  22:	fe 01       	movw	r30, r28
  24:	ed 59       	subi	r30, 0x9D	; 157
  26:	ff 4f       	sbci	r31, 0xFF	; 255
  28:	80 81       	ld	r24, Z

	if (mode == HLCD_8_BIT) {
  2a:	80 93 00 00 	sts	0x0000, r24
  2e:	80 91 00 00 	lds	r24, 0x0000
  32:	81 30       	cpi	r24, 0x01	; 1
		MDIO_SetPortValue(HLCD_PORT, data);	// Write the data to D0-D7
  34:	01 f4       	brne	.+0      	; 0x36 <HLCD_init+0x36>
  36:	81 e0       	ldi	r24, 0x01	; 1
  38:	60 e0       	ldi	r22, 0x00	; 0
  3a:	41 e0       	ldi	r20, 0x01	; 1
		MDIO_SetPinOutput(HLCD_E, HIGH); 		// Set E to 1 (Read Data)
  3c:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
  40:	81 e0       	ldi	r24, 0x01	; 1
  42:	61 e0       	ldi	r22, 0x01	; 1
  44:	41 e0       	ldi	r20, 0x01	; 1
  46:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
  4a:	81 e0       	ldi	r24, 0x01	; 1
  4c:	62 e0       	ldi	r22, 0x02	; 2
  4e:	41 e0       	ldi	r20, 0x01	; 1
  50:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
  54:	81 e0       	ldi	r24, 0x01	; 1
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  56:	63 e0       	ldi	r22, 0x03	; 3
  58:	41 e0       	ldi	r20, 0x01	; 1
  5a:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	64 e0       	ldi	r22, 0x04	; 4
  62:	41 e0       	ldi	r20, 0x01	; 1
  64:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
  68:	81 e0       	ldi	r24, 0x01	; 1
  6a:	65 e0       	ldi	r22, 0x05	; 5
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	66 e0       	ldi	r22, 0x06	; 6
	if (__tmp < 1.0)
  76:	41 e0       	ldi	r20, 0x01	; 1
  78:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	67 e0       	ldi	r22, 0x07	; 7
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
  86:	84 e0       	ldi	r24, 0x04	; 4
  88:	61 e0       	ldi	r22, 0x01	; 1
  8a:	41 e0       	ldi	r20, 0x01	; 1
  8c:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
		__ticks = 1;
  90:	84 e0       	ldi	r24, 0x04	; 4
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	41 e0       	ldi	r20, 0x01	; 1
  96:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
	else if (__tmp > 65535)
  9a:	84 e0       	ldi	r24, 0x04	; 4
  9c:	62 e0       	ldi	r22, 0x02	; 2
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
  a4:	84 e0       	ldi	r24, 0x04	; 4
  a6:	62 e0       	ldi	r22, 0x02	; 2
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
  ae:	fe 01       	movw	r30, r28
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  b0:	e1 5a       	subi	r30, 0xA1	; 161
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	a8 e4       	ldi	r26, 0x48	; 72
  ba:	b2 e4       	ldi	r27, 0x42	; 66
  bc:	80 83       	st	Z, r24
  be:	91 83       	std	Z+1, r25	; 0x01
  c0:	a2 83       	std	Z+2, r26	; 0x02
  c2:	b3 83       	std	Z+3, r27	; 0x03
  c4:	8e 01       	movw	r16, r28
  c6:	05 5a       	subi	r16, 0xA5	; 165
  c8:	1f 4f       	sbci	r17, 0xFF	; 255
  ca:	fe 01       	movw	r30, r28
  cc:	e1 5a       	subi	r30, 0xA1	; 161
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	60 81       	ld	r22, Z
  d2:	71 81       	ldd	r23, Z+1	; 0x01
  d4:	82 81       	ldd	r24, Z+2	; 0x02
  d6:	93 81       	ldd	r25, Z+3	; 0x03
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	4a ef       	ldi	r20, 0xFA	; 250
  de:	54 e4       	ldi	r21, 0x44	; 68
  e0:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e4:	dc 01       	movw	r26, r24
  e6:	cb 01       	movw	r24, r22
  e8:	f8 01       	movw	r30, r16
  ea:	80 83       	st	Z, r24
  ec:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ee:	a2 83       	std	Z+2, r26	; 0x02
  f0:	b3 83       	std	Z+3, r27	; 0x03
  f2:	fe 01       	movw	r30, r28
  f4:	e5 5a       	subi	r30, 0xA5	; 165
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f8:	60 81       	ld	r22, Z
  fa:	71 81       	ldd	r23, Z+1	; 0x01
  fc:	82 81       	ldd	r24, Z+2	; 0x02
  fe:	93 81       	ldd	r25, Z+3	; 0x03
 100:	20 e0       	ldi	r18, 0x00	; 0
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	40 e8       	ldi	r20, 0x80	; 128
 106:	5f e3       	ldi	r21, 0x3F	; 63
 108:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 10c:	88 23       	and	r24, r24
 10e:	04 f4       	brge	.+0      	; 0x110 <HLCD_init+0x110>
 110:	fe 01       	movw	r30, r28
 112:	e7 5a       	subi	r30, 0xA7	; 167
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	91 83       	std	Z+1, r25	; 0x01
 11c:	80 83       	st	Z, r24
 11e:	00 c0       	rjmp	.+0      	; 0x120 <HLCD_init+0x120>
 120:	fe 01       	movw	r30, r28
 122:	e5 5a       	subi	r30, 0xA5	; 165
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	60 81       	ld	r22, Z
 128:	71 81       	ldd	r23, Z+1	; 0x01
		_delay_ms(2);							// delay 2ms
		MDIO_SetPinOutput(HLCD_E, LOW); 		// Set E to 0 (falling edge: Write Data)
 12a:	82 81       	ldd	r24, Z+2	; 0x02
 12c:	93 81       	ldd	r25, Z+3	; 0x03
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	3f ef       	ldi	r19, 0xFF	; 255
 132:	4f e7       	ldi	r20, 0x7F	; 127
 134:	57 e4       	ldi	r21, 0x47	; 71

	}else{
		MDIO_SetPortValue(HLCD_PORT, data & 0xF0);	// Write the Hdata to D4-D7
 136:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 13a:	18 16       	cp	r1, r24
 13c:	04 f0       	brlt	.+0      	; 0x13e <HLCD_init+0x13e>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <HLCD_init+0x140>
 140:	fe 01       	movw	r30, r28
 142:	e1 5a       	subi	r30, 0xA1	; 161
		MDIO_SetPinOutput(HLCD_E, HIGH); 		// Set E to 1 (Read Data)
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	60 81       	ld	r22, Z
 148:	71 81       	ldd	r23, Z+1	; 0x01
 14a:	82 81       	ldd	r24, Z+2	; 0x02
 14c:	93 81       	ldd	r25, Z+3	; 0x03
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	40 e2       	ldi	r20, 0x20	; 32
 154:	51 e4       	ldi	r21, 0x41	; 65
 156:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 15a:	dc 01       	movw	r26, r24
 15c:	cb 01       	movw	r24, r22
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 15e:	8e 01       	movw	r16, r28
 160:	07 5a       	subi	r16, 0xA7	; 167
 162:	1f 4f       	sbci	r17, 0xFF	; 255
 164:	bc 01       	movw	r22, r24
 166:	cd 01       	movw	r24, r26
 168:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 16c:	dc 01       	movw	r26, r24
 16e:	cb 01       	movw	r24, r22
 170:	f8 01       	movw	r30, r16
 172:	91 83       	std	Z+1, r25	; 0x01
 174:	80 83       	st	Z, r24
 176:	00 c0       	rjmp	.+0      	; 0x178 <HLCD_init+0x178>
 178:	fe 01       	movw	r30, r28
 17a:	e9 5a       	subi	r30, 0xA9	; 169
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
	if (__tmp < 1.0)
 17e:	88 ec       	ldi	r24, 0xC8	; 200
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	91 83       	std	Z+1, r25	; 0x01
 184:	80 83       	st	Z, r24
 186:	fe 01       	movw	r30, r28
 188:	e9 5a       	subi	r30, 0xA9	; 169
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	80 81       	ld	r24, Z
 18e:	91 81       	ldd	r25, Z+1	; 0x01
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	01 f4       	brne	.+0      	; 0x194 <HLCD_init+0x194>
 194:	fe 01       	movw	r30, r28
		__ticks = 1;
 196:	e9 5a       	subi	r30, 0xA9	; 169
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	91 83       	std	Z+1, r25	; 0x01
 19c:	80 83       	st	Z, r24
 19e:	de 01       	movw	r26, r28
	else if (__tmp > 65535)
 1a0:	a7 5a       	subi	r26, 0xA7	; 167
 1a2:	bf 4f       	sbci	r27, 0xFF	; 255
 1a4:	fe 01       	movw	r30, r28
 1a6:	e7 5a       	subi	r30, 0xA7	; 167
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	80 81       	ld	r24, Z
 1ac:	91 81       	ldd	r25, Z+1	; 0x01
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	11 96       	adiw	r26, 0x01	; 1
 1b2:	9c 93       	st	X, r25
 1b4:	8e 93       	st	-X, r24
 1b6:	fe 01       	movw	r30, r28
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1b8:	e7 5a       	subi	r30, 0xA7	; 167
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	80 81       	ld	r24, Z
 1be:	91 81       	ldd	r25, Z+1	; 0x01
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	01 f4       	brne	.+0      	; 0x1c4 <HLCD_init+0x1c4>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <HLCD_init+0x1c6>
 1c6:	8e 01       	movw	r16, r28
 1c8:	07 5a       	subi	r16, 0xA7	; 167
 1ca:	1f 4f       	sbci	r17, 0xFF	; 255
 1cc:	fe 01       	movw	r30, r28
 1ce:	e5 5a       	subi	r30, 0xA5	; 165
 1d0:	ff 4f       	sbci	r31, 0xFF	; 255
 1d2:	60 81       	ld	r22, Z
 1d4:	71 81       	ldd	r23, Z+1	; 0x01
 1d6:	82 81       	ldd	r24, Z+2	; 0x02
 1d8:	93 81       	ldd	r25, Z+3	; 0x03
 1da:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 1de:	dc 01       	movw	r26, r24
 1e0:	cb 01       	movw	r24, r22
 1e2:	f8 01       	movw	r30, r16
 1e4:	91 83       	std	Z+1, r25	; 0x01
 1e6:	80 83       	st	Z, r24
 1e8:	de 01       	movw	r26, r28
 1ea:	ab 5a       	subi	r26, 0xAB	; 171
 1ec:	bf 4f       	sbci	r27, 0xFF	; 255
 1ee:	fe 01       	movw	r30, r28
 1f0:	e7 5a       	subi	r30, 0xA7	; 167
 1f2:	ff 4f       	sbci	r31, 0xFF	; 255
 1f4:	80 81       	ld	r24, Z
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f6:	91 81       	ldd	r25, Z+1	; 0x01
 1f8:	11 96       	adiw	r26, 0x01	; 1
 1fa:	9c 93       	st	X, r25
 1fc:	8e 93       	st	-X, r24
 1fe:	fe 01       	movw	r30, r28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 200:	eb 5a       	subi	r30, 0xAB	; 171
 202:	ff 4f       	sbci	r31, 0xFF	; 255
 204:	80 81       	ld	r24, Z
 206:	91 81       	ldd	r25, Z+1	; 0x01
 208:	01 97       	sbiw	r24, 0x01	; 1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 20a:	01 f4       	brne	.+0      	; 0x20c <HLCD_init+0x20c>
 20c:	fe 01       	movw	r30, r28
 20e:	eb 5a       	subi	r30, 0xAB	; 171
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	91 83       	std	Z+1, r25	; 0x01
 214:	80 83       	st	Z, r24
 216:	80 91 00 00 	lds	r24, 0x0000
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	01 f0       	breq	.+0      	; 0x21e <HLCD_init+0x21e>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <HLCD_init+0x220>
 220:	8c e3       	ldi	r24, 0x3C	; 60
 222:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 226:	fe 01       	movw	r30, r28
 228:	ef 5a       	subi	r30, 0xAF	; 175
 22a:	ff 4f       	sbci	r31, 0xFF	; 255
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	a0 e8       	ldi	r26, 0x80	; 128
		_delay_ms(2);							// delay 2ms
		MDIO_SetPinOutput(HLCD_E, LOW); 		// Set E to 0 (falling edge: Write Data)
 232:	bf e3       	ldi	r27, 0x3F	; 63
 234:	80 83       	st	Z, r24
 236:	91 83       	std	Z+1, r25	; 0x01
 238:	a2 83       	std	Z+2, r26	; 0x02
 23a:	b3 83       	std	Z+3, r27	; 0x03

		MDIO_SetPortValue(HLCD_PORT, (data << 4) & 0xF0);	// Write the Ldata to D4-D7
 23c:	8e 01       	movw	r16, r28
 23e:	03 5b       	subi	r16, 0xB3	; 179
 240:	1f 4f       	sbci	r17, 0xFF	; 255
 242:	fe 01       	movw	r30, r28
 244:	ef 5a       	subi	r30, 0xAF	; 175
 246:	ff 4f       	sbci	r31, 0xFF	; 255
 248:	60 81       	ld	r22, Z
 24a:	71 81       	ldd	r23, Z+1	; 0x01
 24c:	82 81       	ldd	r24, Z+2	; 0x02
 24e:	93 81       	ldd	r25, Z+3	; 0x03
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	4a ef       	ldi	r20, 0xFA	; 250
 256:	54 e4       	ldi	r21, 0x44	; 68
		MDIO_SetPinOutput(HLCD_E, HIGH); 		// Set E to 1 (Read Data)
 258:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 25c:	dc 01       	movw	r26, r24
 25e:	cb 01       	movw	r24, r22
 260:	f8 01       	movw	r30, r16
 262:	80 83       	st	Z, r24
 264:	91 83       	std	Z+1, r25	; 0x01
 266:	a2 83       	std	Z+2, r26	; 0x02
 268:	b3 83       	std	Z+3, r27	; 0x03
 26a:	fe 01       	movw	r30, r28
 26c:	e3 5b       	subi	r30, 0xB3	; 179
 26e:	ff 4f       	sbci	r31, 0xFF	; 255
 270:	60 81       	ld	r22, Z
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 272:	71 81       	ldd	r23, Z+1	; 0x01
 274:	82 81       	ldd	r24, Z+2	; 0x02
 276:	93 81       	ldd	r25, Z+3	; 0x03
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	40 e8       	ldi	r20, 0x80	; 128
 27e:	5f e3       	ldi	r21, 0x3F	; 63
 280:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 284:	88 23       	and	r24, r24
 286:	04 f4       	brge	.+0      	; 0x288 <HLCD_init+0x288>
 288:	fe 01       	movw	r30, r28
 28a:	e5 5b       	subi	r30, 0xB5	; 181
 28c:	ff 4f       	sbci	r31, 0xFF	; 255
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
	if (__tmp < 1.0)
 292:	91 83       	std	Z+1, r25	; 0x01
 294:	80 83       	st	Z, r24
 296:	00 c0       	rjmp	.+0      	; 0x298 <HLCD_init+0x298>
 298:	fe 01       	movw	r30, r28
 29a:	e3 5b       	subi	r30, 0xB3	; 179
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	60 81       	ld	r22, Z
 2a0:	71 81       	ldd	r23, Z+1	; 0x01
 2a2:	82 81       	ldd	r24, Z+2	; 0x02
 2a4:	93 81       	ldd	r25, Z+3	; 0x03
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	3f ef       	ldi	r19, 0xFF	; 255
		__ticks = 1;
 2aa:	4f e7       	ldi	r20, 0x7F	; 127
 2ac:	57 e4       	ldi	r21, 0x47	; 71
 2ae:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 2b2:	18 16       	cp	r1, r24
	else if (__tmp > 65535)
 2b4:	04 f0       	brlt	.+0      	; 0x2b6 <HLCD_init+0x2b6>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <HLCD_init+0x2b8>
 2b8:	fe 01       	movw	r30, r28
 2ba:	ef 5a       	subi	r30, 0xAF	; 175
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	60 81       	ld	r22, Z
 2c0:	71 81       	ldd	r23, Z+1	; 0x01
 2c2:	82 81       	ldd	r24, Z+2	; 0x02
 2c4:	93 81       	ldd	r25, Z+3	; 0x03
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2cc:	51 e4       	ldi	r21, 0x41	; 65
 2ce:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 2d2:	dc 01       	movw	r26, r24
 2d4:	cb 01       	movw	r24, r22
 2d6:	8e 01       	movw	r16, r28
 2d8:	05 5b       	subi	r16, 0xB5	; 181
 2da:	1f 4f       	sbci	r17, 0xFF	; 255
 2dc:	bc 01       	movw	r22, r24
 2de:	cd 01       	movw	r24, r26
 2e0:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 2e4:	dc 01       	movw	r26, r24
 2e6:	cb 01       	movw	r24, r22
 2e8:	f8 01       	movw	r30, r16
 2ea:	91 83       	std	Z+1, r25	; 0x01
 2ec:	80 83       	st	Z, r24
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <HLCD_init+0x2f0>
 2f0:	fe 01       	movw	r30, r28
 2f2:	e7 5b       	subi	r30, 0xB7	; 183
 2f4:	ff 4f       	sbci	r31, 0xFF	; 255
 2f6:	88 ec       	ldi	r24, 0xC8	; 200
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	91 83       	std	Z+1, r25	; 0x01
 2fc:	80 83       	st	Z, r24
 2fe:	fe 01       	movw	r30, r28
 300:	e7 5b       	subi	r30, 0xB7	; 183
 302:	ff 4f       	sbci	r31, 0xFF	; 255
 304:	80 81       	ld	r24, Z
 306:	91 81       	ldd	r25, Z+1	; 0x01
 308:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 30a:	01 f4       	brne	.+0      	; 0x30c <HLCD_init+0x30c>
 30c:	fe 01       	movw	r30, r28
 30e:	e7 5b       	subi	r30, 0xB7	; 183
 310:	ff 4f       	sbci	r31, 0xFF	; 255
 312:	91 83       	std	Z+1, r25	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 314:	80 83       	st	Z, r24
 316:	de 01       	movw	r26, r28
 318:	a5 5b       	subi	r26, 0xB5	; 181
 31a:	bf 4f       	sbci	r27, 0xFF	; 255
 31c:	fe 01       	movw	r30, r28
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 31e:	e5 5b       	subi	r30, 0xB5	; 181
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	80 81       	ld	r24, Z
 324:	91 81       	ldd	r25, Z+1	; 0x01
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	11 96       	adiw	r26, 0x01	; 1
 32a:	9c 93       	st	X, r25
 32c:	8e 93       	st	-X, r24
 32e:	fe 01       	movw	r30, r28
 330:	e5 5b       	subi	r30, 0xB5	; 181
 332:	ff 4f       	sbci	r31, 0xFF	; 255
 334:	80 81       	ld	r24, Z
 336:	91 81       	ldd	r25, Z+1	; 0x01
 338:	00 97       	sbiw	r24, 0x00	; 0
 33a:	01 f4       	brne	.+0      	; 0x33c <HLCD_init+0x33c>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <HLCD_init+0x33e>
 33e:	8e 01       	movw	r16, r28
 340:	05 5b       	subi	r16, 0xB5	; 181
 342:	1f 4f       	sbci	r17, 0xFF	; 255
 344:	fe 01       	movw	r30, r28
		_delay_ms(2);							// delay 2ms
		MDIO_SetPinOutput(HLCD_E, LOW); 		// Set E to 0 (falling edge: Write Data)
 346:	e3 5b       	subi	r30, 0xB3	; 179
 348:	ff 4f       	sbci	r31, 0xFF	; 255
 34a:	60 81       	ld	r22, Z
 34c:	71 81       	ldd	r23, Z+1	; 0x01
 34e:	82 81       	ldd	r24, Z+2	; 0x02
	}
	return;
} // end HLCD_writeData
 350:	93 81       	ldd	r25, Z+3	; 0x03
 352:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 356:	dc 01       	movw	r26, r24
 358:	cb 01       	movw	r24, r22
 35a:	f8 01       	movw	r30, r16
 35c:	91 83       	std	Z+1, r25	; 0x01
 35e:	80 83       	st	Z, r24
 360:	de 01       	movw	r26, r28
 362:	a9 5b       	subi	r26, 0xB9	; 185
 364:	bf 4f       	sbci	r27, 0xFF	; 255
 366:	fe 01       	movw	r30, r28
 368:	e5 5b       	subi	r30, 0xB5	; 181
 36a:	ff 4f       	sbci	r31, 0xFF	; 255
 36c:	80 81       	ld	r24, Z
 36e:	91 81       	ldd	r25, Z+1	; 0x01
 370:	8d 93       	st	X+, r24
 372:	9c 93       	st	X, r25
 374:	fe 01       	movw	r30, r28
 376:	e9 5b       	subi	r30, 0xB9	; 185
 378:	ff 4f       	sbci	r31, 0xFF	; 255
 37a:	80 81       	ld	r24, Z
 37c:	91 81       	ldd	r25, Z+1	; 0x01
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	01 f4       	brne	.+0      	; 0x382 <HLCD_init+0x382>
 382:	fe 01       	movw	r30, r28
 384:	e9 5b       	subi	r30, 0xB9	; 185
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	91 83       	std	Z+1, r25	; 0x01
 38a:	80 83       	st	Z, r24
 38c:	8f e0       	ldi	r24, 0x0F	; 15
 38e:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 392:	fe 01       	movw	r30, r28
 394:	ed 5b       	subi	r30, 0xBD	; 189
 396:	ff 4f       	sbci	r31, 0xFF	; 255
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	a0 e8       	ldi	r26, 0x80	; 128
 39e:	bf e3       	ldi	r27, 0x3F	; 63
 3a0:	80 83       	st	Z, r24
 3a2:	91 83       	std	Z+1, r25	; 0x01
 3a4:	a2 83       	std	Z+2, r26	; 0x02
 3a6:	b3 83       	std	Z+3, r27	; 0x03
 3a8:	8e 01       	movw	r16, r28
 3aa:	01 5c       	subi	r16, 0xC1	; 193
 3ac:	1f 4f       	sbci	r17, 0xFF	; 255
 3ae:	fe 01       	movw	r30, r28
 3b0:	ed 5b       	subi	r30, 0xBD	; 189
 3b2:	ff 4f       	sbci	r31, 0xFF	; 255
 3b4:	60 81       	ld	r22, Z
 3b6:	71 81       	ldd	r23, Z+1	; 0x01
 3b8:	82 81       	ldd	r24, Z+2	; 0x02
 3ba:	93 81       	ldd	r25, Z+3	; 0x03
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	4a ef       	ldi	r20, 0xFA	; 250
 3c2:	54 e4       	ldi	r21, 0x44	; 68
 3c4:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 3c8:	dc 01       	movw	r26, r24
 3ca:	cb 01       	movw	r24, r22
 3cc:	f8 01       	movw	r30, r16
 3ce:	80 83       	st	Z, r24
 3d0:	91 83       	std	Z+1, r25	; 0x01
 3d2:	a2 83       	std	Z+2, r26	; 0x02
 3d4:	b3 83       	std	Z+3, r27	; 0x03
 3d6:	fe 01       	movw	r30, r28
 3d8:	ff 96       	adiw	r30, 0x3f	; 63
 3da:	60 81       	ld	r22, Z
 3dc:	71 81       	ldd	r23, Z+1	; 0x01
 3de:	82 81       	ldd	r24, Z+2	; 0x02
 3e0:	93 81       	ldd	r25, Z+3	; 0x03
 3e2:	20 e0       	ldi	r18, 0x00	; 0
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	40 e8       	ldi	r20, 0x80	; 128
 3e8:	5f e3       	ldi	r21, 0x3F	; 63
 3ea:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 3ee:	88 23       	and	r24, r24
 3f0:	04 f4       	brge	.+0      	; 0x3f2 <HLCD_init+0x3f2>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	9e af       	std	Y+62, r25	; 0x3e
 3f8:	8d af       	std	Y+61, r24	; 0x3d
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <HLCD_init+0x3fc>
 3fc:	fe 01       	movw	r30, r28
 3fe:	ff 96       	adiw	r30, 0x3f	; 63
 400:	60 81       	ld	r22, Z
 402:	71 81       	ldd	r23, Z+1	; 0x01
 404:	82 81       	ldd	r24, Z+2	; 0x02
 406:	93 81       	ldd	r25, Z+3	; 0x03
 408:	20 e0       	ldi	r18, 0x00	; 0
 40a:	3f ef       	ldi	r19, 0xFF	; 255
 40c:	4f e7       	ldi	r20, 0x7F	; 127
 40e:	57 e4       	ldi	r21, 0x47	; 71
 410:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 414:	18 16       	cp	r1, r24
 416:	04 f4       	brge	.+0      	; 0x418 <HLCD_init+0x418>
 418:	fe 01       	movw	r30, r28
 41a:	ed 5b       	subi	r30, 0xBD	; 189
 41c:	ff 4f       	sbci	r31, 0xFF	; 255
 41e:	60 81       	ld	r22, Z
 420:	71 81       	ldd	r23, Z+1	; 0x01
 422:	82 81       	ldd	r24, Z+2	; 0x02
 424:	93 81       	ldd	r25, Z+3	; 0x03
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	40 e2       	ldi	r20, 0x20	; 32
 42c:	51 e4       	ldi	r21, 0x41	; 65
 42e:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 432:	dc 01       	movw	r26, r24
 434:	cb 01       	movw	r24, r22
 436:	bc 01       	movw	r22, r24
 438:	cd 01       	movw	r24, r26
 43a:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 43e:	dc 01       	movw	r26, r24
 440:	cb 01       	movw	r24, r22
 442:	9e af       	std	Y+62, r25	; 0x3e
 444:	8d af       	std	Y+61, r24	; 0x3d
 446:	00 c0       	rjmp	.+0      	; 0x448 <HLCD_init+0x448>
 448:	88 ec       	ldi	r24, 0xC8	; 200
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	9c af       	std	Y+60, r25	; 0x3c
 44e:	8b af       	std	Y+59, r24	; 0x3b
 450:	8b ad       	ldd	r24, Y+59	; 0x3b
 452:	9c ad       	ldd	r25, Y+60	; 0x3c
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	01 f4       	brne	.+0      	; 0x458 <HLCD_init+0x458>
 458:	9c af       	std	Y+60, r25	; 0x3c
 45a:	8b af       	std	Y+59, r24	; 0x3b
 45c:	8d ad       	ldd	r24, Y+61	; 0x3d
 45e:	9e ad       	ldd	r25, Y+62	; 0x3e
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	9e af       	std	Y+62, r25	; 0x3e
 464:	8d af       	std	Y+61, r24	; 0x3d
 466:	8d ad       	ldd	r24, Y+61	; 0x3d
 468:	9e ad       	ldd	r25, Y+62	; 0x3e
 46a:	00 97       	sbiw	r24, 0x00	; 0
 46c:	01 f4       	brne	.+0      	; 0x46e <HLCD_init+0x46e>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <HLCD_init+0x470>
 470:	fe 01       	movw	r30, r28
 472:	ff 96       	adiw	r30, 0x3f	; 63
 474:	60 81       	ld	r22, Z
 476:	71 81       	ldd	r23, Z+1	; 0x01
 478:	82 81       	ldd	r24, Z+2	; 0x02
 47a:	93 81       	ldd	r25, Z+3	; 0x03
 47c:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 480:	dc 01       	movw	r26, r24
 482:	cb 01       	movw	r24, r22
 484:	9e af       	std	Y+62, r25	; 0x3e
 486:	8d af       	std	Y+61, r24	; 0x3d
 488:	8d ad       	ldd	r24, Y+61	; 0x3d
 48a:	9e ad       	ldd	r25, Y+62	; 0x3e
 48c:	9a af       	std	Y+58, r25	; 0x3a
 48e:	89 af       	std	Y+57, r24	; 0x39
 490:	89 ad       	ldd	r24, Y+57	; 0x39
 492:	9a ad       	ldd	r25, Y+58	; 0x3a
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	01 f4       	brne	.+0      	; 0x498 <HLCD_init+0x498>
 498:	9a af       	std	Y+58, r25	; 0x3a
 49a:	89 af       	std	Y+57, r24	; 0x39
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	a0 e0       	ldi	r26, 0x00	; 0
 4a8:	b0 e4       	ldi	r27, 0x40	; 64
 4aa:	8d ab       	std	Y+53, r24	; 0x35
 4ac:	9e ab       	std	Y+54, r25	; 0x36
 4ae:	af ab       	std	Y+55, r26	; 0x37
 4b0:	b8 af       	std	Y+56, r27	; 0x38
 4b2:	6d a9       	ldd	r22, Y+53	; 0x35
 4b4:	7e a9       	ldd	r23, Y+54	; 0x36
 4b6:	8f a9       	ldd	r24, Y+55	; 0x37
 4b8:	98 ad       	ldd	r25, Y+56	; 0x38
 4ba:	20 e0       	ldi	r18, 0x00	; 0
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	4a ef       	ldi	r20, 0xFA	; 250
 4c0:	54 e4       	ldi	r21, 0x44	; 68
 4c2:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 4c6:	dc 01       	movw	r26, r24
 4c8:	cb 01       	movw	r24, r22
 4ca:	89 ab       	std	Y+49, r24	; 0x31
 4cc:	9a ab       	std	Y+50, r25	; 0x32
 4ce:	ab ab       	std	Y+51, r26	; 0x33
 4d0:	bc ab       	std	Y+52, r27	; 0x34
 4d2:	69 a9       	ldd	r22, Y+49	; 0x31
 4d4:	7a a9       	ldd	r23, Y+50	; 0x32
 4d6:	8b a9       	ldd	r24, Y+51	; 0x33
 4d8:	9c a9       	ldd	r25, Y+52	; 0x34
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	40 e8       	ldi	r20, 0x80	; 128
 4e0:	5f e3       	ldi	r21, 0x3F	; 63
 4e2:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 4e6:	88 23       	and	r24, r24
 4e8:	04 f4       	brge	.+0      	; 0x4ea <HLCD_init+0x4ea>
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	98 ab       	std	Y+48, r25	; 0x30
 4f0:	8f a7       	std	Y+47, r24	; 0x2f
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <HLCD_init+0x4f4>
 4f4:	69 a9       	ldd	r22, Y+49	; 0x31
 4f6:	7a a9       	ldd	r23, Y+50	; 0x32
 4f8:	8b a9       	ldd	r24, Y+51	; 0x33
 4fa:	9c a9       	ldd	r25, Y+52	; 0x34
 4fc:	20 e0       	ldi	r18, 0x00	; 0
 4fe:	3f ef       	ldi	r19, 0xFF	; 255
 500:	4f e7       	ldi	r20, 0x7F	; 127
 502:	57 e4       	ldi	r21, 0x47	; 71
 504:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 508:	18 16       	cp	r1, r24
 50a:	04 f4       	brge	.+0      	; 0x50c <HLCD_init+0x50c>
 50c:	6d a9       	ldd	r22, Y+53	; 0x35
 50e:	7e a9       	ldd	r23, Y+54	; 0x36
 510:	8f a9       	ldd	r24, Y+55	; 0x37
 512:	98 ad       	ldd	r25, Y+56	; 0x38
 514:	20 e0       	ldi	r18, 0x00	; 0
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	40 e2       	ldi	r20, 0x20	; 32
 51a:	51 e4       	ldi	r21, 0x41	; 65
 51c:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 520:	dc 01       	movw	r26, r24
 522:	cb 01       	movw	r24, r22
 524:	bc 01       	movw	r22, r24
 526:	cd 01       	movw	r24, r26
 528:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 52c:	dc 01       	movw	r26, r24
 52e:	cb 01       	movw	r24, r22
 530:	98 ab       	std	Y+48, r25	; 0x30
 532:	8f a7       	std	Y+47, r24	; 0x2f
 534:	00 c0       	rjmp	.+0      	; 0x536 <HLCD_init+0x536>
 536:	88 ec       	ldi	r24, 0xC8	; 200
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	9e a7       	std	Y+46, r25	; 0x2e
 53c:	8d a7       	std	Y+45, r24	; 0x2d
 53e:	8d a5       	ldd	r24, Y+45	; 0x2d
 540:	9e a5       	ldd	r25, Y+46	; 0x2e
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	01 f4       	brne	.+0      	; 0x546 <HLCD_init+0x546>
 546:	9e a7       	std	Y+46, r25	; 0x2e
 548:	8d a7       	std	Y+45, r24	; 0x2d
 54a:	8f a5       	ldd	r24, Y+47	; 0x2f
 54c:	98 a9       	ldd	r25, Y+48	; 0x30
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	98 ab       	std	Y+48, r25	; 0x30
 552:	8f a7       	std	Y+47, r24	; 0x2f
 554:	8f a5       	ldd	r24, Y+47	; 0x2f
 556:	98 a9       	ldd	r25, Y+48	; 0x30
 558:	00 97       	sbiw	r24, 0x00	; 0
 55a:	01 f4       	brne	.+0      	; 0x55c <HLCD_init+0x55c>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <HLCD_init+0x55e>
 55e:	69 a9       	ldd	r22, Y+49	; 0x31
 560:	7a a9       	ldd	r23, Y+50	; 0x32
 562:	8b a9       	ldd	r24, Y+51	; 0x33
 564:	9c a9       	ldd	r25, Y+52	; 0x34
 566:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 56a:	dc 01       	movw	r26, r24
 56c:	cb 01       	movw	r24, r22
 56e:	98 ab       	std	Y+48, r25	; 0x30
 570:	8f a7       	std	Y+47, r24	; 0x2f
 572:	8f a5       	ldd	r24, Y+47	; 0x2f
 574:	98 a9       	ldd	r25, Y+48	; 0x30
 576:	9c a7       	std	Y+44, r25	; 0x2c
 578:	8b a7       	std	Y+43, r24	; 0x2b
 57a:	8b a5       	ldd	r24, Y+43	; 0x2b
 57c:	9c a5       	ldd	r25, Y+44	; 0x2c
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	01 f4       	brne	.+0      	; 0x582 <HLCD_init+0x582>
 582:	9c a7       	std	Y+44, r25	; 0x2c
 584:	8b a7       	std	Y+43, r24	; 0x2b
 586:	86 e0       	ldi	r24, 0x06	; 6
 588:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <HLCD_init+0x58e>
 58e:	8c e2       	ldi	r24, 0x2C	; 44
 590:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 594:	8c e2       	ldi	r24, 0x2C	; 44
 596:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 59a:	80 ec       	ldi	r24, 0xC0	; 192
 59c:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	a0 e8       	ldi	r26, 0x80	; 128
 5a6:	bf e3       	ldi	r27, 0x3F	; 63
 5a8:	8f a3       	std	Y+39, r24	; 0x27
 5aa:	98 a7       	std	Y+40, r25	; 0x28
 5ac:	a9 a7       	std	Y+41, r26	; 0x29
 5ae:	ba a7       	std	Y+42, r27	; 0x2a
 5b0:	6f a1       	ldd	r22, Y+39	; 0x27
 5b2:	78 a5       	ldd	r23, Y+40	; 0x28
 5b4:	89 a5       	ldd	r24, Y+41	; 0x29
 5b6:	9a a5       	ldd	r25, Y+42	; 0x2a
 5b8:	20 e0       	ldi	r18, 0x00	; 0
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	4a ef       	ldi	r20, 0xFA	; 250
 5be:	54 e4       	ldi	r21, 0x44	; 68
 5c0:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 5c4:	dc 01       	movw	r26, r24
 5c6:	cb 01       	movw	r24, r22
 5c8:	8b a3       	std	Y+35, r24	; 0x23
 5ca:	9c a3       	std	Y+36, r25	; 0x24
 5cc:	ad a3       	std	Y+37, r26	; 0x25
 5ce:	be a3       	std	Y+38, r27	; 0x26
 5d0:	6b a1       	ldd	r22, Y+35	; 0x23
 5d2:	7c a1       	ldd	r23, Y+36	; 0x24
 5d4:	8d a1       	ldd	r24, Y+37	; 0x25
 5d6:	9e a1       	ldd	r25, Y+38	; 0x26
 5d8:	20 e0       	ldi	r18, 0x00	; 0
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	40 e8       	ldi	r20, 0x80	; 128
 5de:	5f e3       	ldi	r21, 0x3F	; 63
 5e0:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 5e4:	88 23       	and	r24, r24
 5e6:	04 f4       	brge	.+0      	; 0x5e8 <HLCD_init+0x5e8>
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	9a a3       	std	Y+34, r25	; 0x22
 5ee:	89 a3       	std	Y+33, r24	; 0x21
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <HLCD_init+0x5f2>
 5f2:	6b a1       	ldd	r22, Y+35	; 0x23
 5f4:	7c a1       	ldd	r23, Y+36	; 0x24
 5f6:	8d a1       	ldd	r24, Y+37	; 0x25
 5f8:	9e a1       	ldd	r25, Y+38	; 0x26
 5fa:	20 e0       	ldi	r18, 0x00	; 0
 5fc:	3f ef       	ldi	r19, 0xFF	; 255
 5fe:	4f e7       	ldi	r20, 0x7F	; 127
 600:	57 e4       	ldi	r21, 0x47	; 71
 602:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 606:	18 16       	cp	r1, r24
 608:	04 f4       	brge	.+0      	; 0x60a <HLCD_init+0x60a>
 60a:	6f a1       	ldd	r22, Y+39	; 0x27
 60c:	78 a5       	ldd	r23, Y+40	; 0x28
 60e:	89 a5       	ldd	r24, Y+41	; 0x29
 610:	9a a5       	ldd	r25, Y+42	; 0x2a
 612:	20 e0       	ldi	r18, 0x00	; 0
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	40 e2       	ldi	r20, 0x20	; 32
 618:	51 e4       	ldi	r21, 0x41	; 65
 61a:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 61e:	dc 01       	movw	r26, r24
 620:	cb 01       	movw	r24, r22
 622:	bc 01       	movw	r22, r24
 624:	cd 01       	movw	r24, r26
 626:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 62a:	dc 01       	movw	r26, r24
 62c:	cb 01       	movw	r24, r22
 62e:	9a a3       	std	Y+34, r25	; 0x22
 630:	89 a3       	std	Y+33, r24	; 0x21
 632:	00 c0       	rjmp	.+0      	; 0x634 <HLCD_init+0x634>
 634:	88 ec       	ldi	r24, 0xC8	; 200
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	98 a3       	std	Y+32, r25	; 0x20
 63a:	8f 8f       	std	Y+31, r24	; 0x1f
 63c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 63e:	98 a1       	ldd	r25, Y+32	; 0x20
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	01 f4       	brne	.+0      	; 0x644 <HLCD_init+0x644>
 644:	98 a3       	std	Y+32, r25	; 0x20
 646:	8f 8f       	std	Y+31, r24	; 0x1f
 648:	89 a1       	ldd	r24, Y+33	; 0x21
 64a:	9a a1       	ldd	r25, Y+34	; 0x22
 64c:	01 97       	sbiw	r24, 0x01	; 1
 64e:	9a a3       	std	Y+34, r25	; 0x22
 650:	89 a3       	std	Y+33, r24	; 0x21
 652:	89 a1       	ldd	r24, Y+33	; 0x21
 654:	9a a1       	ldd	r25, Y+34	; 0x22
 656:	00 97       	sbiw	r24, 0x00	; 0
 658:	01 f4       	brne	.+0      	; 0x65a <HLCD_init+0x65a>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <HLCD_init+0x65c>
 65c:	6b a1       	ldd	r22, Y+35	; 0x23
 65e:	7c a1       	ldd	r23, Y+36	; 0x24
 660:	8d a1       	ldd	r24, Y+37	; 0x25
 662:	9e a1       	ldd	r25, Y+38	; 0x26
 664:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 668:	dc 01       	movw	r26, r24
 66a:	cb 01       	movw	r24, r22
 66c:	9a a3       	std	Y+34, r25	; 0x22
 66e:	89 a3       	std	Y+33, r24	; 0x21
 670:	89 a1       	ldd	r24, Y+33	; 0x21
 672:	9a a1       	ldd	r25, Y+34	; 0x22
 674:	9e 8f       	std	Y+30, r25	; 0x1e
 676:	8d 8f       	std	Y+29, r24	; 0x1d
 678:	8d 8d       	ldd	r24, Y+29	; 0x1d
 67a:	9e 8d       	ldd	r25, Y+30	; 0x1e
 67c:	01 97       	sbiw	r24, 0x01	; 1
 67e:	01 f4       	brne	.+0      	; 0x680 <HLCD_init+0x680>
 680:	9e 8f       	std	Y+30, r25	; 0x1e
 682:	8d 8f       	std	Y+29, r24	; 0x1d
 684:	8f e0       	ldi	r24, 0x0F	; 15
 686:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 68a:	80 ef       	ldi	r24, 0xF0	; 240
 68c:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	a0 e8       	ldi	r26, 0x80	; 128
 696:	bf e3       	ldi	r27, 0x3F	; 63
 698:	89 8f       	std	Y+25, r24	; 0x19
 69a:	9a 8f       	std	Y+26, r25	; 0x1a
 69c:	ab 8f       	std	Y+27, r26	; 0x1b
 69e:	bc 8f       	std	Y+28, r27	; 0x1c
 6a0:	69 8d       	ldd	r22, Y+25	; 0x19
 6a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
 6a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
 6a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
 6a8:	20 e0       	ldi	r18, 0x00	; 0
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	4a ef       	ldi	r20, 0xFA	; 250
 6ae:	54 e4       	ldi	r21, 0x44	; 68
 6b0:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 6b4:	dc 01       	movw	r26, r24
 6b6:	cb 01       	movw	r24, r22
 6b8:	8d 8b       	std	Y+21, r24	; 0x15
 6ba:	9e 8b       	std	Y+22, r25	; 0x16
 6bc:	af 8b       	std	Y+23, r26	; 0x17
 6be:	b8 8f       	std	Y+24, r27	; 0x18
 6c0:	6d 89       	ldd	r22, Y+21	; 0x15
 6c2:	7e 89       	ldd	r23, Y+22	; 0x16
 6c4:	8f 89       	ldd	r24, Y+23	; 0x17
 6c6:	98 8d       	ldd	r25, Y+24	; 0x18
 6c8:	20 e0       	ldi	r18, 0x00	; 0
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	40 e8       	ldi	r20, 0x80	; 128
 6ce:	5f e3       	ldi	r21, 0x3F	; 63
 6d0:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 6d4:	88 23       	and	r24, r24
 6d6:	04 f4       	brge	.+0      	; 0x6d8 <HLCD_init+0x6d8>
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	9c 8b       	std	Y+20, r25	; 0x14
 6de:	8b 8b       	std	Y+19, r24	; 0x13
 6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <HLCD_init+0x6e2>
 6e2:	6d 89       	ldd	r22, Y+21	; 0x15
 6e4:	7e 89       	ldd	r23, Y+22	; 0x16
 6e6:	8f 89       	ldd	r24, Y+23	; 0x17
 6e8:	98 8d       	ldd	r25, Y+24	; 0x18
 6ea:	20 e0       	ldi	r18, 0x00	; 0
 6ec:	3f ef       	ldi	r19, 0xFF	; 255
 6ee:	4f e7       	ldi	r20, 0x7F	; 127
 6f0:	57 e4       	ldi	r21, 0x47	; 71
 6f2:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 6f6:	18 16       	cp	r1, r24
 6f8:	04 f4       	brge	.+0      	; 0x6fa <HLCD_init+0x6fa>
 6fa:	69 8d       	ldd	r22, Y+25	; 0x19
 6fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
 6fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
 700:	9c 8d       	ldd	r25, Y+28	; 0x1c
 702:	20 e0       	ldi	r18, 0x00	; 0
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	40 e2       	ldi	r20, 0x20	; 32
 708:	51 e4       	ldi	r21, 0x41	; 65
 70a:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 70e:	dc 01       	movw	r26, r24
 710:	cb 01       	movw	r24, r22
 712:	bc 01       	movw	r22, r24
 714:	cd 01       	movw	r24, r26
 716:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 71a:	dc 01       	movw	r26, r24
 71c:	cb 01       	movw	r24, r22
 71e:	9c 8b       	std	Y+20, r25	; 0x14
 720:	8b 8b       	std	Y+19, r24	; 0x13
 722:	00 c0       	rjmp	.+0      	; 0x724 <HLCD_init+0x724>
 724:	88 ec       	ldi	r24, 0xC8	; 200
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	9a 8b       	std	Y+18, r25	; 0x12
 72a:	89 8b       	std	Y+17, r24	; 0x11
 72c:	89 89       	ldd	r24, Y+17	; 0x11
 72e:	9a 89       	ldd	r25, Y+18	; 0x12
 730:	01 97       	sbiw	r24, 0x01	; 1
 732:	01 f4       	brne	.+0      	; 0x734 <HLCD_init+0x734>
 734:	9a 8b       	std	Y+18, r25	; 0x12
 736:	89 8b       	std	Y+17, r24	; 0x11
 738:	8b 89       	ldd	r24, Y+19	; 0x13
 73a:	9c 89       	ldd	r25, Y+20	; 0x14
 73c:	01 97       	sbiw	r24, 0x01	; 1
 73e:	9c 8b       	std	Y+20, r25	; 0x14
 740:	8b 8b       	std	Y+19, r24	; 0x13
 742:	8b 89       	ldd	r24, Y+19	; 0x13
 744:	9c 89       	ldd	r25, Y+20	; 0x14
 746:	00 97       	sbiw	r24, 0x00	; 0
 748:	01 f4       	brne	.+0      	; 0x74a <HLCD_init+0x74a>
 74a:	00 c0       	rjmp	.+0      	; 0x74c <HLCD_init+0x74c>
 74c:	6d 89       	ldd	r22, Y+21	; 0x15
 74e:	7e 89       	ldd	r23, Y+22	; 0x16
 750:	8f 89       	ldd	r24, Y+23	; 0x17
 752:	98 8d       	ldd	r25, Y+24	; 0x18
 754:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 758:	dc 01       	movw	r26, r24
 75a:	cb 01       	movw	r24, r22
 75c:	9c 8b       	std	Y+20, r25	; 0x14
 75e:	8b 8b       	std	Y+19, r24	; 0x13
 760:	8b 89       	ldd	r24, Y+19	; 0x13
 762:	9c 89       	ldd	r25, Y+20	; 0x14
 764:	98 8b       	std	Y+16, r25	; 0x10
 766:	8f 87       	std	Y+15, r24	; 0x0f
 768:	8f 85       	ldd	r24, Y+15	; 0x0f
 76a:	98 89       	ldd	r25, Y+16	; 0x10
 76c:	01 97       	sbiw	r24, 0x01	; 1
 76e:	01 f4       	brne	.+0      	; 0x770 <HLCD_init+0x770>
 770:	98 8b       	std	Y+16, r25	; 0x10
 772:	8f 87       	std	Y+15, r24	; 0x0f
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 77a:	80 e1       	ldi	r24, 0x10	; 16
 77c:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	a0 e0       	ldi	r26, 0x00	; 0
 786:	b0 e4       	ldi	r27, 0x40	; 64
 788:	8b 87       	std	Y+11, r24	; 0x0b
 78a:	9c 87       	std	Y+12, r25	; 0x0c
 78c:	ad 87       	std	Y+13, r26	; 0x0d
 78e:	be 87       	std	Y+14, r27	; 0x0e
 790:	6b 85       	ldd	r22, Y+11	; 0x0b
 792:	7c 85       	ldd	r23, Y+12	; 0x0c
 794:	8d 85       	ldd	r24, Y+13	; 0x0d
 796:	9e 85       	ldd	r25, Y+14	; 0x0e
 798:	20 e0       	ldi	r18, 0x00	; 0
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	4a ef       	ldi	r20, 0xFA	; 250
 79e:	54 e4       	ldi	r21, 0x44	; 68
 7a0:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 7a4:	dc 01       	movw	r26, r24
 7a6:	cb 01       	movw	r24, r22
 7a8:	8f 83       	std	Y+7, r24	; 0x07
 7aa:	98 87       	std	Y+8, r25	; 0x08
 7ac:	a9 87       	std	Y+9, r26	; 0x09
 7ae:	ba 87       	std	Y+10, r27	; 0x0a
 7b0:	6f 81       	ldd	r22, Y+7	; 0x07
 7b2:	78 85       	ldd	r23, Y+8	; 0x08
 7b4:	89 85       	ldd	r24, Y+9	; 0x09
 7b6:	9a 85       	ldd	r25, Y+10	; 0x0a
 7b8:	20 e0       	ldi	r18, 0x00	; 0
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	40 e8       	ldi	r20, 0x80	; 128
 7be:	5f e3       	ldi	r21, 0x3F	; 63
 7c0:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 7c4:	88 23       	and	r24, r24
 7c6:	04 f4       	brge	.+0      	; 0x7c8 <HLCD_init+0x7c8>
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	9e 83       	std	Y+6, r25	; 0x06
 7ce:	8d 83       	std	Y+5, r24	; 0x05
 7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <HLCD_init+0x7d2>
 7d2:	6f 81       	ldd	r22, Y+7	; 0x07
 7d4:	78 85       	ldd	r23, Y+8	; 0x08
 7d6:	89 85       	ldd	r24, Y+9	; 0x09
 7d8:	9a 85       	ldd	r25, Y+10	; 0x0a
 7da:	20 e0       	ldi	r18, 0x00	; 0
 7dc:	3f ef       	ldi	r19, 0xFF	; 255
 7de:	4f e7       	ldi	r20, 0x7F	; 127
 7e0:	57 e4       	ldi	r21, 0x47	; 71
 7e2:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 7e6:	18 16       	cp	r1, r24
 7e8:	04 f4       	brge	.+0      	; 0x7ea <HLCD_init+0x7ea>
 7ea:	6b 85       	ldd	r22, Y+11	; 0x0b
 7ec:	7c 85       	ldd	r23, Y+12	; 0x0c
 7ee:	8d 85       	ldd	r24, Y+13	; 0x0d
 7f0:	9e 85       	ldd	r25, Y+14	; 0x0e
 7f2:	20 e0       	ldi	r18, 0x00	; 0
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	40 e2       	ldi	r20, 0x20	; 32
 7f8:	51 e4       	ldi	r21, 0x41	; 65
 7fa:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 7fe:	dc 01       	movw	r26, r24
 800:	cb 01       	movw	r24, r22
 802:	bc 01       	movw	r22, r24
 804:	cd 01       	movw	r24, r26
 806:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 80a:	dc 01       	movw	r26, r24
 80c:	cb 01       	movw	r24, r22
 80e:	9e 83       	std	Y+6, r25	; 0x06
 810:	8d 83       	std	Y+5, r24	; 0x05
 812:	00 c0       	rjmp	.+0      	; 0x814 <HLCD_init+0x814>
 814:	88 ec       	ldi	r24, 0xC8	; 200
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	9c 83       	std	Y+4, r25	; 0x04
 81a:	8b 83       	std	Y+3, r24	; 0x03
 81c:	8b 81       	ldd	r24, Y+3	; 0x03
 81e:	9c 81       	ldd	r25, Y+4	; 0x04
 820:	01 97       	sbiw	r24, 0x01	; 1
 822:	01 f4       	brne	.+0      	; 0x824 <HLCD_init+0x824>
 824:	9c 83       	std	Y+4, r25	; 0x04
 826:	8b 83       	std	Y+3, r24	; 0x03
 828:	8d 81       	ldd	r24, Y+5	; 0x05
 82a:	9e 81       	ldd	r25, Y+6	; 0x06
 82c:	01 97       	sbiw	r24, 0x01	; 1
 82e:	9e 83       	std	Y+6, r25	; 0x06
 830:	8d 83       	std	Y+5, r24	; 0x05
 832:	8d 81       	ldd	r24, Y+5	; 0x05
 834:	9e 81       	ldd	r25, Y+6	; 0x06
 836:	00 97       	sbiw	r24, 0x00	; 0
 838:	01 f4       	brne	.+0      	; 0x83a <HLCD_init+0x83a>
 83a:	00 c0       	rjmp	.+0      	; 0x83c <HLCD_init+0x83c>
 83c:	6f 81       	ldd	r22, Y+7	; 0x07
 83e:	78 85       	ldd	r23, Y+8	; 0x08
 840:	89 85       	ldd	r24, Y+9	; 0x09
 842:	9a 85       	ldd	r25, Y+10	; 0x0a
 844:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 848:	dc 01       	movw	r26, r24
 84a:	cb 01       	movw	r24, r22
 84c:	9e 83       	std	Y+6, r25	; 0x06
 84e:	8d 83       	std	Y+5, r24	; 0x05
 850:	8d 81       	ldd	r24, Y+5	; 0x05
 852:	9e 81       	ldd	r25, Y+6	; 0x06
 854:	9a 83       	std	Y+2, r25	; 0x02
 856:	89 83       	std	Y+1, r24	; 0x01
 858:	89 81       	ldd	r24, Y+1	; 0x01
 85a:	9a 81       	ldd	r25, Y+2	; 0x02
 85c:	01 97       	sbiw	r24, 0x01	; 1
 85e:	01 f4       	brne	.+0      	; 0x860 <HLCD_init+0x860>
 860:	9a 83       	std	Y+2, r25	; 0x02
 862:	89 83       	std	Y+1, r24	; 0x01
 864:	86 e0       	ldi	r24, 0x06	; 6
 866:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 86a:	80 e6       	ldi	r24, 0x60	; 96
 86c:	0e 94 00 00 	call	0	; 0x0 <HLCD_init>
 870:	cd 59       	subi	r28, 0x9D	; 157
 872:	df 4f       	sbci	r29, 0xFF	; 255
 874:	0f b6       	in	r0, 0x3f	; 63
 876:	f8 94       	cli
 878:	de bf       	out	0x3e, r29	; 62
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	cd bf       	out	0x3d, r28	; 61
 87e:	cf 91       	pop	r28
 880:	df 91       	pop	r29
 882:	1f 91       	pop	r17
 884:	0f 91       	pop	r16
 886:	08 95       	ret

Disassembly of section .text.HLCD_writeCMD:

00000000 <HLCD_writeCMD>:
	_delay_ms(2);							// delay 2ms
	MDIO_SetPinOutput(HLCD_E, LOW);			// Set E to 0 (falling edge: Write Data)
	return;
}// end HLCD_writeCMD

void HLCD_writeData(uint8 data) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2f 97       	sbiw	r28, 0x0f	; 15
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_SetPinOutput(HLCD_RS, HIGH);		// set RS to 1 (Data Reg)
  16:	84 e0       	ldi	r24, 0x04	; 4
  18:	60 e0       	ldi	r22, 0x00	; 0
  1a:	40 e0       	ldi	r20, 0x00	; 0
  1c:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeCMD>
	MDIO_SetPinOutput(HLCD_RW, LOW); 		// Set RW to 0
  20:	84 e0       	ldi	r24, 0x04	; 4
  22:	61 e0       	ldi	r22, 0x01	; 1
  24:	40 e0       	ldi	r20, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeCMD>

	if (mode == HLCD_8_BIT) {
  2a:	81 e0       	ldi	r24, 0x01	; 1
  2c:	6f 85       	ldd	r22, Y+15	; 0x0f
  2e:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeCMD>
  32:	84 e0       	ldi	r24, 0x04	; 4
		MDIO_SetPortValue(HLCD_PORT, data);	// Write the data to D0-D7
  34:	62 e0       	ldi	r22, 0x02	; 2
  36:	41 e0       	ldi	r20, 0x01	; 1
  38:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeCMD>
		MDIO_SetPinOutput(HLCD_E, HIGH); 		// Set E to 1 (Read Data)
  3c:	80 e0       	ldi	r24, 0x00	; 0
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	a0 e0       	ldi	r26, 0x00	; 0
  42:	b0 e4       	ldi	r27, 0x40	; 64
  44:	8b 87       	std	Y+11, r24	; 0x0b
  46:	9c 87       	std	Y+12, r25	; 0x0c
  48:	ad 87       	std	Y+13, r26	; 0x0d
  4a:	be 87       	std	Y+14, r27	; 0x0e
  4c:	6b 85       	ldd	r22, Y+11	; 0x0b
  4e:	7c 85       	ldd	r23, Y+12	; 0x0c
  50:	8d 85       	ldd	r24, Y+13	; 0x0d
  52:	9e 85       	ldd	r25, Y+14	; 0x0e
  54:	20 e0       	ldi	r18, 0x00	; 0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  56:	30 e0       	ldi	r19, 0x00	; 0
  58:	4a ef       	ldi	r20, 0xFA	; 250
  5a:	54 e4       	ldi	r21, 0x44	; 68
  5c:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeCMD>
  60:	dc 01       	movw	r26, r24
  62:	cb 01       	movw	r24, r22
  64:	8f 83       	std	Y+7, r24	; 0x07
  66:	98 87       	std	Y+8, r25	; 0x08
  68:	a9 87       	std	Y+9, r26	; 0x09
  6a:	ba 87       	std	Y+10, r27	; 0x0a
  6c:	6f 81       	ldd	r22, Y+7	; 0x07
  6e:	78 85       	ldd	r23, Y+8	; 0x08
  70:	89 85       	ldd	r24, Y+9	; 0x09
  72:	9a 85       	ldd	r25, Y+10	; 0x0a
  74:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	40 e8       	ldi	r20, 0x80	; 128
  7a:	5f e3       	ldi	r21, 0x3F	; 63
  7c:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeCMD>
  80:	88 23       	and	r24, r24
  82:	04 f4       	brge	.+0      	; 0x84 <HLCD_writeCMD+0x84>
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	9e 83       	std	Y+6, r25	; 0x06
  8a:	8d 83       	std	Y+5, r24	; 0x05
  8c:	00 c0       	rjmp	.+0      	; 0x8e <HLCD_writeCMD+0x8e>
		__ticks = 1;
  8e:	6f 81       	ldd	r22, Y+7	; 0x07
  90:	78 85       	ldd	r23, Y+8	; 0x08
  92:	89 85       	ldd	r24, Y+9	; 0x09
  94:	9a 85       	ldd	r25, Y+10	; 0x0a
  96:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
  98:	3f ef       	ldi	r19, 0xFF	; 255
  9a:	4f e7       	ldi	r20, 0x7F	; 127
  9c:	57 e4       	ldi	r21, 0x47	; 71
  9e:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeCMD>
  a2:	18 16       	cp	r1, r24
  a4:	04 f4       	brge	.+0      	; 0xa6 <HLCD_writeCMD+0xa6>
  a6:	6b 85       	ldd	r22, Y+11	; 0x0b
  a8:	7c 85       	ldd	r23, Y+12	; 0x0c
  aa:	8d 85       	ldd	r24, Y+13	; 0x0d
  ac:	9e 85       	ldd	r25, Y+14	; 0x0e
  ae:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	40 e2       	ldi	r20, 0x20	; 32
  b4:	51 e4       	ldi	r21, 0x41	; 65
  b6:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeCMD>
  ba:	dc 01       	movw	r26, r24
  bc:	cb 01       	movw	r24, r22
  be:	bc 01       	movw	r22, r24
  c0:	cd 01       	movw	r24, r26
  c2:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeCMD>
  c6:	dc 01       	movw	r26, r24
  c8:	cb 01       	movw	r24, r22
  ca:	9e 83       	std	Y+6, r25	; 0x06
  cc:	8d 83       	std	Y+5, r24	; 0x05
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <HLCD_writeCMD+0xd0>
  d0:	88 ec       	ldi	r24, 0xC8	; 200
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	9c 83       	std	Y+4, r25	; 0x04
  d6:	8b 83       	std	Y+3, r24	; 0x03
  d8:	8b 81       	ldd	r24, Y+3	; 0x03
  da:	9c 81       	ldd	r25, Y+4	; 0x04
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	01 f4       	brne	.+0      	; 0xe0 <HLCD_writeCMD+0xe0>
  e0:	9c 83       	std	Y+4, r25	; 0x04
  e2:	8b 83       	std	Y+3, r24	; 0x03
  e4:	8d 81       	ldd	r24, Y+5	; 0x05
  e6:	9e 81       	ldd	r25, Y+6	; 0x06
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	9e 83       	std	Y+6, r25	; 0x06
  ec:	8d 83       	std	Y+5, r24	; 0x05
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ee:	8d 81       	ldd	r24, Y+5	; 0x05
  f0:	9e 81       	ldd	r25, Y+6	; 0x06
  f2:	00 97       	sbiw	r24, 0x00	; 0
  f4:	01 f4       	brne	.+0      	; 0xf6 <HLCD_writeCMD+0xf6>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <HLCD_writeCMD+0xf8>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f8:	6f 81       	ldd	r22, Y+7	; 0x07
  fa:	78 85       	ldd	r23, Y+8	; 0x08
  fc:	89 85       	ldd	r24, Y+9	; 0x09
  fe:	9a 85       	ldd	r25, Y+10	; 0x0a
 100:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeCMD>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 104:	dc 01       	movw	r26, r24
 106:	cb 01       	movw	r24, r22
 108:	9e 83       	std	Y+6, r25	; 0x06
 10a:	8d 83       	std	Y+5, r24	; 0x05
 10c:	8d 81       	ldd	r24, Y+5	; 0x05
 10e:	9e 81       	ldd	r25, Y+6	; 0x06
 110:	9a 83       	std	Y+2, r25	; 0x02
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	9a 81       	ldd	r25, Y+2	; 0x02
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	01 f4       	brne	.+0      	; 0x11c <HLCD_writeCMD+0x11c>
 11c:	9a 83       	std	Y+2, r25	; 0x02
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	84 e0       	ldi	r24, 0x04	; 4
 122:	62 e0       	ldi	r22, 0x02	; 2
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeCMD>
		_delay_ms(2);							// delay 2ms
		MDIO_SetPinOutput(HLCD_E, LOW); 		// Set E to 0 (falling edge: Write Data)
 12a:	2f 96       	adiw	r28, 0x0f	; 15
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61

	}else{
		MDIO_SetPortValue(HLCD_PORT, data & 0xF0);	// Write the Hdata to D4-D7
 136:	cf 91       	pop	r28
 138:	df 91       	pop	r29
 13a:	08 95       	ret

Disassembly of section .text.HLCD_writeData:

00000000 <HLCD_writeData>:
	_delay_ms(2);							// delay 2ms
	MDIO_SetPinOutput(HLCD_E, LOW);			// Set E to 0 (falling edge: Write Data)
	return;
}// end HLCD_writeCMD

void HLCD_writeData(uint8 data) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	ab 97       	sbiw	r28, 0x2b	; 43
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8b a7       	std	Y+43, r24	; 0x2b
	MDIO_SetPinOutput(HLCD_RS, HIGH);		// set RS to 1 (Data Reg)
  16:	84 e0       	ldi	r24, 0x04	; 4
  18:	60 e0       	ldi	r22, 0x00	; 0
  1a:	41 e0       	ldi	r20, 0x01	; 1
  1c:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
	MDIO_SetPinOutput(HLCD_RW, LOW); 		// Set RW to 0
  20:	84 e0       	ldi	r24, 0x04	; 4
  22:	61 e0       	ldi	r22, 0x01	; 1
  24:	40 e0       	ldi	r20, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>

	if (mode == HLCD_8_BIT) {
  2a:	80 91 00 00 	lds	r24, 0x0000
  2e:	81 30       	cpi	r24, 0x01	; 1
  30:	01 f0       	breq	.+0      	; 0x32 <HLCD_writeData+0x32>
  32:	00 c0       	rjmp	.+0      	; 0x34 <HLCD_writeData+0x34>
		MDIO_SetPortValue(HLCD_PORT, data);	// Write the data to D0-D7
  34:	81 e0       	ldi	r24, 0x01	; 1
  36:	6b a5       	ldd	r22, Y+43	; 0x2b
  38:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
		MDIO_SetPinOutput(HLCD_E, HIGH); 		// Set E to 1 (Read Data)
  3c:	84 e0       	ldi	r24, 0x04	; 4
  3e:	62 e0       	ldi	r22, 0x02	; 2
  40:	41 e0       	ldi	r20, 0x01	; 1
  42:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
  46:	80 e0       	ldi	r24, 0x00	; 0
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	a0 e0       	ldi	r26, 0x00	; 0
  4c:	b0 e4       	ldi	r27, 0x40	; 64
  4e:	8f a3       	std	Y+39, r24	; 0x27
  50:	98 a7       	std	Y+40, r25	; 0x28
  52:	a9 a7       	std	Y+41, r26	; 0x29
  54:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  56:	6f a1       	ldd	r22, Y+39	; 0x27
  58:	78 a5       	ldd	r23, Y+40	; 0x28
  5a:	89 a5       	ldd	r24, Y+41	; 0x29
  5c:	9a a5       	ldd	r25, Y+42	; 0x2a
  5e:	20 e0       	ldi	r18, 0x00	; 0
  60:	30 e0       	ldi	r19, 0x00	; 0
  62:	4a ef       	ldi	r20, 0xFA	; 250
  64:	54 e4       	ldi	r21, 0x44	; 68
  66:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
  6a:	dc 01       	movw	r26, r24
  6c:	cb 01       	movw	r24, r22
  6e:	8b a3       	std	Y+35, r24	; 0x23
  70:	9c a3       	std	Y+36, r25	; 0x24
  72:	ad a3       	std	Y+37, r26	; 0x25
  74:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
  76:	6b a1       	ldd	r22, Y+35	; 0x23
  78:	7c a1       	ldd	r23, Y+36	; 0x24
  7a:	8d a1       	ldd	r24, Y+37	; 0x25
  7c:	9e a1       	ldd	r25, Y+38	; 0x26
  7e:	20 e0       	ldi	r18, 0x00	; 0
  80:	30 e0       	ldi	r19, 0x00	; 0
  82:	40 e8       	ldi	r20, 0x80	; 128
  84:	5f e3       	ldi	r21, 0x3F	; 63
  86:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
  8a:	88 23       	and	r24, r24
  8c:	04 f4       	brge	.+0      	; 0x8e <HLCD_writeData+0x8e>
		__ticks = 1;
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	9a a3       	std	Y+34, r25	; 0x22
  94:	89 a3       	std	Y+33, r24	; 0x21
  96:	00 c0       	rjmp	.+0      	; 0x98 <HLCD_writeData+0x98>
	else if (__tmp > 65535)
  98:	6b a1       	ldd	r22, Y+35	; 0x23
  9a:	7c a1       	ldd	r23, Y+36	; 0x24
  9c:	8d a1       	ldd	r24, Y+37	; 0x25
  9e:	9e a1       	ldd	r25, Y+38	; 0x26
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	3f ef       	ldi	r19, 0xFF	; 255
  a4:	4f e7       	ldi	r20, 0x7F	; 127
  a6:	57 e4       	ldi	r21, 0x47	; 71
  a8:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
  ac:	18 16       	cp	r1, r24
  ae:	04 f4       	brge	.+0      	; 0xb0 <HLCD_writeData+0xb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  b0:	6f a1       	ldd	r22, Y+39	; 0x27
  b2:	78 a5       	ldd	r23, Y+40	; 0x28
  b4:	89 a5       	ldd	r24, Y+41	; 0x29
  b6:	9a a5       	ldd	r25, Y+42	; 0x2a
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	40 e2       	ldi	r20, 0x20	; 32
  be:	51 e4       	ldi	r21, 0x41	; 65
  c0:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
  c4:	dc 01       	movw	r26, r24
  c6:	cb 01       	movw	r24, r22
  c8:	bc 01       	movw	r22, r24
  ca:	cd 01       	movw	r24, r26
  cc:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
  d0:	dc 01       	movw	r26, r24
  d2:	cb 01       	movw	r24, r22
  d4:	9a a3       	std	Y+34, r25	; 0x22
  d6:	89 a3       	std	Y+33, r24	; 0x21
  d8:	00 c0       	rjmp	.+0      	; 0xda <HLCD_writeData+0xda>
  da:	88 ec       	ldi	r24, 0xC8	; 200
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	98 a3       	std	Y+32, r25	; 0x20
  e0:	8f 8f       	std	Y+31, r24	; 0x1f
  e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
  e4:	98 a1       	ldd	r25, Y+32	; 0x20
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	01 f4       	brne	.+0      	; 0xea <HLCD_writeData+0xea>
  ea:	98 a3       	std	Y+32, r25	; 0x20
  ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ee:	89 a1       	ldd	r24, Y+33	; 0x21
  f0:	9a a1       	ldd	r25, Y+34	; 0x22
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	9a a3       	std	Y+34, r25	; 0x22
  f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f8:	89 a1       	ldd	r24, Y+33	; 0x21
  fa:	9a a1       	ldd	r25, Y+34	; 0x22
  fc:	00 97       	sbiw	r24, 0x00	; 0
  fe:	01 f4       	brne	.+0      	; 0x100 <HLCD_writeData+0x100>
 100:	00 c0       	rjmp	.+0      	; 0x102 <HLCD_writeData+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 102:	6b a1       	ldd	r22, Y+35	; 0x23
 104:	7c a1       	ldd	r23, Y+36	; 0x24
 106:	8d a1       	ldd	r24, Y+37	; 0x25
 108:	9e a1       	ldd	r25, Y+38	; 0x26
 10a:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
 10e:	dc 01       	movw	r26, r24
 110:	cb 01       	movw	r24, r22
 112:	9a a3       	std	Y+34, r25	; 0x22
 114:	89 a3       	std	Y+33, r24	; 0x21
 116:	89 a1       	ldd	r24, Y+33	; 0x21
 118:	9a a1       	ldd	r25, Y+34	; 0x22
 11a:	9e 8f       	std	Y+30, r25	; 0x1e
 11c:	8d 8f       	std	Y+29, r24	; 0x1d
 11e:	8d 8d       	ldd	r24, Y+29	; 0x1d
 120:	9e 8d       	ldd	r25, Y+30	; 0x1e
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	01 f4       	brne	.+0      	; 0x126 <HLCD_writeData+0x126>
 126:	9e 8f       	std	Y+30, r25	; 0x1e
 128:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);							// delay 2ms
		MDIO_SetPinOutput(HLCD_E, LOW); 		// Set E to 0 (falling edge: Write Data)
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
 134:	00 c0       	rjmp	.+0      	; 0x136 <HLCD_writeData+0x136>

	}else{
		MDIO_SetPortValue(HLCD_PORT, data & 0xF0);	// Write the Hdata to D4-D7
 136:	8b a5       	ldd	r24, Y+43	; 0x2b
 138:	98 2f       	mov	r25, r24
 13a:	90 7f       	andi	r25, 0xF0	; 240
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	69 2f       	mov	r22, r25
 140:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
		MDIO_SetPinOutput(HLCD_E, HIGH); 		// Set E to 1 (Read Data)
 144:	84 e0       	ldi	r24, 0x04	; 4
 146:	62 e0       	ldi	r22, 0x02	; 2
 148:	41 e0       	ldi	r20, 0x01	; 1
 14a:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	a0 e0       	ldi	r26, 0x00	; 0
 154:	b0 e4       	ldi	r27, 0x40	; 64
 156:	89 8f       	std	Y+25, r24	; 0x19
 158:	9a 8f       	std	Y+26, r25	; 0x1a
 15a:	ab 8f       	std	Y+27, r26	; 0x1b
 15c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 15e:	69 8d       	ldd	r22, Y+25	; 0x19
 160:	7a 8d       	ldd	r23, Y+26	; 0x1a
 162:	8b 8d       	ldd	r24, Y+27	; 0x1b
 164:	9c 8d       	ldd	r25, Y+28	; 0x1c
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	4a ef       	ldi	r20, 0xFA	; 250
 16c:	54 e4       	ldi	r21, 0x44	; 68
 16e:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
 172:	dc 01       	movw	r26, r24
 174:	cb 01       	movw	r24, r22
 176:	8d 8b       	std	Y+21, r24	; 0x15
 178:	9e 8b       	std	Y+22, r25	; 0x16
 17a:	af 8b       	std	Y+23, r26	; 0x17
 17c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 17e:	6d 89       	ldd	r22, Y+21	; 0x15
 180:	7e 89       	ldd	r23, Y+22	; 0x16
 182:	8f 89       	ldd	r24, Y+23	; 0x17
 184:	98 8d       	ldd	r25, Y+24	; 0x18
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	40 e8       	ldi	r20, 0x80	; 128
 18c:	5f e3       	ldi	r21, 0x3F	; 63
 18e:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
 192:	88 23       	and	r24, r24
 194:	04 f4       	brge	.+0      	; 0x196 <HLCD_writeData+0x196>
		__ticks = 1;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	9c 8b       	std	Y+20, r25	; 0x14
 19c:	8b 8b       	std	Y+19, r24	; 0x13
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <HLCD_writeData+0x1a0>
	else if (__tmp > 65535)
 1a0:	6d 89       	ldd	r22, Y+21	; 0x15
 1a2:	7e 89       	ldd	r23, Y+22	; 0x16
 1a4:	8f 89       	ldd	r24, Y+23	; 0x17
 1a6:	98 8d       	ldd	r25, Y+24	; 0x18
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	3f ef       	ldi	r19, 0xFF	; 255
 1ac:	4f e7       	ldi	r20, 0x7F	; 127
 1ae:	57 e4       	ldi	r21, 0x47	; 71
 1b0:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
 1b4:	18 16       	cp	r1, r24
 1b6:	04 f4       	brge	.+0      	; 0x1b8 <HLCD_writeData+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1b8:	69 8d       	ldd	r22, Y+25	; 0x19
 1ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
 1bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1be:	9c 8d       	ldd	r25, Y+28	; 0x1c
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	40 e2       	ldi	r20, 0x20	; 32
 1c6:	51 e4       	ldi	r21, 0x41	; 65
 1c8:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
 1cc:	dc 01       	movw	r26, r24
 1ce:	cb 01       	movw	r24, r22
 1d0:	bc 01       	movw	r22, r24
 1d2:	cd 01       	movw	r24, r26
 1d4:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
 1d8:	dc 01       	movw	r26, r24
 1da:	cb 01       	movw	r24, r22
 1dc:	9c 8b       	std	Y+20, r25	; 0x14
 1de:	8b 8b       	std	Y+19, r24	; 0x13
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <HLCD_writeData+0x1e2>
 1e2:	88 ec       	ldi	r24, 0xC8	; 200
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	9a 8b       	std	Y+18, r25	; 0x12
 1e8:	89 8b       	std	Y+17, r24	; 0x11
 1ea:	89 89       	ldd	r24, Y+17	; 0x11
 1ec:	9a 89       	ldd	r25, Y+18	; 0x12
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	01 f4       	brne	.+0      	; 0x1f2 <HLCD_writeData+0x1f2>
 1f2:	9a 8b       	std	Y+18, r25	; 0x12
 1f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f6:	8b 89       	ldd	r24, Y+19	; 0x13
 1f8:	9c 89       	ldd	r25, Y+20	; 0x14
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	9c 8b       	std	Y+20, r25	; 0x14
 1fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 200:	8b 89       	ldd	r24, Y+19	; 0x13
 202:	9c 89       	ldd	r25, Y+20	; 0x14
 204:	00 97       	sbiw	r24, 0x00	; 0
 206:	01 f4       	brne	.+0      	; 0x208 <HLCD_writeData+0x208>
 208:	00 c0       	rjmp	.+0      	; 0x20a <HLCD_writeData+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 20a:	6d 89       	ldd	r22, Y+21	; 0x15
 20c:	7e 89       	ldd	r23, Y+22	; 0x16
 20e:	8f 89       	ldd	r24, Y+23	; 0x17
 210:	98 8d       	ldd	r25, Y+24	; 0x18
 212:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
 216:	dc 01       	movw	r26, r24
 218:	cb 01       	movw	r24, r22
 21a:	9c 8b       	std	Y+20, r25	; 0x14
 21c:	8b 8b       	std	Y+19, r24	; 0x13
 21e:	8b 89       	ldd	r24, Y+19	; 0x13
 220:	9c 89       	ldd	r25, Y+20	; 0x14
 222:	98 8b       	std	Y+16, r25	; 0x10
 224:	8f 87       	std	Y+15, r24	; 0x0f
 226:	8f 85       	ldd	r24, Y+15	; 0x0f
 228:	98 89       	ldd	r25, Y+16	; 0x10
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	01 f4       	brne	.+0      	; 0x22e <HLCD_writeData+0x22e>
 22e:	98 8b       	std	Y+16, r25	; 0x10
 230:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);							// delay 2ms
		MDIO_SetPinOutput(HLCD_E, LOW); 		// Set E to 0 (falling edge: Write Data)
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	62 e0       	ldi	r22, 0x02	; 2
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>

		MDIO_SetPortValue(HLCD_PORT, (data << 4) & 0xF0);	// Write the Ldata to D4-D7
 23c:	8b a5       	ldd	r24, Y+43	; 0x2b
 23e:	88 2f       	mov	r24, r24
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	82 95       	swap	r24
 244:	92 95       	swap	r25
 246:	90 7f       	andi	r25, 0xF0	; 240
 248:	98 27       	eor	r25, r24
 24a:	80 7f       	andi	r24, 0xF0	; 240
 24c:	98 27       	eor	r25, r24
 24e:	98 2f       	mov	r25, r24
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	69 2f       	mov	r22, r25
 254:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
		MDIO_SetPinOutput(HLCD_E, HIGH); 		// Set E to 1 (Read Data)
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	62 e0       	ldi	r22, 0x02	; 2
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	a0 e0       	ldi	r26, 0x00	; 0
 268:	b0 e4       	ldi	r27, 0x40	; 64
 26a:	8b 87       	std	Y+11, r24	; 0x0b
 26c:	9c 87       	std	Y+12, r25	; 0x0c
 26e:	ad 87       	std	Y+13, r26	; 0x0d
 270:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 272:	6b 85       	ldd	r22, Y+11	; 0x0b
 274:	7c 85       	ldd	r23, Y+12	; 0x0c
 276:	8d 85       	ldd	r24, Y+13	; 0x0d
 278:	9e 85       	ldd	r25, Y+14	; 0x0e
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	4a ef       	ldi	r20, 0xFA	; 250
 280:	54 e4       	ldi	r21, 0x44	; 68
 282:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
 286:	dc 01       	movw	r26, r24
 288:	cb 01       	movw	r24, r22
 28a:	8f 83       	std	Y+7, r24	; 0x07
 28c:	98 87       	std	Y+8, r25	; 0x08
 28e:	a9 87       	std	Y+9, r26	; 0x09
 290:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 292:	6f 81       	ldd	r22, Y+7	; 0x07
 294:	78 85       	ldd	r23, Y+8	; 0x08
 296:	89 85       	ldd	r24, Y+9	; 0x09
 298:	9a 85       	ldd	r25, Y+10	; 0x0a
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	40 e8       	ldi	r20, 0x80	; 128
 2a0:	5f e3       	ldi	r21, 0x3F	; 63
 2a2:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
 2a6:	88 23       	and	r24, r24
 2a8:	04 f4       	brge	.+0      	; 0x2aa <HLCD_writeData+0x2aa>
		__ticks = 1;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	9e 83       	std	Y+6, r25	; 0x06
 2b0:	8d 83       	std	Y+5, r24	; 0x05
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <HLCD_writeData+0x2b4>
	else if (__tmp > 65535)
 2b4:	6f 81       	ldd	r22, Y+7	; 0x07
 2b6:	78 85       	ldd	r23, Y+8	; 0x08
 2b8:	89 85       	ldd	r24, Y+9	; 0x09
 2ba:	9a 85       	ldd	r25, Y+10	; 0x0a
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	3f ef       	ldi	r19, 0xFF	; 255
 2c0:	4f e7       	ldi	r20, 0x7F	; 127
 2c2:	57 e4       	ldi	r21, 0x47	; 71
 2c4:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
 2c8:	18 16       	cp	r1, r24
 2ca:	04 f4       	brge	.+0      	; 0x2cc <HLCD_writeData+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2cc:	6b 85       	ldd	r22, Y+11	; 0x0b
 2ce:	7c 85       	ldd	r23, Y+12	; 0x0c
 2d0:	8d 85       	ldd	r24, Y+13	; 0x0d
 2d2:	9e 85       	ldd	r25, Y+14	; 0x0e
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	40 e2       	ldi	r20, 0x20	; 32
 2da:	51 e4       	ldi	r21, 0x41	; 65
 2dc:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
 2e0:	dc 01       	movw	r26, r24
 2e2:	cb 01       	movw	r24, r22
 2e4:	bc 01       	movw	r22, r24
 2e6:	cd 01       	movw	r24, r26
 2e8:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
 2ec:	dc 01       	movw	r26, r24
 2ee:	cb 01       	movw	r24, r22
 2f0:	9e 83       	std	Y+6, r25	; 0x06
 2f2:	8d 83       	std	Y+5, r24	; 0x05
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <HLCD_writeData+0x2f6>
 2f6:	88 ec       	ldi	r24, 0xC8	; 200
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	9c 83       	std	Y+4, r25	; 0x04
 2fc:	8b 83       	std	Y+3, r24	; 0x03
 2fe:	8b 81       	ldd	r24, Y+3	; 0x03
 300:	9c 81       	ldd	r25, Y+4	; 0x04
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	01 f4       	brne	.+0      	; 0x306 <HLCD_writeData+0x306>
 306:	9c 83       	std	Y+4, r25	; 0x04
 308:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 30a:	8d 81       	ldd	r24, Y+5	; 0x05
 30c:	9e 81       	ldd	r25, Y+6	; 0x06
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	9e 83       	std	Y+6, r25	; 0x06
 312:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 314:	8d 81       	ldd	r24, Y+5	; 0x05
 316:	9e 81       	ldd	r25, Y+6	; 0x06
 318:	00 97       	sbiw	r24, 0x00	; 0
 31a:	01 f4       	brne	.+0      	; 0x31c <HLCD_writeData+0x31c>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <HLCD_writeData+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 31e:	6f 81       	ldd	r22, Y+7	; 0x07
 320:	78 85       	ldd	r23, Y+8	; 0x08
 322:	89 85       	ldd	r24, Y+9	; 0x09
 324:	9a 85       	ldd	r25, Y+10	; 0x0a
 326:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
 32a:	dc 01       	movw	r26, r24
 32c:	cb 01       	movw	r24, r22
 32e:	9e 83       	std	Y+6, r25	; 0x06
 330:	8d 83       	std	Y+5, r24	; 0x05
 332:	8d 81       	ldd	r24, Y+5	; 0x05
 334:	9e 81       	ldd	r25, Y+6	; 0x06
 336:	9a 83       	std	Y+2, r25	; 0x02
 338:	89 83       	std	Y+1, r24	; 0x01
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	9a 81       	ldd	r25, Y+2	; 0x02
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	01 f4       	brne	.+0      	; 0x342 <HLCD_writeData+0x342>
 342:	9a 83       	std	Y+2, r25	; 0x02
 344:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);							// delay 2ms
		MDIO_SetPinOutput(HLCD_E, LOW); 		// Set E to 0 (falling edge: Write Data)
 346:	84 e0       	ldi	r24, 0x04	; 4
 348:	62 e0       	ldi	r22, 0x02	; 2
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	0e 94 00 00 	call	0	; 0x0 <HLCD_writeData>
	}
	return;
} // end HLCD_writeData
 350:	ab 96       	adiw	r28, 0x2b	; 43
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	de bf       	out	0x3e, r29	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	cd bf       	out	0x3d, r28	; 61
 35c:	cf 91       	pop	r28
 35e:	df 91       	pop	r29
 360:	08 95       	ret

HLED_program.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000258  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000003b2  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.addLED  0000002e  00000000  00000000  0000063e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.LED_ON  0000002e  00000000  00000000  0000066c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.LED_OFF 0000002e  00000000  00000000  0000069a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.addLED:

00000000 <addLED>:
#include "../libraries/L_STD_TYPES.h"
#include "../libraries/L_UTILS.h"
#include "../MCAL/MDIO_interface.h"

void addLED(port, bit) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <addLED+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <addLED+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
	MDIO_SetPinDirection(port, bit, OUTPUT);
  14:	89 81       	ldd	r24, Y+1	; 0x01
  16:	9b 81       	ldd	r25, Y+3	; 0x03
  18:	69 2f       	mov	r22, r25
  1a:	41 e0       	ldi	r20, 0x01	; 1
  1c:	0e 94 00 00 	call	0	; 0x0 <addLED>
}
  20:	0f 90       	pop	r0
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	0f 90       	pop	r0
  28:	cf 91       	pop	r28
  2a:	df 91       	pop	r29
  2c:	08 95       	ret

Disassembly of section .text.LED_ON:

00000000 <LED_ON>:
#include "../libraries/L_STD_TYPES.h"
#include "../libraries/L_UTILS.h"
#include "../MCAL/MDIO_interface.h"

void addLED(port, bit) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <LED_ON+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <LED_ON+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
	MDIO_SetPinDirection(port, bit, OUTPUT);
  14:	89 81       	ldd	r24, Y+1	; 0x01
  16:	9b 81       	ldd	r25, Y+3	; 0x03
  18:	69 2f       	mov	r22, r25
  1a:	41 e0       	ldi	r20, 0x01	; 1
  1c:	0e 94 00 00 	call	0	; 0x0 <LED_ON>
}
  20:	0f 90       	pop	r0
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	0f 90       	pop	r0
  28:	cf 91       	pop	r28
  2a:	df 91       	pop	r29
  2c:	08 95       	ret

Disassembly of section .text.LED_OFF:

00000000 <LED_OFF>:
#include "../libraries/L_STD_TYPES.h"
#include "../libraries/L_UTILS.h"
#include "../MCAL/MDIO_interface.h"

void addLED(port, bit) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <LED_OFF+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <LED_OFF+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9a 83       	std	Y+2, r25	; 0x02
   e:	89 83       	std	Y+1, r24	; 0x01
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	6b 83       	std	Y+3, r22	; 0x03
	MDIO_SetPinDirection(port, bit, OUTPUT);
  14:	89 81       	ldd	r24, Y+1	; 0x01
  16:	9b 81       	ldd	r25, Y+3	; 0x03
  18:	69 2f       	mov	r22, r25
  1a:	40 e0       	ldi	r20, 0x00	; 0
  1c:	0e 94 00 00 	call	0	; 0x0 <LED_OFF>
}
  20:	0f 90       	pop	r0
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	0f 90       	pop	r0
  28:	cf 91       	pop	r28
  2a:	df 91       	pop	r29
  2c:	08 95       	ret

HNPN_program.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000228  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000038c  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.NPN_ON  0000002c  00000000  00000000  000005e8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.NPN_OFF 0000002c  00000000  00000000  00000614  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.NPN_ON:

00000000 <NPN_ON>:
#include "../MCAL/MDIO_interface.h"
#include "HNPN_interface.h"


void NPN_ON(uint8 port, uint8 pin)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <NPN_ON+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
   c:	6a 83       	std	Y+2, r22	; 0x02
    MDIO_SetPinDirection(port, pin, OUTPUT);
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	6a 81       	ldd	r22, Y+2	; 0x02
  12:	41 e0       	ldi	r20, 0x01	; 1
  14:	0e 94 00 00 	call	0	; 0x0 <NPN_ON>
    MDIO_SetPinOutput(port, pin, HIGH);
  18:	89 81       	ldd	r24, Y+1	; 0x01
  1a:	6a 81       	ldd	r22, Y+2	; 0x02
  1c:	41 e0       	ldi	r20, 0x01	; 1
  1e:	0e 94 00 00 	call	0	; 0x0 <NPN_ON>
    return;
}// end NPN_ON
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret

Disassembly of section .text.NPN_OFF:

00000000 <NPN_OFF>:
#include "../MCAL/MDIO_interface.h"
#include "HNPN_interface.h"


void NPN_ON(uint8 port, uint8 pin)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <NPN_OFF+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
   c:	6a 83       	std	Y+2, r22	; 0x02
    MDIO_SetPinDirection(port, pin, OUTPUT);
   e:	89 81       	ldd	r24, Y+1	; 0x01
  10:	6a 81       	ldd	r22, Y+2	; 0x02
  12:	41 e0       	ldi	r20, 0x01	; 1
  14:	0e 94 00 00 	call	0	; 0x0 <NPN_OFF>
    MDIO_SetPinOutput(port, pin, HIGH);
  18:	89 81       	ldd	r24, Y+1	; 0x01
  1a:	6a 81       	ldd	r22, Y+2	; 0x02
  1c:	40 e0       	ldi	r20, 0x00	; 0
  1e:	0e 94 00 00 	call	0	; 0x0 <NPN_OFF>
    return;
}// end NPN_ON
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret

HSevenSegments_program.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000348  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000043d  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .data.numbers 000000b0  00000000  00000000  000007b9  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .text.H7Seg_clear 0000005e  00000000  00000000  00000869  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.H7Seg_initialize 00000062  00000000  00000000  000008c7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.H7Seg_display 00000092  00000000  00000000  00000929  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.H7Seg_clear:

00000000 <H7Seg_clear>:
#include "../libraries/L_UTILS.h"
#include "../MCAL/MDIO_interface.h"
#include "HSevenSegments_private.h"
#include "HSevenSegments_interface.h"

void H7Seg_clear(void) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
	MDIO_SetPinOutput(PORTB, 0, HIGH);
   8:	82 e0       	ldi	r24, 0x02	; 2
   a:	60 e0       	ldi	r22, 0x00	; 0
   c:	41 e0       	ldi	r20, 0x01	; 1
   e:	0e 94 00 00 	call	0	; 0x0 <H7Seg_clear>
	MDIO_SetPinOutput(PORTB, 1, HIGH);
  12:	82 e0       	ldi	r24, 0x02	; 2
  14:	61 e0       	ldi	r22, 0x01	; 1
  16:	41 e0       	ldi	r20, 0x01	; 1
  18:	0e 94 00 00 	call	0	; 0x0 <H7Seg_clear>
	MDIO_SetPinOutput(PORTB, 2, HIGH);
  1c:	82 e0       	ldi	r24, 0x02	; 2
  1e:	62 e0       	ldi	r22, 0x02	; 2
  20:	41 e0       	ldi	r20, 0x01	; 1
  22:	0e 94 00 00 	call	0	; 0x0 <H7Seg_clear>
	MDIO_SetPinOutput(PORTB, 3, HIGH);
  26:	82 e0       	ldi	r24, 0x02	; 2
  28:	63 e0       	ldi	r22, 0x03	; 3
  2a:	41 e0       	ldi	r20, 0x01	; 1
  2c:	0e 94 00 00 	call	0	; 0x0 <H7Seg_clear>
	MDIO_SetPinOutput(PORTB, 4, HIGH);
  30:	82 e0       	ldi	r24, 0x02	; 2
  32:	64 e0       	ldi	r22, 0x04	; 4
  34:	41 e0       	ldi	r20, 0x01	; 1
  36:	0e 94 00 00 	call	0	; 0x0 <H7Seg_clear>
	MDIO_SetPinOutput(PORTB, 5, HIGH);
  3a:	82 e0       	ldi	r24, 0x02	; 2
  3c:	65 e0       	ldi	r22, 0x05	; 5
  3e:	41 e0       	ldi	r20, 0x01	; 1
  40:	0e 94 00 00 	call	0	; 0x0 <H7Seg_clear>
	MDIO_SetPinOutput(PORTB, 6, HIGH);
  44:	82 e0       	ldi	r24, 0x02	; 2
  46:	66 e0       	ldi	r22, 0x06	; 6
  48:	41 e0       	ldi	r20, 0x01	; 1
  4a:	0e 94 00 00 	call	0	; 0x0 <H7Seg_clear>
	MDIO_SetPinOutput(PORTB, 7, HIGH);
  4e:	82 e0       	ldi	r24, 0x02	; 2
  50:	67 e0       	ldi	r22, 0x07	; 7
  52:	41 e0       	ldi	r20, 0x01	; 1
  54:	0e 94 00 00 	call	0	; 0x0 <H7Seg_clear>
	return;
}
  58:	cf 91       	pop	r28
  5a:	df 91       	pop	r29
  5c:	08 95       	ret

Disassembly of section .text.H7Seg_initialize:

00000000 <H7Seg_initialize>:
#include "../libraries/L_UTILS.h"
#include "../MCAL/MDIO_interface.h"
#include "HSevenSegments_private.h"
#include "HSevenSegments_interface.h"

void H7Seg_clear(void) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
	MDIO_SetPinOutput(PORTB, 0, HIGH);
   8:	82 e0       	ldi	r24, 0x02	; 2
   a:	60 e0       	ldi	r22, 0x00	; 0
   c:	41 e0       	ldi	r20, 0x01	; 1
   e:	0e 94 00 00 	call	0	; 0x0 <H7Seg_initialize>
	MDIO_SetPinOutput(PORTB, 1, HIGH);
  12:	82 e0       	ldi	r24, 0x02	; 2
  14:	61 e0       	ldi	r22, 0x01	; 1
  16:	41 e0       	ldi	r20, 0x01	; 1
  18:	0e 94 00 00 	call	0	; 0x0 <H7Seg_initialize>
	MDIO_SetPinOutput(PORTB, 2, HIGH);
  1c:	82 e0       	ldi	r24, 0x02	; 2
  1e:	62 e0       	ldi	r22, 0x02	; 2
  20:	41 e0       	ldi	r20, 0x01	; 1
  22:	0e 94 00 00 	call	0	; 0x0 <H7Seg_initialize>
	MDIO_SetPinOutput(PORTB, 3, HIGH);
  26:	82 e0       	ldi	r24, 0x02	; 2
  28:	63 e0       	ldi	r22, 0x03	; 3
  2a:	41 e0       	ldi	r20, 0x01	; 1
  2c:	0e 94 00 00 	call	0	; 0x0 <H7Seg_initialize>
	MDIO_SetPinOutput(PORTB, 4, HIGH);
  30:	82 e0       	ldi	r24, 0x02	; 2
  32:	64 e0       	ldi	r22, 0x04	; 4
  34:	41 e0       	ldi	r20, 0x01	; 1
  36:	0e 94 00 00 	call	0	; 0x0 <H7Seg_initialize>
	MDIO_SetPinOutput(PORTB, 5, HIGH);
  3a:	82 e0       	ldi	r24, 0x02	; 2
  3c:	65 e0       	ldi	r22, 0x05	; 5
  3e:	41 e0       	ldi	r20, 0x01	; 1
  40:	0e 94 00 00 	call	0	; 0x0 <H7Seg_initialize>
	MDIO_SetPinOutput(PORTB, 6, HIGH);
  44:	82 e0       	ldi	r24, 0x02	; 2
  46:	66 e0       	ldi	r22, 0x06	; 6
  48:	41 e0       	ldi	r20, 0x01	; 1
  4a:	0e 94 00 00 	call	0	; 0x0 <H7Seg_initialize>
	MDIO_SetPinOutput(PORTB, 7, HIGH);
  4e:	82 e0       	ldi	r24, 0x02	; 2
  50:	67 e0       	ldi	r22, 0x07	; 7
  52:	41 e0       	ldi	r20, 0x01	; 1
  54:	0e 94 00 00 	call	0	; 0x0 <H7Seg_initialize>
	return;
}
  58:	0e 94 00 00 	call	0	; 0x0 <H7Seg_initialize>
  5c:	cf 91       	pop	r28
  5e:	df 91       	pop	r29
  60:	08 95       	ret

Disassembly of section .text.H7Seg_display:

00000000 <H7Seg_display>:
#include "../libraries/L_UTILS.h"
#include "../MCAL/MDIO_interface.h"
#include "HSevenSegments_private.h"
#include "HSevenSegments_interface.h"

void H7Seg_clear(void) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <H7Seg_display+0x6>
   6:	0f 92       	push	r0
	MDIO_SetPinOutput(PORTB, 0, HIGH);
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	8b 83       	std	Y+3, r24	; 0x03
   e:	0e 94 00 00 	call	0	; 0x0 <H7Seg_display>
	MDIO_SetPinOutput(PORTB, 1, HIGH);
  12:	1a 82       	std	Y+2, r1	; 0x02
  14:	19 82       	std	Y+1, r1	; 0x01
  16:	00 c0       	rjmp	.+0      	; 0x18 <H7Seg_display+0x18>
  18:	8b 81       	ldd	r24, Y+3	; 0x03
  1a:	88 2f       	mov	r24, r24
	MDIO_SetPinOutput(PORTB, 2, HIGH);
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	29 81       	ldd	r18, Y+1	; 0x01
  20:	3a 81       	ldd	r19, Y+2	; 0x02
  22:	88 0f       	add	r24, r24
  24:	99 1f       	adc	r25, r25
	MDIO_SetPinOutput(PORTB, 3, HIGH);
  26:	88 0f       	add	r24, r24
  28:	99 1f       	adc	r25, r25
  2a:	88 0f       	add	r24, r24
  2c:	99 1f       	adc	r25, r25
  2e:	82 0f       	add	r24, r18
	MDIO_SetPinOutput(PORTB, 4, HIGH);
  30:	93 1f       	adc	r25, r19
  32:	88 0f       	add	r24, r24
  34:	99 1f       	adc	r25, r25
  36:	fc 01       	movw	r30, r24
  38:	e0 50       	subi	r30, 0x00	; 0
	MDIO_SetPinOutput(PORTB, 5, HIGH);
  3a:	f0 40       	sbci	r31, 0x00	; 0
  3c:	80 81       	ld	r24, Z
  3e:	91 81       	ldd	r25, Z+1	; 0x01
  40:	98 2f       	mov	r25, r24
  42:	82 e0       	ldi	r24, 0x02	; 2
	MDIO_SetPinOutput(PORTB, 6, HIGH);
  44:	69 2f       	mov	r22, r25
  46:	40 e0       	ldi	r20, 0x00	; 0
  48:	0e 94 00 00 	call	0	; 0x0 <H7Seg_display>
  4c:	89 81       	ldd	r24, Y+1	; 0x01
	MDIO_SetPinOutput(PORTB, 7, HIGH);
  4e:	9a 81       	ldd	r25, Y+2	; 0x02
  50:	01 96       	adiw	r24, 0x01	; 1
  52:	9a 83       	std	Y+2, r25	; 0x02
  54:	89 83       	std	Y+1, r24	; 0x01
  56:	8b 81       	ldd	r24, Y+3	; 0x03
	return;
}
  58:	88 2f       	mov	r24, r24
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	29 81       	ldd	r18, Y+1	; 0x01
  5e:	3a 81       	ldd	r19, Y+2	; 0x02
  60:	88 0f       	add	r24, r24
  62:	99 1f       	adc	r25, r25
  64:	88 0f       	add	r24, r24
  66:	99 1f       	adc	r25, r25
  68:	88 0f       	add	r24, r24
  6a:	99 1f       	adc	r25, r25
  6c:	82 0f       	add	r24, r18
  6e:	93 1f       	adc	r25, r19
  70:	88 0f       	add	r24, r24
  72:	99 1f       	adc	r25, r25
  74:	fc 01       	movw	r30, r24
  76:	e0 50       	subi	r30, 0x00	; 0
  78:	f0 40       	sbci	r31, 0x00	; 0
  7a:	80 81       	ld	r24, Z
  7c:	91 81       	ldd	r25, Z+1	; 0x01
  7e:	2f ef       	ldi	r18, 0xFF	; 255
  80:	8f 3f       	cpi	r24, 0xFF	; 255
  82:	92 07       	cpc	r25, r18
  84:	01 f4       	brne	.+0      	; 0x86 <H7Seg_display+0x86>
  86:	0f 90       	pop	r0
  88:	0f 90       	pop	r0
  8a:	0f 90       	pop	r0
  8c:	cf 91       	pop	r28
  8e:	df 91       	pop	r29
  90:	08 95       	ret

main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000052  2**0
                  ALLOC
  3 .stab         000009b4  00000000  00000000  00000054  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000010cd  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.main    00000384  00000000  00000000  00001ad5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.countToZeroWithLED 00000154  00000000  00000000  00001e59  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.beepBuzzer 0000011a  00000000  00000000  00001fad  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.main:

00000000 <main>:

void countToZeroWithLED(uint8 ledPort, uint8 pin);
void beepBuzzer(void);


int main(void) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	ae 97       	sbiw	r28, 0x2e	; 46
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
	// TODO
	HLCD_init(HLCD_8_BIT);
  14:	81 e0       	ldi	r24, 0x01	; 1
  16:	0e 94 00 00 	call	0	; 0x0 <main>
	H7Seg_initialize();
  1a:	0e 94 00 00 	call	0	; 0x0 <main>
	addLED(RED_LED);
  1e:	84 e0       	ldi	r24, 0x04	; 4
  20:	63 e0       	ldi	r22, 0x03	; 3
  22:	0e 94 00 00 	call	0	; 0x0 <main>
	addLED(YELLOW_LED);
  26:	84 e0       	ldi	r24, 0x04	; 4
  28:	64 e0       	ldi	r22, 0x04	; 4
  2a:	0e 94 00 00 	call	0	; 0x0 <main>
	addLED(GREEN_LED);
  2e:	84 e0       	ldi	r24, 0x04	; 4
  30:	65 e0       	ldi	r22, 0x05	; 5
  32:	0e 94 00 00 	call	0	; 0x0 <main>

	while(1) {

		countToZeroWithLED(RED_LED);
  36:	84 e0       	ldi	r24, 0x04	; 4
  38:	63 e0       	ldi	r22, 0x03	; 3
  3a:	0e 94 00 00 	call	0	; 0x0 <main>
		beepBuzzer();
  3e:	0e 94 00 00 	call	0	; 0x0 <main>
		countToZeroWithLED(GREEN_LED);
  42:	84 e0       	ldi	r24, 0x04	; 4
  44:	65 e0       	ldi	r22, 0x05	; 5
  46:	0e 94 00 00 	call	0	; 0x0 <main>
		beepBuzzer();
  4a:	0e 94 00 00 	call	0	; 0x0 <main>
		HLCD_clear();
  4e:	0e 94 00 00 	call	0	; 0x0 <main>
		HLCD_setLine(0);
  52:	80 e0       	ldi	r24, 0x00	; 0
  54:	0e 94 00 00 	call	0	; 0x0 <main>
		writeText("I * ITI");
  58:	80 e0       	ldi	r24, 0x00	; 0
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	0e 94 00 00 	call	0	; 0x0 <main>
		for (uint8 i=0; i<16; i++)
  60:	1e a6       	std	Y+46, r1	; 0x2e
  62:	00 c0       	rjmp	.+0      	; 0x64 <main+0x64>
			HLCD_shiftDisplay(SHIFT_LEFT);
  64:	81 e0       	ldi	r24, 0x01	; 1
  66:	0e 94 00 00 	call	0	; 0x0 <main>
		countToZeroWithLED(GREEN_LED);
		beepBuzzer();
		HLCD_clear();
		HLCD_setLine(0);
		writeText("I * ITI");
		for (uint8 i=0; i<16; i++)
  6a:	8e a5       	ldd	r24, Y+46	; 0x2e
  6c:	8f 5f       	subi	r24, 0xFF	; 255
  6e:	8e a7       	std	Y+46, r24	; 0x2e
  70:	8e a5       	ldd	r24, Y+46	; 0x2e
  72:	80 31       	cpi	r24, 0x10	; 16
  74:	00 f0       	brcs	.+0      	; 0x76 <main+0x76>
			HLCD_shiftDisplay(SHIFT_LEFT);
		writeText("Project By");
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	0e 94 00 00 	call	0	; 0x0 <main>
		HLCD_setLine(1);
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	0e 94 00 00 	call	0	; 0x0 <main>
		writeText("Osama Adel");
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 00 00 	call	0	; 0x0 <main>
		for (uint8 i=0; i<16; i++)
  8c:	1d a6       	std	Y+45, r1	; 0x2d
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x90>
			HLCD_shiftDisplay(SHIFT_RIGHT);
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	0e 94 00 00 	call	0	; 0x0 <main>
		for (uint8 i=0; i<16; i++)
			HLCD_shiftDisplay(SHIFT_LEFT);
		writeText("Project By");
		HLCD_setLine(1);
		writeText("Osama Adel");
		for (uint8 i=0; i<16; i++)
  96:	8d a5       	ldd	r24, Y+45	; 0x2d
  98:	8f 5f       	subi	r24, 0xFF	; 255
  9a:	8d a7       	std	Y+45, r24	; 0x2d
  9c:	8d a5       	ldd	r24, Y+45	; 0x2d
  9e:	80 31       	cpi	r24, 0x10	; 16
  a0:	00 f0       	brcs	.+0      	; 0xa2 <main+0xa2>
			HLCD_shiftDisplay(SHIFT_RIGHT);

		for (uint8 i=0; i<16; i++) {
  a2:	1c a6       	std	Y+44, r1	; 0x2c
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0xa6>
			HLCD_shiftDisplay(SHIFT_LEFT);
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 00 00 	call	0	; 0x0 <main>
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	aa ef       	ldi	r26, 0xFA	; 250
  b2:	b3 e4       	ldi	r27, 0x43	; 67
  b4:	8f a3       	std	Y+39, r24	; 0x27
  b6:	98 a7       	std	Y+40, r25	; 0x28
  b8:	a9 a7       	std	Y+41, r26	; 0x29
  ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  bc:	6f a1       	ldd	r22, Y+39	; 0x27
  be:	78 a5       	ldd	r23, Y+40	; 0x28
  c0:	89 a5       	ldd	r24, Y+41	; 0x29
  c2:	9a a5       	ldd	r25, Y+42	; 0x2a
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	4a ef       	ldi	r20, 0xFA	; 250
  ca:	54 e4       	ldi	r21, 0x44	; 68
  cc:	0e 94 00 00 	call	0	; 0x0 <main>
  d0:	dc 01       	movw	r26, r24
  d2:	cb 01       	movw	r24, r22
  d4:	8b a3       	std	Y+35, r24	; 0x23
  d6:	9c a3       	std	Y+36, r25	; 0x24
  d8:	ad a3       	std	Y+37, r26	; 0x25
  da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
  dc:	6b a1       	ldd	r22, Y+35	; 0x23
  de:	7c a1       	ldd	r23, Y+36	; 0x24
  e0:	8d a1       	ldd	r24, Y+37	; 0x25
  e2:	9e a1       	ldd	r25, Y+38	; 0x26
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	40 e8       	ldi	r20, 0x80	; 128
  ea:	5f e3       	ldi	r21, 0x3F	; 63
  ec:	0e 94 00 00 	call	0	; 0x0 <main>
  f0:	88 23       	and	r24, r24
  f2:	04 f4       	brge	.+0      	; 0xf4 <main+0xf4>
		__ticks = 1;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	9a a3       	std	Y+34, r25	; 0x22
  fa:	89 a3       	std	Y+33, r24	; 0x21
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0xfe>
	else if (__tmp > 65535)
  fe:	6b a1       	ldd	r22, Y+35	; 0x23
 100:	7c a1       	ldd	r23, Y+36	; 0x24
 102:	8d a1       	ldd	r24, Y+37	; 0x25
 104:	9e a1       	ldd	r25, Y+38	; 0x26
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	3f ef       	ldi	r19, 0xFF	; 255
 10a:	4f e7       	ldi	r20, 0x7F	; 127
 10c:	57 e4       	ldi	r21, 0x47	; 71
 10e:	0e 94 00 00 	call	0	; 0x0 <main>
 112:	18 16       	cp	r1, r24
 114:	04 f4       	brge	.+0      	; 0x116 <main+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 116:	6f a1       	ldd	r22, Y+39	; 0x27
 118:	78 a5       	ldd	r23, Y+40	; 0x28
 11a:	89 a5       	ldd	r24, Y+41	; 0x29
 11c:	9a a5       	ldd	r25, Y+42	; 0x2a
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	40 e2       	ldi	r20, 0x20	; 32
 124:	51 e4       	ldi	r21, 0x41	; 65
 126:	0e 94 00 00 	call	0	; 0x0 <main>
 12a:	dc 01       	movw	r26, r24
 12c:	cb 01       	movw	r24, r22
 12e:	bc 01       	movw	r22, r24
 130:	cd 01       	movw	r24, r26
 132:	0e 94 00 00 	call	0	; 0x0 <main>
 136:	dc 01       	movw	r26, r24
 138:	cb 01       	movw	r24, r22
 13a:	9a a3       	std	Y+34, r25	; 0x22
 13c:	89 a3       	std	Y+33, r24	; 0x21
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x140>
 140:	88 ec       	ldi	r24, 0xC8	; 200
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	98 a3       	std	Y+32, r25	; 0x20
 146:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 148:	8f 8d       	ldd	r24, Y+31	; 0x1f
 14a:	98 a1       	ldd	r25, Y+32	; 0x20
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	01 f4       	brne	.+0      	; 0x150 <main+0x150>
 150:	98 a3       	std	Y+32, r25	; 0x20
 152:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 154:	89 a1       	ldd	r24, Y+33	; 0x21
 156:	9a a1       	ldd	r25, Y+34	; 0x22
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	9a a3       	std	Y+34, r25	; 0x22
 15c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15e:	89 a1       	ldd	r24, Y+33	; 0x21
 160:	9a a1       	ldd	r25, Y+34	; 0x22
 162:	00 97       	sbiw	r24, 0x00	; 0
 164:	01 f4       	brne	.+0      	; 0x166 <main+0x166>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 168:	6b a1       	ldd	r22, Y+35	; 0x23
 16a:	7c a1       	ldd	r23, Y+36	; 0x24
 16c:	8d a1       	ldd	r24, Y+37	; 0x25
 16e:	9e a1       	ldd	r25, Y+38	; 0x26
 170:	0e 94 00 00 	call	0	; 0x0 <main>
 174:	dc 01       	movw	r26, r24
 176:	cb 01       	movw	r24, r22
 178:	9a a3       	std	Y+34, r25	; 0x22
 17a:	89 a3       	std	Y+33, r24	; 0x21
 17c:	89 a1       	ldd	r24, Y+33	; 0x21
 17e:	9a a1       	ldd	r25, Y+34	; 0x22
 180:	9e 8f       	std	Y+30, r25	; 0x1e
 182:	8d 8f       	std	Y+29, r24	; 0x1d
 184:	8d 8d       	ldd	r24, Y+29	; 0x1d
 186:	9e 8d       	ldd	r25, Y+30	; 0x1e
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	01 f4       	brne	.+0      	; 0x18c <main+0x18c>
 18c:	9e 8f       	std	Y+30, r25	; 0x1e
 18e:	8d 8f       	std	Y+29, r24	; 0x1d
		HLCD_setLine(1);
		writeText("Osama Adel");
		for (uint8 i=0; i<16; i++)
			HLCD_shiftDisplay(SHIFT_RIGHT);

		for (uint8 i=0; i<16; i++) {
 190:	8c a5       	ldd	r24, Y+44	; 0x2c
 192:	8f 5f       	subi	r24, 0xFF	; 255
 194:	8c a7       	std	Y+44, r24	; 0x2c
 196:	8c a5       	ldd	r24, Y+44	; 0x2c
 198:	80 31       	cpi	r24, 0x10	; 16
 19a:	00 f4       	brcc	.+0      	; 0x19c <main+0x19c>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x19e>
			HLCD_shiftDisplay(SHIFT_LEFT);
			_delay_ms(500);
		}// end for
		for (uint8 i=0; i<16; i++) {
 19e:	1b a6       	std	Y+43, r1	; 0x2b
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x1a2>
			HLCD_shiftDisplay(SHIFT_RIGHT);
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 00 00 	call	0	; 0x0 <main>
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	aa ef       	ldi	r26, 0xFA	; 250
 1ae:	b3 e4       	ldi	r27, 0x43	; 67
 1b0:	89 8f       	std	Y+25, r24	; 0x19
 1b2:	9a 8f       	std	Y+26, r25	; 0x1a
 1b4:	ab 8f       	std	Y+27, r26	; 0x1b
 1b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 1b8:	69 8d       	ldd	r22, Y+25	; 0x19
 1ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
 1bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1be:	9c 8d       	ldd	r25, Y+28	; 0x1c
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	4a ef       	ldi	r20, 0xFA	; 250
 1c6:	54 e4       	ldi	r21, 0x44	; 68
 1c8:	0e 94 00 00 	call	0	; 0x0 <main>
 1cc:	dc 01       	movw	r26, r24
 1ce:	cb 01       	movw	r24, r22
 1d0:	8d 8b       	std	Y+21, r24	; 0x15
 1d2:	9e 8b       	std	Y+22, r25	; 0x16
 1d4:	af 8b       	std	Y+23, r26	; 0x17
 1d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 1d8:	6d 89       	ldd	r22, Y+21	; 0x15
 1da:	7e 89       	ldd	r23, Y+22	; 0x16
 1dc:	8f 89       	ldd	r24, Y+23	; 0x17
 1de:	98 8d       	ldd	r25, Y+24	; 0x18
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	40 e8       	ldi	r20, 0x80	; 128
 1e6:	5f e3       	ldi	r21, 0x3F	; 63
 1e8:	0e 94 00 00 	call	0	; 0x0 <main>
 1ec:	88 23       	and	r24, r24
 1ee:	04 f4       	brge	.+0      	; 0x1f0 <main+0x1f0>
		__ticks = 1;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	9c 8b       	std	Y+20, r25	; 0x14
 1f6:	8b 8b       	std	Y+19, r24	; 0x13
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x1fa>
	else if (__tmp > 65535)
 1fa:	6d 89       	ldd	r22, Y+21	; 0x15
 1fc:	7e 89       	ldd	r23, Y+22	; 0x16
 1fe:	8f 89       	ldd	r24, Y+23	; 0x17
 200:	98 8d       	ldd	r25, Y+24	; 0x18
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	3f ef       	ldi	r19, 0xFF	; 255
 206:	4f e7       	ldi	r20, 0x7F	; 127
 208:	57 e4       	ldi	r21, 0x47	; 71
 20a:	0e 94 00 00 	call	0	; 0x0 <main>
 20e:	18 16       	cp	r1, r24
 210:	04 f4       	brge	.+0      	; 0x212 <main+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 212:	69 8d       	ldd	r22, Y+25	; 0x19
 214:	7a 8d       	ldd	r23, Y+26	; 0x1a
 216:	8b 8d       	ldd	r24, Y+27	; 0x1b
 218:	9c 8d       	ldd	r25, Y+28	; 0x1c
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	40 e2       	ldi	r20, 0x20	; 32
 220:	51 e4       	ldi	r21, 0x41	; 65
 222:	0e 94 00 00 	call	0	; 0x0 <main>
 226:	dc 01       	movw	r26, r24
 228:	cb 01       	movw	r24, r22
 22a:	bc 01       	movw	r22, r24
 22c:	cd 01       	movw	r24, r26
 22e:	0e 94 00 00 	call	0	; 0x0 <main>
 232:	dc 01       	movw	r26, r24
 234:	cb 01       	movw	r24, r22
 236:	9c 8b       	std	Y+20, r25	; 0x14
 238:	8b 8b       	std	Y+19, r24	; 0x13
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x23c>
 23c:	88 ec       	ldi	r24, 0xC8	; 200
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	9a 8b       	std	Y+18, r25	; 0x12
 242:	89 8b       	std	Y+17, r24	; 0x11
 244:	89 89       	ldd	r24, Y+17	; 0x11
 246:	9a 89       	ldd	r25, Y+18	; 0x12
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	01 f4       	brne	.+0      	; 0x24c <main+0x24c>
 24c:	9a 8b       	std	Y+18, r25	; 0x12
 24e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 250:	8b 89       	ldd	r24, Y+19	; 0x13
 252:	9c 89       	ldd	r25, Y+20	; 0x14
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	9c 8b       	std	Y+20, r25	; 0x14
 258:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 25a:	8b 89       	ldd	r24, Y+19	; 0x13
 25c:	9c 89       	ldd	r25, Y+20	; 0x14
 25e:	00 97       	sbiw	r24, 0x00	; 0
 260:	01 f4       	brne	.+0      	; 0x262 <main+0x262>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 264:	6d 89       	ldd	r22, Y+21	; 0x15
 266:	7e 89       	ldd	r23, Y+22	; 0x16
 268:	8f 89       	ldd	r24, Y+23	; 0x17
 26a:	98 8d       	ldd	r25, Y+24	; 0x18
 26c:	0e 94 00 00 	call	0	; 0x0 <main>
 270:	dc 01       	movw	r26, r24
 272:	cb 01       	movw	r24, r22
 274:	9c 8b       	std	Y+20, r25	; 0x14
 276:	8b 8b       	std	Y+19, r24	; 0x13
 278:	8b 89       	ldd	r24, Y+19	; 0x13
 27a:	9c 89       	ldd	r25, Y+20	; 0x14
 27c:	98 8b       	std	Y+16, r25	; 0x10
 27e:	8f 87       	std	Y+15, r24	; 0x0f
 280:	8f 85       	ldd	r24, Y+15	; 0x0f
 282:	98 89       	ldd	r25, Y+16	; 0x10
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	01 f4       	brne	.+0      	; 0x288 <main+0x288>
 288:	98 8b       	std	Y+16, r25	; 0x10
 28a:	8f 87       	std	Y+15, r24	; 0x0f

		for (uint8 i=0; i<16; i++) {
			HLCD_shiftDisplay(SHIFT_LEFT);
			_delay_ms(500);
		}// end for
		for (uint8 i=0; i<16; i++) {
 28c:	8b a5       	ldd	r24, Y+43	; 0x2b
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	8b a7       	std	Y+43, r24	; 0x2b
 292:	8b a5       	ldd	r24, Y+43	; 0x2b
 294:	80 31       	cpi	r24, 0x10	; 16
 296:	00 f4       	brcc	.+0      	; 0x298 <main+0x298>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0x29a>
			HLCD_shiftDisplay(SHIFT_RIGHT);
			_delay_ms(500);
		}// end for
		HLCD_clear();
 29a:	0e 94 00 00 	call	0	; 0x0 <main>
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	aa e7       	ldi	r26, 0x7A	; 122
 2a4:	b4 e4       	ldi	r27, 0x44	; 68
 2a6:	8b 87       	std	Y+11, r24	; 0x0b
 2a8:	9c 87       	std	Y+12, r25	; 0x0c
 2aa:	ad 87       	std	Y+13, r26	; 0x0d
 2ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 2ae:	6b 85       	ldd	r22, Y+11	; 0x0b
 2b0:	7c 85       	ldd	r23, Y+12	; 0x0c
 2b2:	8d 85       	ldd	r24, Y+13	; 0x0d
 2b4:	9e 85       	ldd	r25, Y+14	; 0x0e
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	4a ef       	ldi	r20, 0xFA	; 250
 2bc:	54 e4       	ldi	r21, 0x44	; 68
 2be:	0e 94 00 00 	call	0	; 0x0 <main>
 2c2:	dc 01       	movw	r26, r24
 2c4:	cb 01       	movw	r24, r22
 2c6:	8f 83       	std	Y+7, r24	; 0x07
 2c8:	98 87       	std	Y+8, r25	; 0x08
 2ca:	a9 87       	std	Y+9, r26	; 0x09
 2cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 2ce:	6f 81       	ldd	r22, Y+7	; 0x07
 2d0:	78 85       	ldd	r23, Y+8	; 0x08
 2d2:	89 85       	ldd	r24, Y+9	; 0x09
 2d4:	9a 85       	ldd	r25, Y+10	; 0x0a
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	40 e8       	ldi	r20, 0x80	; 128
 2dc:	5f e3       	ldi	r21, 0x3F	; 63
 2de:	0e 94 00 00 	call	0	; 0x0 <main>
 2e2:	88 23       	and	r24, r24
 2e4:	04 f4       	brge	.+0      	; 0x2e6 <main+0x2e6>
		__ticks = 1;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	9e 83       	std	Y+6, r25	; 0x06
 2ec:	8d 83       	std	Y+5, r24	; 0x05
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <main+0x2f0>
	else if (__tmp > 65535)
 2f0:	6f 81       	ldd	r22, Y+7	; 0x07
 2f2:	78 85       	ldd	r23, Y+8	; 0x08
 2f4:	89 85       	ldd	r24, Y+9	; 0x09
 2f6:	9a 85       	ldd	r25, Y+10	; 0x0a
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	3f ef       	ldi	r19, 0xFF	; 255
 2fc:	4f e7       	ldi	r20, 0x7F	; 127
 2fe:	57 e4       	ldi	r21, 0x47	; 71
 300:	0e 94 00 00 	call	0	; 0x0 <main>
 304:	18 16       	cp	r1, r24
 306:	04 f4       	brge	.+0      	; 0x308 <main+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 308:	6b 85       	ldd	r22, Y+11	; 0x0b
 30a:	7c 85       	ldd	r23, Y+12	; 0x0c
 30c:	8d 85       	ldd	r24, Y+13	; 0x0d
 30e:	9e 85       	ldd	r25, Y+14	; 0x0e
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	40 e2       	ldi	r20, 0x20	; 32
 316:	51 e4       	ldi	r21, 0x41	; 65
 318:	0e 94 00 00 	call	0	; 0x0 <main>
 31c:	dc 01       	movw	r26, r24
 31e:	cb 01       	movw	r24, r22
 320:	bc 01       	movw	r22, r24
 322:	cd 01       	movw	r24, r26
 324:	0e 94 00 00 	call	0	; 0x0 <main>
 328:	dc 01       	movw	r26, r24
 32a:	cb 01       	movw	r24, r22
 32c:	9e 83       	std	Y+6, r25	; 0x06
 32e:	8d 83       	std	Y+5, r24	; 0x05
 330:	00 c0       	rjmp	.+0      	; 0x332 <main+0x332>
 332:	88 ec       	ldi	r24, 0xC8	; 200
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	9c 83       	std	Y+4, r25	; 0x04
 338:	8b 83       	std	Y+3, r24	; 0x03
 33a:	8b 81       	ldd	r24, Y+3	; 0x03
 33c:	9c 81       	ldd	r25, Y+4	; 0x04
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	01 f4       	brne	.+0      	; 0x342 <main+0x342>
 342:	9c 83       	std	Y+4, r25	; 0x04
 344:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 346:	8d 81       	ldd	r24, Y+5	; 0x05
 348:	9e 81       	ldd	r25, Y+6	; 0x06
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	9e 83       	std	Y+6, r25	; 0x06
 34e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 350:	8d 81       	ldd	r24, Y+5	; 0x05
 352:	9e 81       	ldd	r25, Y+6	; 0x06
 354:	00 97       	sbiw	r24, 0x00	; 0
 356:	01 f4       	brne	.+0      	; 0x358 <main+0x358>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 35a:	6f 81       	ldd	r22, Y+7	; 0x07
 35c:	78 85       	ldd	r23, Y+8	; 0x08
 35e:	89 85       	ldd	r24, Y+9	; 0x09
 360:	9a 85       	ldd	r25, Y+10	; 0x0a
 362:	0e 94 00 00 	call	0	; 0x0 <main>
 366:	dc 01       	movw	r26, r24
 368:	cb 01       	movw	r24, r22
 36a:	9e 83       	std	Y+6, r25	; 0x06
 36c:	8d 83       	std	Y+5, r24	; 0x05
 36e:	8d 81       	ldd	r24, Y+5	; 0x05
 370:	9e 81       	ldd	r25, Y+6	; 0x06
 372:	9a 83       	std	Y+2, r25	; 0x02
 374:	89 83       	std	Y+1, r24	; 0x01
 376:	89 81       	ldd	r24, Y+1	; 0x01
 378:	9a 81       	ldd	r25, Y+2	; 0x02
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	01 f4       	brne	.+0      	; 0x37e <main+0x37e>
 37e:	9a 83       	std	Y+2, r25	; 0x02
 380:	89 83       	std	Y+1, r24	; 0x01
 382:	00 c0       	rjmp	.+0      	; 0x384 <__SREG__+0x345>

Disassembly of section .text.countToZeroWithLED:

00000000 <countToZeroWithLED>:

void countToZeroWithLED(uint8 ledPort, uint8 pin);
void beepBuzzer(void);


int main(void) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	61 97       	sbiw	r28, 0x11	; 17
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
	// TODO
	HLCD_init(HLCD_8_BIT);
  14:	88 8b       	std	Y+16, r24	; 0x10
  16:	69 8b       	std	Y+17, r22	; 0x11
  18:	84 e0       	ldi	r24, 0x04	; 4
	H7Seg_initialize();
  1a:	65 e0       	ldi	r22, 0x05	; 5
  1c:	0e 94 00 00 	call	0	; 0x0 <countToZeroWithLED>
	addLED(RED_LED);
  20:	84 e0       	ldi	r24, 0x04	; 4
  22:	64 e0       	ldi	r22, 0x04	; 4
  24:	0e 94 00 00 	call	0	; 0x0 <countToZeroWithLED>
	addLED(YELLOW_LED);
  28:	84 e0       	ldi	r24, 0x04	; 4
  2a:	63 e0       	ldi	r22, 0x03	; 3
  2c:	0e 94 00 00 	call	0	; 0x0 <countToZeroWithLED>
	addLED(GREEN_LED);
  30:	88 89       	ldd	r24, Y+16	; 0x10
  32:	69 89       	ldd	r22, Y+17	; 0x11
  34:	0e 94 00 00 	call	0	; 0x0 <countToZeroWithLED>

	while(1) {

		countToZeroWithLED(RED_LED);
  38:	1f 86       	std	Y+15, r1	; 0x0f
  3a:	00 c0       	rjmp	.+0      	; 0x3c <countToZeroWithLED+0x3c>
  3c:	8f 85       	ldd	r24, Y+15	; 0x0f
		beepBuzzer();
  3e:	0e 94 00 00 	call	0	; 0x0 <countToZeroWithLED>
		countToZeroWithLED(GREEN_LED);
  42:	80 e0       	ldi	r24, 0x00	; 0
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	aa e7       	ldi	r26, 0x7A	; 122
  48:	b4 e4       	ldi	r27, 0x44	; 68
		beepBuzzer();
  4a:	8b 87       	std	Y+11, r24	; 0x0b
  4c:	9c 87       	std	Y+12, r25	; 0x0c
		HLCD_clear();
  4e:	ad 87       	std	Y+13, r26	; 0x0d
  50:	be 87       	std	Y+14, r27	; 0x0e
		HLCD_setLine(0);
  52:	6b 85       	ldd	r22, Y+11	; 0x0b
  54:	7c 85       	ldd	r23, Y+12	; 0x0c
  56:	8d 85       	ldd	r24, Y+13	; 0x0d
		writeText("I * ITI");
  58:	9e 85       	ldd	r25, Y+14	; 0x0e
  5a:	20 e0       	ldi	r18, 0x00	; 0
  5c:	30 e0       	ldi	r19, 0x00	; 0
  5e:	4a ef       	ldi	r20, 0xFA	; 250
		for (uint8 i=0; i<16; i++)
  60:	54 e4       	ldi	r21, 0x44	; 68
  62:	0e 94 00 00 	call	0	; 0x0 <countToZeroWithLED>
			HLCD_shiftDisplay(SHIFT_LEFT);
  66:	dc 01       	movw	r26, r24
  68:	cb 01       	movw	r24, r22
		countToZeroWithLED(GREEN_LED);
		beepBuzzer();
		HLCD_clear();
		HLCD_setLine(0);
		writeText("I * ITI");
		for (uint8 i=0; i<16; i++)
  6a:	8f 83       	std	Y+7, r24	; 0x07
  6c:	98 87       	std	Y+8, r25	; 0x08
  6e:	a9 87       	std	Y+9, r26	; 0x09
  70:	ba 87       	std	Y+10, r27	; 0x0a
  72:	6f 81       	ldd	r22, Y+7	; 0x07
  74:	78 85       	ldd	r23, Y+8	; 0x08
			HLCD_shiftDisplay(SHIFT_LEFT);
		writeText("Project By");
  76:	89 85       	ldd	r24, Y+9	; 0x09
  78:	9a 85       	ldd	r25, Y+10	; 0x0a
  7a:	20 e0       	ldi	r18, 0x00	; 0
  7c:	30 e0       	ldi	r19, 0x00	; 0
		HLCD_setLine(1);
  7e:	40 e8       	ldi	r20, 0x80	; 128
  80:	5f e3       	ldi	r21, 0x3F	; 63
  82:	0e 94 00 00 	call	0	; 0x0 <countToZeroWithLED>
		writeText("Osama Adel");
  86:	88 23       	and	r24, r24
  88:	04 f4       	brge	.+0      	; 0x8a <countToZeroWithLED+0x8a>
  8a:	81 e0       	ldi	r24, 0x01	; 1
		for (uint8 i=0; i<16; i++)
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	9e 83       	std	Y+6, r25	; 0x06
			HLCD_shiftDisplay(SHIFT_RIGHT);
  90:	8d 83       	std	Y+5, r24	; 0x05
  92:	00 c0       	rjmp	.+0      	; 0x94 <countToZeroWithLED+0x94>
  94:	6f 81       	ldd	r22, Y+7	; 0x07
		for (uint8 i=0; i<16; i++)
			HLCD_shiftDisplay(SHIFT_LEFT);
		writeText("Project By");
		HLCD_setLine(1);
		writeText("Osama Adel");
		for (uint8 i=0; i<16; i++)
  96:	78 85       	ldd	r23, Y+8	; 0x08
  98:	89 85       	ldd	r24, Y+9	; 0x09
  9a:	9a 85       	ldd	r25, Y+10	; 0x0a
  9c:	20 e0       	ldi	r18, 0x00	; 0
  9e:	3f ef       	ldi	r19, 0xFF	; 255
  a0:	4f e7       	ldi	r20, 0x7F	; 127
			HLCD_shiftDisplay(SHIFT_RIGHT);

		for (uint8 i=0; i<16; i++) {
  a2:	57 e4       	ldi	r21, 0x47	; 71
  a4:	0e 94 00 00 	call	0	; 0x0 <countToZeroWithLED>
			HLCD_shiftDisplay(SHIFT_LEFT);
  a8:	18 16       	cp	r1, r24
  aa:	04 f4       	brge	.+0      	; 0xac <countToZeroWithLED+0xac>
  ac:	6b 85       	ldd	r22, Y+11	; 0x0b
  ae:	7c 85       	ldd	r23, Y+12	; 0x0c
  b0:	8d 85       	ldd	r24, Y+13	; 0x0d
  b2:	9e 85       	ldd	r25, Y+14	; 0x0e
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	40 e2       	ldi	r20, 0x20	; 32
  ba:	51 e4       	ldi	r21, 0x41	; 65
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  bc:	0e 94 00 00 	call	0	; 0x0 <countToZeroWithLED>
  c0:	dc 01       	movw	r26, r24
  c2:	cb 01       	movw	r24, r22
  c4:	bc 01       	movw	r22, r24
  c6:	cd 01       	movw	r24, r26
  c8:	0e 94 00 00 	call	0	; 0x0 <countToZeroWithLED>
  cc:	dc 01       	movw	r26, r24
  ce:	cb 01       	movw	r24, r22
  d0:	9e 83       	std	Y+6, r25	; 0x06
  d2:	8d 83       	std	Y+5, r24	; 0x05
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <countToZeroWithLED+0xd6>
  d6:	88 ec       	ldi	r24, 0xC8	; 200
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
  dc:	8b 83       	std	Y+3, r24	; 0x03
  de:	8b 81       	ldd	r24, Y+3	; 0x03
  e0:	9c 81       	ldd	r25, Y+4	; 0x04
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	01 f4       	brne	.+0      	; 0xe6 <countToZeroWithLED+0xe6>
  e6:	9c 83       	std	Y+4, r25	; 0x04
  e8:	8b 83       	std	Y+3, r24	; 0x03
  ea:	8d 81       	ldd	r24, Y+5	; 0x05
  ec:	9e 81       	ldd	r25, Y+6	; 0x06
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	9e 83       	std	Y+6, r25	; 0x06
  f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
  f4:	8d 81       	ldd	r24, Y+5	; 0x05
  f6:	9e 81       	ldd	r25, Y+6	; 0x06
  f8:	00 97       	sbiw	r24, 0x00	; 0
  fa:	01 f4       	brne	.+0      	; 0xfc <countToZeroWithLED+0xfc>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <countToZeroWithLED+0xfe>
	else if (__tmp > 65535)
  fe:	6f 81       	ldd	r22, Y+7	; 0x07
 100:	78 85       	ldd	r23, Y+8	; 0x08
 102:	89 85       	ldd	r24, Y+9	; 0x09
 104:	9a 85       	ldd	r25, Y+10	; 0x0a
 106:	0e 94 00 00 	call	0	; 0x0 <countToZeroWithLED>
 10a:	dc 01       	movw	r26, r24
 10c:	cb 01       	movw	r24, r22
 10e:	9e 83       	std	Y+6, r25	; 0x06
 110:	8d 83       	std	Y+5, r24	; 0x05
 112:	8d 81       	ldd	r24, Y+5	; 0x05
 114:	9e 81       	ldd	r25, Y+6	; 0x06
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 116:	9a 83       	std	Y+2, r25	; 0x02
 118:	89 83       	std	Y+1, r24	; 0x01
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	9a 81       	ldd	r25, Y+2	; 0x02
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	01 f4       	brne	.+0      	; 0x122 <countToZeroWithLED+0x122>
 122:	9a 83       	std	Y+2, r25	; 0x02
 124:	89 83       	std	Y+1, r24	; 0x01
 126:	8f 85       	ldd	r24, Y+15	; 0x0f
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	00 f4       	brcc	.+0      	; 0x12c <countToZeroWithLED+0x12c>
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	64 e0       	ldi	r22, 0x04	; 4
 130:	0e 94 00 00 	call	0	; 0x0 <countToZeroWithLED>
 134:	8f 85       	ldd	r24, Y+15	; 0x0f
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	8f 87       	std	Y+15, r24	; 0x0f
 13a:	8f 85       	ldd	r24, Y+15	; 0x0f
 13c:	8a 30       	cpi	r24, 0x0A	; 10
 13e:	00 f4       	brcc	.+0      	; 0x140 <countToZeroWithLED+0x140>
 140:	00 c0       	rjmp	.+0      	; 0x142 <countToZeroWithLED+0x142>
 142:	61 96       	adiw	r28, 0x11	; 17
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
 14e:	cf 91       	pop	r28
 150:	df 91       	pop	r29
 152:	08 95       	ret

Disassembly of section .text.beepBuzzer:

00000000 <beepBuzzer>:

void countToZeroWithLED(uint8 ledPort, uint8 pin);
void beepBuzzer(void);


int main(void) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2e 97       	sbiw	r28, 0x0e	; 14
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
	// TODO
	HLCD_init(HLCD_8_BIT);
  14:	84 e0       	ldi	r24, 0x04	; 4
  16:	66 e0       	ldi	r22, 0x06	; 6
  18:	0e 94 00 00 	call	0	; 0x0 <beepBuzzer>
	H7Seg_initialize();
  1c:	80 e0       	ldi	r24, 0x00	; 0
	addLED(RED_LED);
  1e:	90 e0       	ldi	r25, 0x00	; 0
  20:	aa e7       	ldi	r26, 0x7A	; 122
  22:	b4 e4       	ldi	r27, 0x44	; 68
  24:	8b 87       	std	Y+11, r24	; 0x0b
	addLED(YELLOW_LED);
  26:	9c 87       	std	Y+12, r25	; 0x0c
  28:	ad 87       	std	Y+13, r26	; 0x0d
  2a:	be 87       	std	Y+14, r27	; 0x0e
  2c:	6b 85       	ldd	r22, Y+11	; 0x0b
	addLED(GREEN_LED);
  2e:	7c 85       	ldd	r23, Y+12	; 0x0c
  30:	8d 85       	ldd	r24, Y+13	; 0x0d
  32:	9e 85       	ldd	r25, Y+14	; 0x0e
  34:	20 e0       	ldi	r18, 0x00	; 0

	while(1) {

		countToZeroWithLED(RED_LED);
  36:	30 e0       	ldi	r19, 0x00	; 0
  38:	4a ef       	ldi	r20, 0xFA	; 250
  3a:	54 e4       	ldi	r21, 0x44	; 68
  3c:	0e 94 00 00 	call	0	; 0x0 <beepBuzzer>
		beepBuzzer();
  40:	dc 01       	movw	r26, r24
		countToZeroWithLED(GREEN_LED);
  42:	cb 01       	movw	r24, r22
  44:	8f 83       	std	Y+7, r24	; 0x07
  46:	98 87       	std	Y+8, r25	; 0x08
  48:	a9 87       	std	Y+9, r26	; 0x09
		beepBuzzer();
  4a:	ba 87       	std	Y+10, r27	; 0x0a
  4c:	6f 81       	ldd	r22, Y+7	; 0x07
		HLCD_clear();
  4e:	78 85       	ldd	r23, Y+8	; 0x08
  50:	89 85       	ldd	r24, Y+9	; 0x09
		HLCD_setLine(0);
  52:	9a 85       	ldd	r25, Y+10	; 0x0a
  54:	20 e0       	ldi	r18, 0x00	; 0
  56:	30 e0       	ldi	r19, 0x00	; 0
		writeText("I * ITI");
  58:	40 e8       	ldi	r20, 0x80	; 128
  5a:	5f e3       	ldi	r21, 0x3F	; 63
  5c:	0e 94 00 00 	call	0	; 0x0 <beepBuzzer>
		for (uint8 i=0; i<16; i++)
  60:	88 23       	and	r24, r24
  62:	04 f4       	brge	.+0      	; 0x64 <beepBuzzer+0x64>
			HLCD_shiftDisplay(SHIFT_LEFT);
  64:	81 e0       	ldi	r24, 0x01	; 1
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	9e 83       	std	Y+6, r25	; 0x06
		countToZeroWithLED(GREEN_LED);
		beepBuzzer();
		HLCD_clear();
		HLCD_setLine(0);
		writeText("I * ITI");
		for (uint8 i=0; i<16; i++)
  6a:	8d 83       	std	Y+5, r24	; 0x05
  6c:	00 c0       	rjmp	.+0      	; 0x6e <beepBuzzer+0x6e>
  6e:	6f 81       	ldd	r22, Y+7	; 0x07
  70:	78 85       	ldd	r23, Y+8	; 0x08
  72:	89 85       	ldd	r24, Y+9	; 0x09
  74:	9a 85       	ldd	r25, Y+10	; 0x0a
			HLCD_shiftDisplay(SHIFT_LEFT);
		writeText("Project By");
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	3f ef       	ldi	r19, 0xFF	; 255
  7a:	4f e7       	ldi	r20, 0x7F	; 127
  7c:	57 e4       	ldi	r21, 0x47	; 71
		HLCD_setLine(1);
  7e:	0e 94 00 00 	call	0	; 0x0 <beepBuzzer>
  82:	18 16       	cp	r1, r24
		writeText("Osama Adel");
  84:	04 f4       	brge	.+0      	; 0x86 <beepBuzzer+0x86>
  86:	6b 85       	ldd	r22, Y+11	; 0x0b
  88:	7c 85       	ldd	r23, Y+12	; 0x0c
  8a:	8d 85       	ldd	r24, Y+13	; 0x0d
		for (uint8 i=0; i<16; i++)
  8c:	9e 85       	ldd	r25, Y+14	; 0x0e
  8e:	20 e0       	ldi	r18, 0x00	; 0
			HLCD_shiftDisplay(SHIFT_RIGHT);
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	40 e2       	ldi	r20, 0x20	; 32
  94:	51 e4       	ldi	r21, 0x41	; 65
		for (uint8 i=0; i<16; i++)
			HLCD_shiftDisplay(SHIFT_LEFT);
		writeText("Project By");
		HLCD_setLine(1);
		writeText("Osama Adel");
		for (uint8 i=0; i<16; i++)
  96:	0e 94 00 00 	call	0	; 0x0 <beepBuzzer>
  9a:	dc 01       	movw	r26, r24
  9c:	cb 01       	movw	r24, r22
  9e:	bc 01       	movw	r22, r24
  a0:	cd 01       	movw	r24, r26
			HLCD_shiftDisplay(SHIFT_RIGHT);

		for (uint8 i=0; i<16; i++) {
  a2:	0e 94 00 00 	call	0	; 0x0 <beepBuzzer>
			HLCD_shiftDisplay(SHIFT_LEFT);
  a6:	dc 01       	movw	r26, r24
  a8:	cb 01       	movw	r24, r22
  aa:	9e 83       	std	Y+6, r25	; 0x06
  ac:	8d 83       	std	Y+5, r24	; 0x05
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <beepBuzzer+0xb0>
  b0:	88 ec       	ldi	r24, 0xC8	; 200
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	9c 83       	std	Y+4, r25	; 0x04
  b6:	8b 83       	std	Y+3, r24	; 0x03
  b8:	8b 81       	ldd	r24, Y+3	; 0x03
  ba:	9c 81       	ldd	r25, Y+4	; 0x04
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	01 f4       	brne	.+0      	; 0xc0 <beepBuzzer+0xc0>
  c0:	9c 83       	std	Y+4, r25	; 0x04
  c2:	8b 83       	std	Y+3, r24	; 0x03
  c4:	8d 81       	ldd	r24, Y+5	; 0x05
  c6:	9e 81       	ldd	r25, Y+6	; 0x06
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	9e 83       	std	Y+6, r25	; 0x06
  cc:	8d 83       	std	Y+5, r24	; 0x05
  ce:	8d 81       	ldd	r24, Y+5	; 0x05
  d0:	9e 81       	ldd	r25, Y+6	; 0x06
  d2:	00 97       	sbiw	r24, 0x00	; 0
  d4:	01 f4       	brne	.+0      	; 0xd6 <beepBuzzer+0xd6>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <beepBuzzer+0xd8>
  d8:	6f 81       	ldd	r22, Y+7	; 0x07
  da:	78 85       	ldd	r23, Y+8	; 0x08
	if (__tmp < 1.0)
  dc:	89 85       	ldd	r24, Y+9	; 0x09
  de:	9a 85       	ldd	r25, Y+10	; 0x0a
  e0:	0e 94 00 00 	call	0	; 0x0 <beepBuzzer>
  e4:	dc 01       	movw	r26, r24
  e6:	cb 01       	movw	r24, r22
  e8:	9e 83       	std	Y+6, r25	; 0x06
  ea:	8d 83       	std	Y+5, r24	; 0x05
  ec:	8d 81       	ldd	r24, Y+5	; 0x05
  ee:	9e 81       	ldd	r25, Y+6	; 0x06
  f0:	9a 83       	std	Y+2, r25	; 0x02
  f2:	89 83       	std	Y+1, r24	; 0x01
		__ticks = 1;
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	9a 81       	ldd	r25, Y+2	; 0x02
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	01 f4       	brne	.+0      	; 0xfc <beepBuzzer+0xfc>
  fc:	9a 83       	std	Y+2, r25	; 0x02
	else if (__tmp > 65535)
  fe:	89 83       	std	Y+1, r24	; 0x01
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	66 e0       	ldi	r22, 0x06	; 6
 104:	0e 94 00 00 	call	0	; 0x0 <beepBuzzer>
 108:	2e 96       	adiw	r28, 0x0e	; 14
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	cd bf       	out	0x3d, r28	; 61
 114:	cf 91       	pop	r28
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 116:	df 91       	pop	r29
 118:	08 95       	ret
