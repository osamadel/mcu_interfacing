
MDIO_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000564  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000003d9  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 2d 03 	call	0x65a	; 0x65a <main>
  64:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <MDIO_SetPinDirection>:
#include "L_STD_TYPES.h"
#include "L_UTILS.h"
#include "MDIO_private.h"
#include "MDIO_interface.h"

void MDIO_SetPinDirection (uint_8 port, uint_8 bitNum, uint_8 status) {
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2d 97       	sbiw	r28, 0x0d	; 13
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	89 83       	std	Y+1, r24	; 0x01
  82:	6a 83       	std	Y+2, r22	; 0x02
  84:	4b 83       	std	Y+3, r20	; 0x03
    // TODO: switch on port
	switch (port) {
  86:	89 81       	ldd	r24, Y+1	; 0x01
  88:	28 2f       	mov	r18, r24
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	3d 87       	std	Y+13, r19	; 0x0d
  8e:	2c 87       	std	Y+12, r18	; 0x0c
  90:	8c 85       	ldd	r24, Y+12	; 0x0c
  92:	9d 85       	ldd	r25, Y+13	; 0x0d
  94:	82 30       	cpi	r24, 0x02	; 2
  96:	91 05       	cpc	r25, r1
  98:	09 f4       	brne	.+2      	; 0x9c <MDIO_SetPinDirection+0x30>
  9a:	7d c0       	rjmp	.+250    	; 0x196 <MDIO_SetPinDirection+0x12a>
  9c:	2c 85       	ldd	r18, Y+12	; 0x0c
  9e:	3d 85       	ldd	r19, Y+13	; 0x0d
  a0:	23 30       	cpi	r18, 0x03	; 3
  a2:	31 05       	cpc	r19, r1
  a4:	34 f4       	brge	.+12     	; 0xb2 <MDIO_SetPinDirection+0x46>
  a6:	8c 85       	ldd	r24, Y+12	; 0x0c
  a8:	9d 85       	ldd	r25, Y+13	; 0x0d
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	91 05       	cpc	r25, r1
  ae:	71 f0       	breq	.+28     	; 0xcc <MDIO_SetPinDirection+0x60>
  b0:	a0 c1       	rjmp	.+832    	; 0x3f2 <MDIO_SetPinDirection+0x386>
  b2:	2c 85       	ldd	r18, Y+12	; 0x0c
  b4:	3d 85       	ldd	r19, Y+13	; 0x0d
  b6:	23 30       	cpi	r18, 0x03	; 3
  b8:	31 05       	cpc	r19, r1
  ba:	09 f4       	brne	.+2      	; 0xbe <MDIO_SetPinDirection+0x52>
  bc:	d1 c0       	rjmp	.+418    	; 0x260 <MDIO_SetPinDirection+0x1f4>
  be:	8c 85       	ldd	r24, Y+12	; 0x0c
  c0:	9d 85       	ldd	r25, Y+13	; 0x0d
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	91 05       	cpc	r25, r1
  c6:	09 f4       	brne	.+2      	; 0xca <MDIO_SetPinDirection+0x5e>
  c8:	30 c1       	rjmp	.+608    	; 0x32a <MDIO_SetPinDirection+0x2be>
  ca:	93 c1       	rjmp	.+806    	; 0x3f2 <MDIO_SetPinDirection+0x386>
	// ********************* PORTA ****************************
	case PORTA:
		switch (status) {
  cc:	8b 81       	ldd	r24, Y+3	; 0x03
  ce:	28 2f       	mov	r18, r24
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	3b 87       	std	Y+11, r19	; 0x0b
  d4:	2a 87       	std	Y+10, r18	; 0x0a
  d6:	8a 85       	ldd	r24, Y+10	; 0x0a
  d8:	9b 85       	ldd	r25, Y+11	; 0x0b
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	91 05       	cpc	r25, r1
  de:	f9 f0       	breq	.+62     	; 0x11e <MDIO_SetPinDirection+0xb2>
  e0:	2a 85       	ldd	r18, Y+10	; 0x0a
  e2:	3b 85       	ldd	r19, Y+11	; 0x0b
  e4:	23 30       	cpi	r18, 0x03	; 3
  e6:	31 05       	cpc	r19, r1
  e8:	79 f1       	breq	.+94     	; 0x148 <MDIO_SetPinDirection+0xdc>
  ea:	8a 85       	ldd	r24, Y+10	; 0x0a
  ec:	9b 85       	ldd	r25, Y+11	; 0x0b
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 05       	cpc	r25, r1
  f2:	09 f0       	breq	.+2      	; 0xf6 <MDIO_SetPinDirection+0x8a>
  f4:	7e c1       	rjmp	.+764    	; 0x3f2 <MDIO_SetPinDirection+0x386>
		case OUTPUT:
			SET_BIT(MDIO_DDRA, bitNum);				// set DDRA bitNum to 1
  f6:	aa e3       	ldi	r26, 0x3A	; 58
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	ea e3       	ldi	r30, 0x3A	; 58
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	48 2f       	mov	r20, r24
 102:	8a 81       	ldd	r24, Y+2	; 0x02
 104:	28 2f       	mov	r18, r24
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 2e       	mov	r0, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <MDIO_SetPinDirection+0xa8>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <MDIO_SetPinDirection+0xa4>
 118:	84 2b       	or	r24, r20
 11a:	8c 93       	st	X, r24
 11c:	6a c1       	rjmp	.+724    	; 0x3f2 <MDIO_SetPinDirection+0x386>
			break;
		case INPUT_FLOAT:
			CLR_BIT(MDIO_DDRA, bitNum);				// set DDRA bitNum to 0
 11e:	aa e3       	ldi	r26, 0x3A	; 58
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	ea e3       	ldi	r30, 0x3A	; 58
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	48 2f       	mov	r20, r24
 12a:	8a 81       	ldd	r24, Y+2	; 0x02
 12c:	28 2f       	mov	r18, r24
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 2e       	mov	r0, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <MDIO_SetPinDirection+0xd0>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	0a 94       	dec	r0
 13e:	e2 f7       	brpl	.-8      	; 0x138 <MDIO_SetPinDirection+0xcc>
 140:	80 95       	com	r24
 142:	84 23       	and	r24, r20
 144:	8c 93       	st	X, r24
 146:	55 c1       	rjmp	.+682    	; 0x3f2 <MDIO_SetPinDirection+0x386>
			break;
		case INPUT_PULLUP:
			CLR_BIT(MDIO_DDRA, bitNum);				// set DDRA bitNum to 0
 148:	aa e3       	ldi	r26, 0x3A	; 58
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	ea e3       	ldi	r30, 0x3A	; 58
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	48 2f       	mov	r20, r24
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	28 2f       	mov	r18, r24
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <MDIO_SetPinDirection+0xf8>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	2a 95       	dec	r18
 166:	e2 f7       	brpl	.-8      	; 0x160 <MDIO_SetPinDirection+0xf4>
 168:	80 95       	com	r24
 16a:	84 23       	and	r24, r20
 16c:	8c 93       	st	X, r24
			SET_BIT(MDIO_PORTA, bitNum);			// set PORTA bitNum to 1
 16e:	ab e3       	ldi	r26, 0x3B	; 59
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	eb e3       	ldi	r30, 0x3B	; 59
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	48 2f       	mov	r20, r24
 17a:	8a 81       	ldd	r24, Y+2	; 0x02
 17c:	28 2f       	mov	r18, r24
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 2e       	mov	r0, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <MDIO_SetPinDirection+0x120>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <MDIO_SetPinDirection+0x11c>
 190:	84 2b       	or	r24, r20
 192:	8c 93       	st	X, r24
 194:	2e c1       	rjmp	.+604    	; 0x3f2 <MDIO_SetPinDirection+0x386>
			break;
		} // end switch(status)
		break;
	// ********************* PORTB ****************************
	case PORTB:
		switch (status) {
 196:	8b 81       	ldd	r24, Y+3	; 0x03
 198:	28 2f       	mov	r18, r24
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	39 87       	std	Y+9, r19	; 0x09
 19e:	28 87       	std	Y+8, r18	; 0x08
 1a0:	88 85       	ldd	r24, Y+8	; 0x08
 1a2:	99 85       	ldd	r25, Y+9	; 0x09
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	91 05       	cpc	r25, r1
 1a8:	f9 f0       	breq	.+62     	; 0x1e8 <MDIO_SetPinDirection+0x17c>
 1aa:	28 85       	ldd	r18, Y+8	; 0x08
 1ac:	39 85       	ldd	r19, Y+9	; 0x09
 1ae:	23 30       	cpi	r18, 0x03	; 3
 1b0:	31 05       	cpc	r19, r1
 1b2:	79 f1       	breq	.+94     	; 0x212 <MDIO_SetPinDirection+0x1a6>
 1b4:	88 85       	ldd	r24, Y+8	; 0x08
 1b6:	99 85       	ldd	r25, Y+9	; 0x09
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	91 05       	cpc	r25, r1
 1bc:	09 f0       	breq	.+2      	; 0x1c0 <MDIO_SetPinDirection+0x154>
 1be:	19 c1       	rjmp	.+562    	; 0x3f2 <MDIO_SetPinDirection+0x386>
		case OUTPUT:
			SET_BIT(MDIO_DDRB, bitNum);				// set DDRB bitNum to 1
 1c0:	a7 e3       	ldi	r26, 0x37	; 55
 1c2:	b0 e0       	ldi	r27, 0x00	; 0
 1c4:	e7 e3       	ldi	r30, 0x37	; 55
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	48 2f       	mov	r20, r24
 1cc:	8a 81       	ldd	r24, Y+2	; 0x02
 1ce:	28 2f       	mov	r18, r24
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 2e       	mov	r0, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <MDIO_SetPinDirection+0x172>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	0a 94       	dec	r0
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <MDIO_SetPinDirection+0x16e>
 1e2:	84 2b       	or	r24, r20
 1e4:	8c 93       	st	X, r24
 1e6:	05 c1       	rjmp	.+522    	; 0x3f2 <MDIO_SetPinDirection+0x386>
			break;
		case INPUT_FLOAT:
			CLR_BIT(MDIO_DDRB, bitNum);				// set DDRB bitNum to 0
 1e8:	a7 e3       	ldi	r26, 0x37	; 55
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	e7 e3       	ldi	r30, 0x37	; 55
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	48 2f       	mov	r20, r24
 1f4:	8a 81       	ldd	r24, Y+2	; 0x02
 1f6:	28 2f       	mov	r18, r24
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 2e       	mov	r0, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <MDIO_SetPinDirection+0x19a>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <MDIO_SetPinDirection+0x196>
 20a:	80 95       	com	r24
 20c:	84 23       	and	r24, r20
 20e:	8c 93       	st	X, r24
 210:	f0 c0       	rjmp	.+480    	; 0x3f2 <MDIO_SetPinDirection+0x386>
			break;
		case INPUT_PULLUP:
			CLR_BIT(MDIO_DDRB, bitNum);				// set DDRB bitNum to 0
 212:	a7 e3       	ldi	r26, 0x37	; 55
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	e7 e3       	ldi	r30, 0x37	; 55
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	48 2f       	mov	r20, r24
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <MDIO_SetPinDirection+0x1c2>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	2a 95       	dec	r18
 230:	e2 f7       	brpl	.-8      	; 0x22a <MDIO_SetPinDirection+0x1be>
 232:	80 95       	com	r24
 234:	84 23       	and	r24, r20
 236:	8c 93       	st	X, r24
			SET_BIT(MDIO_PORTB, bitNum);			// set PORTB bitNum to 1
 238:	a8 e3       	ldi	r26, 0x38	; 56
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	e8 e3       	ldi	r30, 0x38	; 56
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	48 2f       	mov	r20, r24
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	28 2f       	mov	r18, r24
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 2e       	mov	r0, r18
 250:	02 c0       	rjmp	.+4      	; 0x256 <MDIO_SetPinDirection+0x1ea>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <MDIO_SetPinDirection+0x1e6>
 25a:	84 2b       	or	r24, r20
 25c:	8c 93       	st	X, r24
 25e:	c9 c0       	rjmp	.+402    	; 0x3f2 <MDIO_SetPinDirection+0x386>
			break;
		} // end switch(status)
		break;
	// ********************* PORTC ****************************
	case PORTC:
		switch (status) {
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	3f 83       	std	Y+7, r19	; 0x07
 268:	2e 83       	std	Y+6, r18	; 0x06
 26a:	8e 81       	ldd	r24, Y+6	; 0x06
 26c:	9f 81       	ldd	r25, Y+7	; 0x07
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	91 05       	cpc	r25, r1
 272:	f9 f0       	breq	.+62     	; 0x2b2 <MDIO_SetPinDirection+0x246>
 274:	2e 81       	ldd	r18, Y+6	; 0x06
 276:	3f 81       	ldd	r19, Y+7	; 0x07
 278:	23 30       	cpi	r18, 0x03	; 3
 27a:	31 05       	cpc	r19, r1
 27c:	79 f1       	breq	.+94     	; 0x2dc <MDIO_SetPinDirection+0x270>
 27e:	8e 81       	ldd	r24, Y+6	; 0x06
 280:	9f 81       	ldd	r25, Y+7	; 0x07
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	91 05       	cpc	r25, r1
 286:	09 f0       	breq	.+2      	; 0x28a <MDIO_SetPinDirection+0x21e>
 288:	b4 c0       	rjmp	.+360    	; 0x3f2 <MDIO_SetPinDirection+0x386>
		case OUTPUT:
			SET_BIT(MDIO_DDRC, bitNum);				// set DDRC bitNum to 1
 28a:	a4 e3       	ldi	r26, 0x34	; 52
 28c:	b0 e0       	ldi	r27, 0x00	; 0
 28e:	e4 e3       	ldi	r30, 0x34	; 52
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	48 2f       	mov	r20, r24
 296:	8a 81       	ldd	r24, Y+2	; 0x02
 298:	28 2f       	mov	r18, r24
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 2e       	mov	r0, r18
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <MDIO_SetPinDirection+0x23c>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	0a 94       	dec	r0
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <MDIO_SetPinDirection+0x238>
 2ac:	84 2b       	or	r24, r20
 2ae:	8c 93       	st	X, r24
 2b0:	a0 c0       	rjmp	.+320    	; 0x3f2 <MDIO_SetPinDirection+0x386>
			break;
		case INPUT_FLOAT:
			CLR_BIT(MDIO_DDRC, bitNum);				// set DDRC bitNum to 0
 2b2:	a4 e3       	ldi	r26, 0x34	; 52
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	e4 e3       	ldi	r30, 0x34	; 52
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	48 2f       	mov	r20, r24
 2be:	8a 81       	ldd	r24, Y+2	; 0x02
 2c0:	28 2f       	mov	r18, r24
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 2e       	mov	r0, r18
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <MDIO_SetPinDirection+0x264>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	0a 94       	dec	r0
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <MDIO_SetPinDirection+0x260>
 2d4:	80 95       	com	r24
 2d6:	84 23       	and	r24, r20
 2d8:	8c 93       	st	X, r24
 2da:	8b c0       	rjmp	.+278    	; 0x3f2 <MDIO_SetPinDirection+0x386>
			break;
		case INPUT_PULLUP:
			CLR_BIT(MDIO_DDRC, bitNum);				// set DDRC bitNum to 0
 2dc:	a4 e3       	ldi	r26, 0x34	; 52
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	e4 e3       	ldi	r30, 0x34	; 52
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	48 2f       	mov	r20, r24
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	28 2f       	mov	r18, r24
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <MDIO_SetPinDirection+0x28c>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	2a 95       	dec	r18
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <MDIO_SetPinDirection+0x288>
 2fc:	80 95       	com	r24
 2fe:	84 23       	and	r24, r20
 300:	8c 93       	st	X, r24
			SET_BIT(MDIO_PORTC, bitNum);			// set PORTC bitNum to 1
 302:	a5 e3       	ldi	r26, 0x35	; 53
 304:	b0 e0       	ldi	r27, 0x00	; 0
 306:	e5 e3       	ldi	r30, 0x35	; 53
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	48 2f       	mov	r20, r24
 30e:	8a 81       	ldd	r24, Y+2	; 0x02
 310:	28 2f       	mov	r18, r24
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 2e       	mov	r0, r18
 31a:	02 c0       	rjmp	.+4      	; 0x320 <MDIO_SetPinDirection+0x2b4>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	0a 94       	dec	r0
 322:	e2 f7       	brpl	.-8      	; 0x31c <MDIO_SetPinDirection+0x2b0>
 324:	84 2b       	or	r24, r20
 326:	8c 93       	st	X, r24
 328:	64 c0       	rjmp	.+200    	; 0x3f2 <MDIO_SetPinDirection+0x386>
			break;
		} // end switch(status)
		break;
	// ********************* PORTD ****************************
	case PORTD:
		switch (status) {
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	3d 83       	std	Y+5, r19	; 0x05
 332:	2c 83       	std	Y+4, r18	; 0x04
 334:	8c 81       	ldd	r24, Y+4	; 0x04
 336:	9d 81       	ldd	r25, Y+5	; 0x05
 338:	82 30       	cpi	r24, 0x02	; 2
 33a:	91 05       	cpc	r25, r1
 33c:	f9 f0       	breq	.+62     	; 0x37c <MDIO_SetPinDirection+0x310>
 33e:	2c 81       	ldd	r18, Y+4	; 0x04
 340:	3d 81       	ldd	r19, Y+5	; 0x05
 342:	23 30       	cpi	r18, 0x03	; 3
 344:	31 05       	cpc	r19, r1
 346:	79 f1       	breq	.+94     	; 0x3a6 <MDIO_SetPinDirection+0x33a>
 348:	8c 81       	ldd	r24, Y+4	; 0x04
 34a:	9d 81       	ldd	r25, Y+5	; 0x05
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	91 05       	cpc	r25, r1
 350:	09 f0       	breq	.+2      	; 0x354 <MDIO_SetPinDirection+0x2e8>
 352:	4f c0       	rjmp	.+158    	; 0x3f2 <MDIO_SetPinDirection+0x386>
		case OUTPUT:
			SET_BIT(MDIO_DDRD, bitNum);				// set DDRD bitNum to 1
 354:	a1 e3       	ldi	r26, 0x31	; 49
 356:	b0 e0       	ldi	r27, 0x00	; 0
 358:	e1 e3       	ldi	r30, 0x31	; 49
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	48 2f       	mov	r20, r24
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 2e       	mov	r0, r18
 36c:	02 c0       	rjmp	.+4      	; 0x372 <MDIO_SetPinDirection+0x306>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	0a 94       	dec	r0
 374:	e2 f7       	brpl	.-8      	; 0x36e <MDIO_SetPinDirection+0x302>
 376:	84 2b       	or	r24, r20
 378:	8c 93       	st	X, r24
 37a:	3b c0       	rjmp	.+118    	; 0x3f2 <MDIO_SetPinDirection+0x386>
			break;
		case INPUT_FLOAT:
			CLR_BIT(MDIO_DDRD, bitNum);				// set DDRD bitNum to 0
 37c:	a1 e3       	ldi	r26, 0x31	; 49
 37e:	b0 e0       	ldi	r27, 0x00	; 0
 380:	e1 e3       	ldi	r30, 0x31	; 49
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	48 2f       	mov	r20, r24
 388:	8a 81       	ldd	r24, Y+2	; 0x02
 38a:	28 2f       	mov	r18, r24
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 2e       	mov	r0, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <MDIO_SetPinDirection+0x32e>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	0a 94       	dec	r0
 39c:	e2 f7       	brpl	.-8      	; 0x396 <MDIO_SetPinDirection+0x32a>
 39e:	80 95       	com	r24
 3a0:	84 23       	and	r24, r20
 3a2:	8c 93       	st	X, r24
 3a4:	26 c0       	rjmp	.+76     	; 0x3f2 <MDIO_SetPinDirection+0x386>
			break;
		case INPUT_PULLUP:
			CLR_BIT(MDIO_DDRD, bitNum);				// set DDRD bitNum to 0
 3a6:	a1 e3       	ldi	r26, 0x31	; 49
 3a8:	b0 e0       	ldi	r27, 0x00	; 0
 3aa:	e1 e3       	ldi	r30, 0x31	; 49
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	48 2f       	mov	r20, r24
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	28 2f       	mov	r18, r24
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <MDIO_SetPinDirection+0x356>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	2a 95       	dec	r18
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <MDIO_SetPinDirection+0x352>
 3c6:	80 95       	com	r24
 3c8:	84 23       	and	r24, r20
 3ca:	8c 93       	st	X, r24
			SET_BIT(MDIO_PORTD, bitNum);			// set PORTD bitNum to 1
 3cc:	a2 e3       	ldi	r26, 0x32	; 50
 3ce:	b0 e0       	ldi	r27, 0x00	; 0
 3d0:	e2 e3       	ldi	r30, 0x32	; 50
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	48 2f       	mov	r20, r24
 3d8:	8a 81       	ldd	r24, Y+2	; 0x02
 3da:	28 2f       	mov	r18, r24
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 2e       	mov	r0, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <MDIO_SetPinDirection+0x37e>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	0a 94       	dec	r0
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <MDIO_SetPinDirection+0x37a>
 3ee:	84 2b       	or	r24, r20
 3f0:	8c 93       	st	X, r24
		} // end switch(status)
		break;
	} // end switch(port)

	return;
} // end MDIO_SetPinDirection
 3f2:	2d 96       	adiw	r28, 0x0d	; 13
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	de bf       	out	0x3e, r29	; 62
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	cd bf       	out	0x3d, r28	; 61
 3fe:	cf 91       	pop	r28
 400:	df 91       	pop	r29
 402:	08 95       	ret

00000404 <MDIO_SetPinOutput>:

void MDIO_SetPinOutput (uint_8 port, uint_8 bitNum, uint_8 output) {
 404:	df 93       	push	r29
 406:	cf 93       	push	r28
 408:	00 d0       	rcall	.+0      	; 0x40a <MDIO_SetPinOutput+0x6>
 40a:	00 d0       	rcall	.+0      	; 0x40c <MDIO_SetPinOutput+0x8>
 40c:	0f 92       	push	r0
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
 412:	89 83       	std	Y+1, r24	; 0x01
 414:	6a 83       	std	Y+2, r22	; 0x02
 416:	4b 83       	std	Y+3, r20	; 0x03
    // TODO
	switch (port) {
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	28 2f       	mov	r18, r24
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	3d 83       	std	Y+5, r19	; 0x05
 420:	2c 83       	std	Y+4, r18	; 0x04
 422:	8c 81       	ldd	r24, Y+4	; 0x04
 424:	9d 81       	ldd	r25, Y+5	; 0x05
 426:	82 30       	cpi	r24, 0x02	; 2
 428:	91 05       	cpc	r25, r1
 42a:	09 f4       	brne	.+2      	; 0x42e <MDIO_SetPinOutput+0x2a>
 42c:	44 c0       	rjmp	.+136    	; 0x4b6 <MDIO_SetPinOutput+0xb2>
 42e:	2c 81       	ldd	r18, Y+4	; 0x04
 430:	3d 81       	ldd	r19, Y+5	; 0x05
 432:	23 30       	cpi	r18, 0x03	; 3
 434:	31 05       	cpc	r19, r1
 436:	34 f4       	brge	.+12     	; 0x444 <MDIO_SetPinOutput+0x40>
 438:	8c 81       	ldd	r24, Y+4	; 0x04
 43a:	9d 81       	ldd	r25, Y+5	; 0x05
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	91 05       	cpc	r25, r1
 440:	71 f0       	breq	.+28     	; 0x45e <MDIO_SetPinOutput+0x5a>
 442:	bc c0       	rjmp	.+376    	; 0x5bc <MDIO_SetPinOutput+0x1b8>
 444:	2c 81       	ldd	r18, Y+4	; 0x04
 446:	3d 81       	ldd	r19, Y+5	; 0x05
 448:	23 30       	cpi	r18, 0x03	; 3
 44a:	31 05       	cpc	r19, r1
 44c:	09 f4       	brne	.+2      	; 0x450 <MDIO_SetPinOutput+0x4c>
 44e:	5f c0       	rjmp	.+190    	; 0x50e <MDIO_SetPinOutput+0x10a>
 450:	8c 81       	ldd	r24, Y+4	; 0x04
 452:	9d 81       	ldd	r25, Y+5	; 0x05
 454:	84 30       	cpi	r24, 0x04	; 4
 456:	91 05       	cpc	r25, r1
 458:	09 f4       	brne	.+2      	; 0x45c <MDIO_SetPinOutput+0x58>
 45a:	85 c0       	rjmp	.+266    	; 0x566 <MDIO_SetPinOutput+0x162>
 45c:	af c0       	rjmp	.+350    	; 0x5bc <MDIO_SetPinOutput+0x1b8>
	case PORTA:
		if (output) SET_BIT(MDIO_PORTA, bitNum);
 45e:	8b 81       	ldd	r24, Y+3	; 0x03
 460:	88 23       	and	r24, r24
 462:	a1 f0       	breq	.+40     	; 0x48c <MDIO_SetPinOutput+0x88>
 464:	ab e3       	ldi	r26, 0x3B	; 59
 466:	b0 e0       	ldi	r27, 0x00	; 0
 468:	eb e3       	ldi	r30, 0x3B	; 59
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	48 2f       	mov	r20, r24
 470:	8a 81       	ldd	r24, Y+2	; 0x02
 472:	28 2f       	mov	r18, r24
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	02 2e       	mov	r0, r18
 47c:	02 c0       	rjmp	.+4      	; 0x482 <MDIO_SetPinOutput+0x7e>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	0a 94       	dec	r0
 484:	e2 f7       	brpl	.-8      	; 0x47e <MDIO_SetPinOutput+0x7a>
 486:	84 2b       	or	r24, r20
 488:	8c 93       	st	X, r24
 48a:	98 c0       	rjmp	.+304    	; 0x5bc <MDIO_SetPinOutput+0x1b8>
		else 		CLR_BIT(MDIO_PORTA, bitNum);
 48c:	ab e3       	ldi	r26, 0x3B	; 59
 48e:	b0 e0       	ldi	r27, 0x00	; 0
 490:	eb e3       	ldi	r30, 0x3B	; 59
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	48 2f       	mov	r20, r24
 498:	8a 81       	ldd	r24, Y+2	; 0x02
 49a:	28 2f       	mov	r18, r24
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	02 2e       	mov	r0, r18
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <MDIO_SetPinOutput+0xa6>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	0a 94       	dec	r0
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <MDIO_SetPinOutput+0xa2>
 4ae:	80 95       	com	r24
 4b0:	84 23       	and	r24, r20
 4b2:	8c 93       	st	X, r24
 4b4:	83 c0       	rjmp	.+262    	; 0x5bc <MDIO_SetPinOutput+0x1b8>
		break;
	case PORTB:
		if (output) SET_BIT(MDIO_PORTB, bitNum);
 4b6:	8b 81       	ldd	r24, Y+3	; 0x03
 4b8:	88 23       	and	r24, r24
 4ba:	a1 f0       	breq	.+40     	; 0x4e4 <MDIO_SetPinOutput+0xe0>
 4bc:	a8 e3       	ldi	r26, 0x38	; 56
 4be:	b0 e0       	ldi	r27, 0x00	; 0
 4c0:	e8 e3       	ldi	r30, 0x38	; 56
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	48 2f       	mov	r20, r24
 4c8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ca:	28 2f       	mov	r18, r24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 2e       	mov	r0, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <MDIO_SetPinOutput+0xd6>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	0a 94       	dec	r0
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <MDIO_SetPinOutput+0xd2>
 4de:	84 2b       	or	r24, r20
 4e0:	8c 93       	st	X, r24
 4e2:	6c c0       	rjmp	.+216    	; 0x5bc <MDIO_SetPinOutput+0x1b8>
		else 		CLR_BIT(MDIO_PORTB, bitNum);
 4e4:	a8 e3       	ldi	r26, 0x38	; 56
 4e6:	b0 e0       	ldi	r27, 0x00	; 0
 4e8:	e8 e3       	ldi	r30, 0x38	; 56
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	48 2f       	mov	r20, r24
 4f0:	8a 81       	ldd	r24, Y+2	; 0x02
 4f2:	28 2f       	mov	r18, r24
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 2e       	mov	r0, r18
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <MDIO_SetPinOutput+0xfe>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	0a 94       	dec	r0
 504:	e2 f7       	brpl	.-8      	; 0x4fe <MDIO_SetPinOutput+0xfa>
 506:	80 95       	com	r24
 508:	84 23       	and	r24, r20
 50a:	8c 93       	st	X, r24
 50c:	57 c0       	rjmp	.+174    	; 0x5bc <MDIO_SetPinOutput+0x1b8>
		break;
	case PORTC:
		if (output) SET_BIT(MDIO_PORTC, bitNum);
 50e:	8b 81       	ldd	r24, Y+3	; 0x03
 510:	88 23       	and	r24, r24
 512:	a1 f0       	breq	.+40     	; 0x53c <MDIO_SetPinOutput+0x138>
 514:	a5 e3       	ldi	r26, 0x35	; 53
 516:	b0 e0       	ldi	r27, 0x00	; 0
 518:	e5 e3       	ldi	r30, 0x35	; 53
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	80 81       	ld	r24, Z
 51e:	48 2f       	mov	r20, r24
 520:	8a 81       	ldd	r24, Y+2	; 0x02
 522:	28 2f       	mov	r18, r24
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 2e       	mov	r0, r18
 52c:	02 c0       	rjmp	.+4      	; 0x532 <MDIO_SetPinOutput+0x12e>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	0a 94       	dec	r0
 534:	e2 f7       	brpl	.-8      	; 0x52e <MDIO_SetPinOutput+0x12a>
 536:	84 2b       	or	r24, r20
 538:	8c 93       	st	X, r24
 53a:	40 c0       	rjmp	.+128    	; 0x5bc <MDIO_SetPinOutput+0x1b8>
		else 		CLR_BIT(MDIO_PORTC, bitNum);
 53c:	a5 e3       	ldi	r26, 0x35	; 53
 53e:	b0 e0       	ldi	r27, 0x00	; 0
 540:	e5 e3       	ldi	r30, 0x35	; 53
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	48 2f       	mov	r20, r24
 548:	8a 81       	ldd	r24, Y+2	; 0x02
 54a:	28 2f       	mov	r18, r24
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 2e       	mov	r0, r18
 554:	02 c0       	rjmp	.+4      	; 0x55a <MDIO_SetPinOutput+0x156>
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	0a 94       	dec	r0
 55c:	e2 f7       	brpl	.-8      	; 0x556 <MDIO_SetPinOutput+0x152>
 55e:	80 95       	com	r24
 560:	84 23       	and	r24, r20
 562:	8c 93       	st	X, r24
 564:	2b c0       	rjmp	.+86     	; 0x5bc <MDIO_SetPinOutput+0x1b8>
		break;
	case PORTD:
		if (output) SET_BIT(MDIO_PORTD, bitNum);
 566:	8b 81       	ldd	r24, Y+3	; 0x03
 568:	88 23       	and	r24, r24
 56a:	a1 f0       	breq	.+40     	; 0x594 <MDIO_SetPinOutput+0x190>
 56c:	a2 e3       	ldi	r26, 0x32	; 50
 56e:	b0 e0       	ldi	r27, 0x00	; 0
 570:	e2 e3       	ldi	r30, 0x32	; 50
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	48 2f       	mov	r20, r24
 578:	8a 81       	ldd	r24, Y+2	; 0x02
 57a:	28 2f       	mov	r18, r24
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 2e       	mov	r0, r18
 584:	02 c0       	rjmp	.+4      	; 0x58a <MDIO_SetPinOutput+0x186>
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	0a 94       	dec	r0
 58c:	e2 f7       	brpl	.-8      	; 0x586 <MDIO_SetPinOutput+0x182>
 58e:	84 2b       	or	r24, r20
 590:	8c 93       	st	X, r24
 592:	14 c0       	rjmp	.+40     	; 0x5bc <MDIO_SetPinOutput+0x1b8>
		else 		CLR_BIT(MDIO_PORTD, bitNum);
 594:	a2 e3       	ldi	r26, 0x32	; 50
 596:	b0 e0       	ldi	r27, 0x00	; 0
 598:	e2 e3       	ldi	r30, 0x32	; 50
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	80 81       	ld	r24, Z
 59e:	48 2f       	mov	r20, r24
 5a0:	8a 81       	ldd	r24, Y+2	; 0x02
 5a2:	28 2f       	mov	r18, r24
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 2e       	mov	r0, r18
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <MDIO_SetPinOutput+0x1ae>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	0a 94       	dec	r0
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <MDIO_SetPinOutput+0x1aa>
 5b6:	80 95       	com	r24
 5b8:	84 23       	and	r24, r20
 5ba:	8c 93       	st	X, r24
		break;
	default:
		break;
	} // end switch(port)
	return;
} // end MDIO_SetPinOutput
 5bc:	0f 90       	pop	r0
 5be:	0f 90       	pop	r0
 5c0:	0f 90       	pop	r0
 5c2:	0f 90       	pop	r0
 5c4:	0f 90       	pop	r0
 5c6:	cf 91       	pop	r28
 5c8:	df 91       	pop	r29
 5ca:	08 95       	ret

000005cc <MDIO_GetPinValue>:


uint_8 MDIO_GetPinValue (uint_8 port, uint_8 bitNum) {
 5cc:	df 93       	push	r29
 5ce:	cf 93       	push	r28
 5d0:	00 d0       	rcall	.+0      	; 0x5d2 <MDIO_GetPinValue+0x6>
 5d2:	00 d0       	rcall	.+0      	; 0x5d4 <MDIO_GetPinValue+0x8>
 5d4:	0f 92       	push	r0
 5d6:	cd b7       	in	r28, 0x3d	; 61
 5d8:	de b7       	in	r29, 0x3e	; 62
 5da:	89 83       	std	Y+1, r24	; 0x01
 5dc:	6a 83       	std	Y+2, r22	; 0x02
    // TODO
	switch (port) {
 5de:	89 81       	ldd	r24, Y+1	; 0x01
 5e0:	28 2f       	mov	r18, r24
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	3d 83       	std	Y+5, r19	; 0x05
 5e6:	2c 83       	std	Y+4, r18	; 0x04
 5e8:	8c 81       	ldd	r24, Y+4	; 0x04
 5ea:	9d 81       	ldd	r25, Y+5	; 0x05
 5ec:	82 30       	cpi	r24, 0x02	; 2
 5ee:	91 05       	cpc	r25, r1
 5f0:	d9 f0       	breq	.+54     	; 0x628 <MDIO_GetPinValue+0x5c>
 5f2:	2c 81       	ldd	r18, Y+4	; 0x04
 5f4:	3d 81       	ldd	r19, Y+5	; 0x05
 5f6:	23 30       	cpi	r18, 0x03	; 3
 5f8:	31 05       	cpc	r19, r1
 5fa:	34 f4       	brge	.+12     	; 0x608 <MDIO_GetPinValue+0x3c>
 5fc:	8c 81       	ldd	r24, Y+4	; 0x04
 5fe:	9d 81       	ldd	r25, Y+5	; 0x05
 600:	81 30       	cpi	r24, 0x01	; 1
 602:	91 05       	cpc	r25, r1
 604:	61 f0       	breq	.+24     	; 0x61e <MDIO_GetPinValue+0x52>
 606:	1f c0       	rjmp	.+62     	; 0x646 <MDIO_GetPinValue+0x7a>
 608:	2c 81       	ldd	r18, Y+4	; 0x04
 60a:	3d 81       	ldd	r19, Y+5	; 0x05
 60c:	23 30       	cpi	r18, 0x03	; 3
 60e:	31 05       	cpc	r19, r1
 610:	81 f0       	breq	.+32     	; 0x632 <MDIO_GetPinValue+0x66>
 612:	8c 81       	ldd	r24, Y+4	; 0x04
 614:	9d 81       	ldd	r25, Y+5	; 0x05
 616:	84 30       	cpi	r24, 0x04	; 4
 618:	91 05       	cpc	r25, r1
 61a:	81 f0       	breq	.+32     	; 0x63c <MDIO_GetPinValue+0x70>
 61c:	14 c0       	rjmp	.+40     	; 0x646 <MDIO_GetPinValue+0x7a>
	case PORTA:
		return MDIO_PINA;
 61e:	e9 e3       	ldi	r30, 0x39	; 57
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	90 81       	ld	r25, Z
 624:	9b 83       	std	Y+3, r25	; 0x03
 626:	10 c0       	rjmp	.+32     	; 0x648 <MDIO_GetPinValue+0x7c>
		break;
	case PORTB:
		return MDIO_PINB;
 628:	e6 e3       	ldi	r30, 0x36	; 54
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	20 81       	ld	r18, Z
 62e:	2b 83       	std	Y+3, r18	; 0x03
 630:	0b c0       	rjmp	.+22     	; 0x648 <MDIO_GetPinValue+0x7c>
		break;
	case PORTC:
		return MDIO_PINC;
 632:	e3 e3       	ldi	r30, 0x33	; 51
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	30 81       	ld	r19, Z
 638:	3b 83       	std	Y+3, r19	; 0x03
 63a:	06 c0       	rjmp	.+12     	; 0x648 <MDIO_GetPinValue+0x7c>
		break;
	case PORTD:
		return MDIO_PIND;
 63c:	e0 e3       	ldi	r30, 0x30	; 48
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	8b 83       	std	Y+3, r24	; 0x03
 644:	01 c0       	rjmp	.+2      	; 0x648 <MDIO_GetPinValue+0x7c>
		break;
	default:
		break;
	} // end switch(port)
	return 0;
 646:	1b 82       	std	Y+3, r1	; 0x03
 648:	8b 81       	ldd	r24, Y+3	; 0x03
} // end MDIO_GetPinValue
 64a:	0f 90       	pop	r0
 64c:	0f 90       	pop	r0
 64e:	0f 90       	pop	r0
 650:	0f 90       	pop	r0
 652:	0f 90       	pop	r0
 654:	cf 91       	pop	r28
 656:	df 91       	pop	r29
 658:	08 95       	ret

0000065a <main>:
#include "L_STD_TYPES.h"
#include "MDIO_interface.h"

int main(void) {
 65a:	df 93       	push	r29
 65c:	cf 93       	push	r28
 65e:	0f 92       	push	r0
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62

	MDIO_SetPinDirection(PORTA, 0, INPUT_PULLUP);
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	60 e0       	ldi	r22, 0x00	; 0
 668:	43 e0       	ldi	r20, 0x03	; 3
 66a:	0e 94 36 00 	call	0x6c	; 0x6c <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PORTA, 1, OUTPUT);
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	61 e0       	ldi	r22, 0x01	; 1
 672:	41 e0       	ldi	r20, 0x01	; 1
 674:	0e 94 36 00 	call	0x6c	; 0x6c <MDIO_SetPinDirection>
	uint_8 sw;
	while ( 1 ) {
		sw = MDIO_GetPinValue(PORTA, 1);
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	61 e0       	ldi	r22, 0x01	; 1
 67c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <MDIO_GetPinValue>
 680:	89 83       	std	Y+1, r24	; 0x01
		if (sw == 0) {
 682:	89 81       	ldd	r24, Y+1	; 0x01
 684:	88 23       	and	r24, r24
 686:	31 f4       	brne	.+12     	; 0x694 <main+0x3a>
			MDIO_SetPinOutput(PORTA, 1, HIGH);
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	41 e0       	ldi	r20, 0x01	; 1
 68e:	0e 94 02 02 	call	0x404	; 0x404 <MDIO_SetPinOutput>
 692:	f2 cf       	rjmp	.-28     	; 0x678 <main+0x1e>
		}else
			MDIO_SetPinOutput(PORTA, 1, LOW);
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	61 e0       	ldi	r22, 0x01	; 1
 698:	40 e0       	ldi	r20, 0x00	; 0
 69a:	0e 94 02 02 	call	0x404	; 0x404 <MDIO_SetPinOutput>
 69e:	ec cf       	rjmp	.-40     	; 0x678 <main+0x1e>

000006a0 <_exit>:
 6a0:	f8 94       	cli

000006a2 <__stop_program>:
 6a2:	ff cf       	rjmp	.-2      	; 0x6a2 <__stop_program>
