
MDIO_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000025f6  0000266a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002208  00000000  00000000  00002698  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d38  00000000  00000000  000048a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000055d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000074d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000083bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000916c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000092cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009559  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009d27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 77 12 	call	0x24ee	; 0x24ee <main>
      7a:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <MDIO_SetPinDirection>:
#include "../libraries/L_STD_TYPES.h"
#include "../libraries/L_UTILS.h"
#include "MDIO_private.h"
#include "MDIO_interface.h"

void MDIO_SetPinDirection (uint8 port, uint8 bitNum, uint8 status) {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2d 97       	sbiw	r28, 0x0d	; 13
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
    // TODO: switch on port
	switch (port) {
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	3d 87       	std	Y+13, r19	; 0x0d
     b58:	2c 87       	std	Y+12, r18	; 0x0c
     b5a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b5c:	9d 85       	ldd	r25, Y+13	; 0x0d
     b5e:	82 30       	cpi	r24, 0x02	; 2
     b60:	91 05       	cpc	r25, r1
     b62:	09 f4       	brne	.+2      	; 0xb66 <MDIO_SetPinDirection+0x30>
     b64:	7d c0       	rjmp	.+250    	; 0xc60 <MDIO_SetPinDirection+0x12a>
     b66:	2c 85       	ldd	r18, Y+12	; 0x0c
     b68:	3d 85       	ldd	r19, Y+13	; 0x0d
     b6a:	23 30       	cpi	r18, 0x03	; 3
     b6c:	31 05       	cpc	r19, r1
     b6e:	34 f4       	brge	.+12     	; 0xb7c <MDIO_SetPinDirection+0x46>
     b70:	8c 85       	ldd	r24, Y+12	; 0x0c
     b72:	9d 85       	ldd	r25, Y+13	; 0x0d
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	91 05       	cpc	r25, r1
     b78:	71 f0       	breq	.+28     	; 0xb96 <MDIO_SetPinDirection+0x60>
     b7a:	a0 c1       	rjmp	.+832    	; 0xebc <MDIO_SetPinDirection+0x386>
     b7c:	2c 85       	ldd	r18, Y+12	; 0x0c
     b7e:	3d 85       	ldd	r19, Y+13	; 0x0d
     b80:	23 30       	cpi	r18, 0x03	; 3
     b82:	31 05       	cpc	r19, r1
     b84:	09 f4       	brne	.+2      	; 0xb88 <MDIO_SetPinDirection+0x52>
     b86:	d1 c0       	rjmp	.+418    	; 0xd2a <MDIO_SetPinDirection+0x1f4>
     b88:	8c 85       	ldd	r24, Y+12	; 0x0c
     b8a:	9d 85       	ldd	r25, Y+13	; 0x0d
     b8c:	84 30       	cpi	r24, 0x04	; 4
     b8e:	91 05       	cpc	r25, r1
     b90:	09 f4       	brne	.+2      	; 0xb94 <MDIO_SetPinDirection+0x5e>
     b92:	30 c1       	rjmp	.+608    	; 0xdf4 <MDIO_SetPinDirection+0x2be>
     b94:	93 c1       	rjmp	.+806    	; 0xebc <MDIO_SetPinDirection+0x386>
	// ********************* PORTA ****************************
	case PORTA:
		switch (status) {
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	28 2f       	mov	r18, r24
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	3b 87       	std	Y+11, r19	; 0x0b
     b9e:	2a 87       	std	Y+10, r18	; 0x0a
     ba0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ba2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ba4:	82 30       	cpi	r24, 0x02	; 2
     ba6:	91 05       	cpc	r25, r1
     ba8:	f9 f0       	breq	.+62     	; 0xbe8 <MDIO_SetPinDirection+0xb2>
     baa:	2a 85       	ldd	r18, Y+10	; 0x0a
     bac:	3b 85       	ldd	r19, Y+11	; 0x0b
     bae:	23 30       	cpi	r18, 0x03	; 3
     bb0:	31 05       	cpc	r19, r1
     bb2:	79 f1       	breq	.+94     	; 0xc12 <MDIO_SetPinDirection+0xdc>
     bb4:	8a 85       	ldd	r24, Y+10	; 0x0a
     bb6:	9b 85       	ldd	r25, Y+11	; 0x0b
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	91 05       	cpc	r25, r1
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <MDIO_SetPinDirection+0x8a>
     bbe:	7e c1       	rjmp	.+764    	; 0xebc <MDIO_SetPinDirection+0x386>
		case OUTPUT:
			SET_BIT(MDIO_DDRA, bitNum);				// set DDRA bitNum to 1
     bc0:	aa e3       	ldi	r26, 0x3A	; 58
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	ea e3       	ldi	r30, 0x3A	; 58
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	48 2f       	mov	r20, r24
     bcc:	8a 81       	ldd	r24, Y+2	; 0x02
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	02 2e       	mov	r0, r18
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <MDIO_SetPinDirection+0xa8>
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	0a 94       	dec	r0
     be0:	e2 f7       	brpl	.-8      	; 0xbda <MDIO_SetPinDirection+0xa4>
     be2:	84 2b       	or	r24, r20
     be4:	8c 93       	st	X, r24
     be6:	6a c1       	rjmp	.+724    	; 0xebc <MDIO_SetPinDirection+0x386>
			break;
		case INPUT_FLOAT:
			CLR_BIT(MDIO_DDRA, bitNum);				// set DDRA bitNum to 0
     be8:	aa e3       	ldi	r26, 0x3A	; 58
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ea e3       	ldi	r30, 0x3A	; 58
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	48 2f       	mov	r20, r24
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	28 2f       	mov	r18, r24
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	02 2e       	mov	r0, r18
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <MDIO_SetPinDirection+0xd0>
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	0a 94       	dec	r0
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <MDIO_SetPinDirection+0xcc>
     c0a:	80 95       	com	r24
     c0c:	84 23       	and	r24, r20
     c0e:	8c 93       	st	X, r24
     c10:	55 c1       	rjmp	.+682    	; 0xebc <MDIO_SetPinDirection+0x386>
			break;
		case INPUT_PULLUP:
			CLR_BIT(MDIO_DDRA, bitNum);				// set DDRA bitNum to 0
     c12:	aa e3       	ldi	r26, 0x3A	; 58
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	ea e3       	ldi	r30, 0x3A	; 58
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	48 2f       	mov	r20, r24
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <MDIO_SetPinDirection+0xf8>
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	2a 95       	dec	r18
     c30:	e2 f7       	brpl	.-8      	; 0xc2a <MDIO_SetPinDirection+0xf4>
     c32:	80 95       	com	r24
     c34:	84 23       	and	r24, r20
     c36:	8c 93       	st	X, r24
			SET_BIT(MDIO_PORTA, bitNum);			// set PORTA bitNum to 1
     c38:	ab e3       	ldi	r26, 0x3B	; 59
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	eb e3       	ldi	r30, 0x3B	; 59
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	48 2f       	mov	r20, r24
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	02 2e       	mov	r0, r18
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <MDIO_SetPinDirection+0x120>
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	0a 94       	dec	r0
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <MDIO_SetPinDirection+0x11c>
     c5a:	84 2b       	or	r24, r20
     c5c:	8c 93       	st	X, r24
     c5e:	2e c1       	rjmp	.+604    	; 0xebc <MDIO_SetPinDirection+0x386>
			break;
		} // end switch(status)
		break;
	// ********************* PORTB ****************************
	case PORTB:
		switch (status) {
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	39 87       	std	Y+9, r19	; 0x09
     c68:	28 87       	std	Y+8, r18	; 0x08
     c6a:	88 85       	ldd	r24, Y+8	; 0x08
     c6c:	99 85       	ldd	r25, Y+9	; 0x09
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	91 05       	cpc	r25, r1
     c72:	f9 f0       	breq	.+62     	; 0xcb2 <MDIO_SetPinDirection+0x17c>
     c74:	28 85       	ldd	r18, Y+8	; 0x08
     c76:	39 85       	ldd	r19, Y+9	; 0x09
     c78:	23 30       	cpi	r18, 0x03	; 3
     c7a:	31 05       	cpc	r19, r1
     c7c:	79 f1       	breq	.+94     	; 0xcdc <MDIO_SetPinDirection+0x1a6>
     c7e:	88 85       	ldd	r24, Y+8	; 0x08
     c80:	99 85       	ldd	r25, Y+9	; 0x09
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	91 05       	cpc	r25, r1
     c86:	09 f0       	breq	.+2      	; 0xc8a <MDIO_SetPinDirection+0x154>
     c88:	19 c1       	rjmp	.+562    	; 0xebc <MDIO_SetPinDirection+0x386>
		case OUTPUT:
			SET_BIT(MDIO_DDRB, bitNum);				// set DDRB bitNum to 1
     c8a:	a7 e3       	ldi	r26, 0x37	; 55
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e7 e3       	ldi	r30, 0x37	; 55
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	48 2f       	mov	r20, r24
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	02 2e       	mov	r0, r18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <MDIO_SetPinDirection+0x172>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	0a 94       	dec	r0
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <MDIO_SetPinDirection+0x16e>
     cac:	84 2b       	or	r24, r20
     cae:	8c 93       	st	X, r24
     cb0:	05 c1       	rjmp	.+522    	; 0xebc <MDIO_SetPinDirection+0x386>
			break;
		case INPUT_FLOAT:
			CLR_BIT(MDIO_DDRB, bitNum);				// set DDRB bitNum to 0
     cb2:	a7 e3       	ldi	r26, 0x37	; 55
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e7 e3       	ldi	r30, 0x37	; 55
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	48 2f       	mov	r20, r24
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	02 2e       	mov	r0, r18
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <MDIO_SetPinDirection+0x19a>
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	0a 94       	dec	r0
     cd2:	e2 f7       	brpl	.-8      	; 0xccc <MDIO_SetPinDirection+0x196>
     cd4:	80 95       	com	r24
     cd6:	84 23       	and	r24, r20
     cd8:	8c 93       	st	X, r24
     cda:	f0 c0       	rjmp	.+480    	; 0xebc <MDIO_SetPinDirection+0x386>
			break;
		case INPUT_PULLUP:
			CLR_BIT(MDIO_DDRB, bitNum);				// set DDRB bitNum to 0
     cdc:	a7 e3       	ldi	r26, 0x37	; 55
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e7 e3       	ldi	r30, 0x37	; 55
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	48 2f       	mov	r20, r24
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <MDIO_SetPinDirection+0x1c2>
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	2a 95       	dec	r18
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <MDIO_SetPinDirection+0x1be>
     cfc:	80 95       	com	r24
     cfe:	84 23       	and	r24, r20
     d00:	8c 93       	st	X, r24
			SET_BIT(MDIO_PORTB, bitNum);			// set PORTB bitNum to 1
     d02:	a8 e3       	ldi	r26, 0x38	; 56
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e8 e3       	ldi	r30, 0x38	; 56
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <MDIO_SetPinDirection+0x1ea>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <MDIO_SetPinDirection+0x1e6>
     d24:	84 2b       	or	r24, r20
     d26:	8c 93       	st	X, r24
     d28:	c9 c0       	rjmp	.+402    	; 0xebc <MDIO_SetPinDirection+0x386>
			break;
		} // end switch(status)
		break;
	// ********************* PORTC ****************************
	case PORTC:
		switch (status) {
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	3f 83       	std	Y+7, r19	; 0x07
     d32:	2e 83       	std	Y+6, r18	; 0x06
     d34:	8e 81       	ldd	r24, Y+6	; 0x06
     d36:	9f 81       	ldd	r25, Y+7	; 0x07
     d38:	82 30       	cpi	r24, 0x02	; 2
     d3a:	91 05       	cpc	r25, r1
     d3c:	f9 f0       	breq	.+62     	; 0xd7c <MDIO_SetPinDirection+0x246>
     d3e:	2e 81       	ldd	r18, Y+6	; 0x06
     d40:	3f 81       	ldd	r19, Y+7	; 0x07
     d42:	23 30       	cpi	r18, 0x03	; 3
     d44:	31 05       	cpc	r19, r1
     d46:	79 f1       	breq	.+94     	; 0xda6 <MDIO_SetPinDirection+0x270>
     d48:	8e 81       	ldd	r24, Y+6	; 0x06
     d4a:	9f 81       	ldd	r25, Y+7	; 0x07
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	91 05       	cpc	r25, r1
     d50:	09 f0       	breq	.+2      	; 0xd54 <MDIO_SetPinDirection+0x21e>
     d52:	b4 c0       	rjmp	.+360    	; 0xebc <MDIO_SetPinDirection+0x386>
		case OUTPUT:
			SET_BIT(MDIO_DDRC, bitNum);				// set DDRC bitNum to 1
     d54:	a4 e3       	ldi	r26, 0x34	; 52
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e4 e3       	ldi	r30, 0x34	; 52
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 2e       	mov	r0, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <MDIO_SetPinDirection+0x23c>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <MDIO_SetPinDirection+0x238>
     d76:	84 2b       	or	r24, r20
     d78:	8c 93       	st	X, r24
     d7a:	a0 c0       	rjmp	.+320    	; 0xebc <MDIO_SetPinDirection+0x386>
			break;
		case INPUT_FLOAT:
			CLR_BIT(MDIO_DDRC, bitNum);				// set DDRC bitNum to 0
     d7c:	a4 e3       	ldi	r26, 0x34	; 52
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e4 e3       	ldi	r30, 0x34	; 52
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <MDIO_SetPinDirection+0x264>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <MDIO_SetPinDirection+0x260>
     d9e:	80 95       	com	r24
     da0:	84 23       	and	r24, r20
     da2:	8c 93       	st	X, r24
     da4:	8b c0       	rjmp	.+278    	; 0xebc <MDIO_SetPinDirection+0x386>
			break;
		case INPUT_PULLUP:
			CLR_BIT(MDIO_DDRC, bitNum);				// set DDRC bitNum to 0
     da6:	a4 e3       	ldi	r26, 0x34	; 52
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e4 e3       	ldi	r30, 0x34	; 52
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <MDIO_SetPinDirection+0x28c>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	2a 95       	dec	r18
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <MDIO_SetPinDirection+0x288>
     dc6:	80 95       	com	r24
     dc8:	84 23       	and	r24, r20
     dca:	8c 93       	st	X, r24
			SET_BIT(MDIO_PORTC, bitNum);			// set PORTC bitNum to 1
     dcc:	a5 e3       	ldi	r26, 0x35	; 53
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e5 e3       	ldi	r30, 0x35	; 53
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	48 2f       	mov	r20, r24
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	02 2e       	mov	r0, r18
     de4:	02 c0       	rjmp	.+4      	; 0xdea <MDIO_SetPinDirection+0x2b4>
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	0a 94       	dec	r0
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <MDIO_SetPinDirection+0x2b0>
     dee:	84 2b       	or	r24, r20
     df0:	8c 93       	st	X, r24
     df2:	64 c0       	rjmp	.+200    	; 0xebc <MDIO_SetPinDirection+0x386>
			break;
		} // end switch(status)
		break;
	// ********************* PORTD ****************************
	case PORTD:
		switch (status) {
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	3d 83       	std	Y+5, r19	; 0x05
     dfc:	2c 83       	std	Y+4, r18	; 0x04
     dfe:	8c 81       	ldd	r24, Y+4	; 0x04
     e00:	9d 81       	ldd	r25, Y+5	; 0x05
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	91 05       	cpc	r25, r1
     e06:	f9 f0       	breq	.+62     	; 0xe46 <MDIO_SetPinDirection+0x310>
     e08:	2c 81       	ldd	r18, Y+4	; 0x04
     e0a:	3d 81       	ldd	r19, Y+5	; 0x05
     e0c:	23 30       	cpi	r18, 0x03	; 3
     e0e:	31 05       	cpc	r19, r1
     e10:	79 f1       	breq	.+94     	; 0xe70 <MDIO_SetPinDirection+0x33a>
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	9d 81       	ldd	r25, Y+5	; 0x05
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	91 05       	cpc	r25, r1
     e1a:	09 f0       	breq	.+2      	; 0xe1e <MDIO_SetPinDirection+0x2e8>
     e1c:	4f c0       	rjmp	.+158    	; 0xebc <MDIO_SetPinDirection+0x386>
		case OUTPUT:
			SET_BIT(MDIO_DDRD, bitNum);				// set DDRD bitNum to 1
     e1e:	a1 e3       	ldi	r26, 0x31	; 49
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e1 e3       	ldi	r30, 0x31	; 49
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <MDIO_SetPinDirection+0x306>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <MDIO_SetPinDirection+0x302>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	3b c0       	rjmp	.+118    	; 0xebc <MDIO_SetPinDirection+0x386>
			break;
		case INPUT_FLOAT:
			CLR_BIT(MDIO_DDRD, bitNum);				// set DDRD bitNum to 0
     e46:	a1 e3       	ldi	r26, 0x31	; 49
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e1 e3       	ldi	r30, 0x31	; 49
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <MDIO_SetPinDirection+0x32e>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <MDIO_SetPinDirection+0x32a>
     e68:	80 95       	com	r24
     e6a:	84 23       	and	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	26 c0       	rjmp	.+76     	; 0xebc <MDIO_SetPinDirection+0x386>
			break;
		case INPUT_PULLUP:
			CLR_BIT(MDIO_DDRD, bitNum);				// set DDRD bitNum to 0
     e70:	a1 e3       	ldi	r26, 0x31	; 49
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e1 e3       	ldi	r30, 0x31	; 49
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <MDIO_SetPinDirection+0x356>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	2a 95       	dec	r18
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <MDIO_SetPinDirection+0x352>
     e90:	80 95       	com	r24
     e92:	84 23       	and	r24, r20
     e94:	8c 93       	st	X, r24
			SET_BIT(MDIO_PORTD, bitNum);			// set PORTD bitNum to 1
     e96:	a2 e3       	ldi	r26, 0x32	; 50
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e2 e3       	ldi	r30, 0x32	; 50
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	48 2f       	mov	r20, r24
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 2e       	mov	r0, r18
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <MDIO_SetPinDirection+0x37e>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	0a 94       	dec	r0
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <MDIO_SetPinDirection+0x37a>
     eb8:	84 2b       	or	r24, r20
     eba:	8c 93       	st	X, r24
		} // end switch(status)
		break;
	} // end switch(port)

	return;
} // end MDIO_SetPinDirection
     ebc:	2d 96       	adiw	r28, 0x0d	; 13
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <MDIO_SetPortDirection>:

void MDIO_SetPortDirection (uint8 port, uint8 direction) {
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <MDIO_SetPortDirection+0x6>
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <MDIO_SetPortDirection+0x8>
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	6a 83       	std	Y+2, r22	; 0x02
	switch (port) {
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	3c 83       	std	Y+4, r19	; 0x04
     ee6:	2b 83       	std	Y+3, r18	; 0x03
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	91 05       	cpc	r25, r1
     ef0:	d9 f0       	breq	.+54     	; 0xf28 <MDIO_SetPortDirection+0x5a>
     ef2:	2b 81       	ldd	r18, Y+3	; 0x03
     ef4:	3c 81       	ldd	r19, Y+4	; 0x04
     ef6:	23 30       	cpi	r18, 0x03	; 3
     ef8:	31 05       	cpc	r19, r1
     efa:	34 f4       	brge	.+12     	; 0xf08 <MDIO_SetPortDirection+0x3a>
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	91 05       	cpc	r25, r1
     f04:	61 f0       	breq	.+24     	; 0xf1e <MDIO_SetPortDirection+0x50>
     f06:	1e c0       	rjmp	.+60     	; 0xf44 <MDIO_SetPortDirection+0x76>
     f08:	2b 81       	ldd	r18, Y+3	; 0x03
     f0a:	3c 81       	ldd	r19, Y+4	; 0x04
     f0c:	23 30       	cpi	r18, 0x03	; 3
     f0e:	31 05       	cpc	r19, r1
     f10:	81 f0       	breq	.+32     	; 0xf32 <MDIO_SetPortDirection+0x64>
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	91 05       	cpc	r25, r1
     f1a:	81 f0       	breq	.+32     	; 0xf3c <MDIO_SetPortDirection+0x6e>
     f1c:	13 c0       	rjmp	.+38     	; 0xf44 <MDIO_SetPortDirection+0x76>
	case PORTA:
		MDIO_DDRA = direction;
     f1e:	ea e3       	ldi	r30, 0x3A	; 58
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	80 83       	st	Z, r24
     f26:	0e c0       	rjmp	.+28     	; 0xf44 <MDIO_SetPortDirection+0x76>
		break;
	case PORTB:
		MDIO_DDRB = direction;
     f28:	e7 e3       	ldi	r30, 0x37	; 55
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	80 83       	st	Z, r24
     f30:	09 c0       	rjmp	.+18     	; 0xf44 <MDIO_SetPortDirection+0x76>
		break;
	case PORTC:
		MDIO_DDRC = direction;
     f32:	e4 e3       	ldi	r30, 0x34	; 52
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	80 83       	st	Z, r24
     f3a:	04 c0       	rjmp	.+8      	; 0xf44 <MDIO_SetPortDirection+0x76>
		break;
	case PORTD:
		MDIO_DDRD = direction;
     f3c:	e1 e3       	ldi	r30, 0x31	; 49
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	80 83       	st	Z, r24
		break;
	default:
		break;
	} // end switch(port)
	return;
}// end MDIO_SetPortDirection
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <MDIO_SetPinOutput>:

void MDIO_SetPinOutput (uint8 port, uint8 bitNum, uint8 output) {
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	00 d0       	rcall	.+0      	; 0xf58 <MDIO_SetPinOutput+0x6>
     f58:	00 d0       	rcall	.+0      	; 0xf5a <MDIO_SetPinOutput+0x8>
     f5a:	0f 92       	push	r0
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	6a 83       	std	Y+2, r22	; 0x02
     f64:	4b 83       	std	Y+3, r20	; 0x03
    // TODO
	switch (port) {
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	3d 83       	std	Y+5, r19	; 0x05
     f6e:	2c 83       	std	Y+4, r18	; 0x04
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	9d 81       	ldd	r25, Y+5	; 0x05
     f74:	82 30       	cpi	r24, 0x02	; 2
     f76:	91 05       	cpc	r25, r1
     f78:	09 f4       	brne	.+2      	; 0xf7c <MDIO_SetPinOutput+0x2a>
     f7a:	44 c0       	rjmp	.+136    	; 0x1004 <MDIO_SetPinOutput+0xb2>
     f7c:	2c 81       	ldd	r18, Y+4	; 0x04
     f7e:	3d 81       	ldd	r19, Y+5	; 0x05
     f80:	23 30       	cpi	r18, 0x03	; 3
     f82:	31 05       	cpc	r19, r1
     f84:	34 f4       	brge	.+12     	; 0xf92 <MDIO_SetPinOutput+0x40>
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	9d 81       	ldd	r25, Y+5	; 0x05
     f8a:	81 30       	cpi	r24, 0x01	; 1
     f8c:	91 05       	cpc	r25, r1
     f8e:	71 f0       	breq	.+28     	; 0xfac <MDIO_SetPinOutput+0x5a>
     f90:	bc c0       	rjmp	.+376    	; 0x110a <MDIO_SetPinOutput+0x1b8>
     f92:	2c 81       	ldd	r18, Y+4	; 0x04
     f94:	3d 81       	ldd	r19, Y+5	; 0x05
     f96:	23 30       	cpi	r18, 0x03	; 3
     f98:	31 05       	cpc	r19, r1
     f9a:	09 f4       	brne	.+2      	; 0xf9e <MDIO_SetPinOutput+0x4c>
     f9c:	5f c0       	rjmp	.+190    	; 0x105c <MDIO_SetPinOutput+0x10a>
     f9e:	8c 81       	ldd	r24, Y+4	; 0x04
     fa0:	9d 81       	ldd	r25, Y+5	; 0x05
     fa2:	84 30       	cpi	r24, 0x04	; 4
     fa4:	91 05       	cpc	r25, r1
     fa6:	09 f4       	brne	.+2      	; 0xfaa <MDIO_SetPinOutput+0x58>
     fa8:	85 c0       	rjmp	.+266    	; 0x10b4 <MDIO_SetPinOutput+0x162>
     faa:	af c0       	rjmp	.+350    	; 0x110a <MDIO_SetPinOutput+0x1b8>
	case PORTA:
		if (output) SET_BIT(MDIO_PORTA, bitNum);
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	88 23       	and	r24, r24
     fb0:	a1 f0       	breq	.+40     	; 0xfda <MDIO_SetPinOutput+0x88>
     fb2:	ab e3       	ldi	r26, 0x3B	; 59
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	eb e3       	ldi	r30, 0x3B	; 59
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <MDIO_SetPinOutput+0x7e>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <MDIO_SetPinOutput+0x7a>
     fd4:	84 2b       	or	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	98 c0       	rjmp	.+304    	; 0x110a <MDIO_SetPinOutput+0x1b8>
		else 		CLR_BIT(MDIO_PORTA, bitNum);
     fda:	ab e3       	ldi	r26, 0x3B	; 59
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	eb e3       	ldi	r30, 0x3B	; 59
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <MDIO_SetPinOutput+0xa6>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <MDIO_SetPinOutput+0xa2>
     ffc:	80 95       	com	r24
     ffe:	84 23       	and	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	83 c0       	rjmp	.+262    	; 0x110a <MDIO_SetPinOutput+0x1b8>
		break;
	case PORTB:
		if (output) SET_BIT(MDIO_PORTB, bitNum);
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	88 23       	and	r24, r24
    1008:	a1 f0       	breq	.+40     	; 0x1032 <MDIO_SetPinOutput+0xe0>
    100a:	a8 e3       	ldi	r26, 0x38	; 56
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e8 e3       	ldi	r30, 0x38	; 56
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <MDIO_SetPinOutput+0xd6>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <MDIO_SetPinOutput+0xd2>
    102c:	84 2b       	or	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	6c c0       	rjmp	.+216    	; 0x110a <MDIO_SetPinOutput+0x1b8>
		else 		CLR_BIT(MDIO_PORTB, bitNum);
    1032:	a8 e3       	ldi	r26, 0x38	; 56
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e8 e3       	ldi	r30, 0x38	; 56
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <MDIO_SetPinOutput+0xfe>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <MDIO_SetPinOutput+0xfa>
    1054:	80 95       	com	r24
    1056:	84 23       	and	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	57 c0       	rjmp	.+174    	; 0x110a <MDIO_SetPinOutput+0x1b8>
		break;
	case PORTC:
		if (output) SET_BIT(MDIO_PORTC, bitNum);
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	88 23       	and	r24, r24
    1060:	a1 f0       	breq	.+40     	; 0x108a <MDIO_SetPinOutput+0x138>
    1062:	a5 e3       	ldi	r26, 0x35	; 53
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e5 e3       	ldi	r30, 0x35	; 53
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <MDIO_SetPinOutput+0x12e>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <MDIO_SetPinOutput+0x12a>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	40 c0       	rjmp	.+128    	; 0x110a <MDIO_SetPinOutput+0x1b8>
		else 		CLR_BIT(MDIO_PORTC, bitNum);
    108a:	a5 e3       	ldi	r26, 0x35	; 53
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e5 e3       	ldi	r30, 0x35	; 53
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <MDIO_SetPinOutput+0x156>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <MDIO_SetPinOutput+0x152>
    10ac:	80 95       	com	r24
    10ae:	84 23       	and	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	2b c0       	rjmp	.+86     	; 0x110a <MDIO_SetPinOutput+0x1b8>
		break;
	case PORTD:
		if (output) SET_BIT(MDIO_PORTD, bitNum);
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	88 23       	and	r24, r24
    10b8:	a1 f0       	breq	.+40     	; 0x10e2 <MDIO_SetPinOutput+0x190>
    10ba:	a2 e3       	ldi	r26, 0x32	; 50
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e2 e3       	ldi	r30, 0x32	; 50
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <MDIO_SetPinOutput+0x186>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <MDIO_SetPinOutput+0x182>
    10dc:	84 2b       	or	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	14 c0       	rjmp	.+40     	; 0x110a <MDIO_SetPinOutput+0x1b8>
		else 		CLR_BIT(MDIO_PORTD, bitNum);
    10e2:	a2 e3       	ldi	r26, 0x32	; 50
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e2 e3       	ldi	r30, 0x32	; 50
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <MDIO_SetPinOutput+0x1ae>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <MDIO_SetPinOutput+0x1aa>
    1104:	80 95       	com	r24
    1106:	84 23       	and	r24, r20
    1108:	8c 93       	st	X, r24
		break;
	default:
		break;
	} // end switch(port)
	return;
} // end MDIO_SetPinOutput
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <MDIO_SetPortValue>:

void MDIO_SetPortValue (uint8 port, uint8 val) {
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <MDIO_SetPortValue+0x6>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <MDIO_SetPortValue+0x8>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	6a 83       	std	Y+2, r22	; 0x02
	switch (port) {
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	3c 83       	std	Y+4, r19	; 0x04
    1132:	2b 83       	std	Y+3, r18	; 0x03
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	9c 81       	ldd	r25, Y+4	; 0x04
    1138:	82 30       	cpi	r24, 0x02	; 2
    113a:	91 05       	cpc	r25, r1
    113c:	d9 f0       	breq	.+54     	; 0x1174 <MDIO_SetPortValue+0x5a>
    113e:	2b 81       	ldd	r18, Y+3	; 0x03
    1140:	3c 81       	ldd	r19, Y+4	; 0x04
    1142:	23 30       	cpi	r18, 0x03	; 3
    1144:	31 05       	cpc	r19, r1
    1146:	34 f4       	brge	.+12     	; 0x1154 <MDIO_SetPortValue+0x3a>
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	91 05       	cpc	r25, r1
    1150:	61 f0       	breq	.+24     	; 0x116a <MDIO_SetPortValue+0x50>
    1152:	1e c0       	rjmp	.+60     	; 0x1190 <MDIO_SetPortValue+0x76>
    1154:	2b 81       	ldd	r18, Y+3	; 0x03
    1156:	3c 81       	ldd	r19, Y+4	; 0x04
    1158:	23 30       	cpi	r18, 0x03	; 3
    115a:	31 05       	cpc	r19, r1
    115c:	81 f0       	breq	.+32     	; 0x117e <MDIO_SetPortValue+0x64>
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	84 30       	cpi	r24, 0x04	; 4
    1164:	91 05       	cpc	r25, r1
    1166:	81 f0       	breq	.+32     	; 0x1188 <MDIO_SetPortValue+0x6e>
    1168:	13 c0       	rjmp	.+38     	; 0x1190 <MDIO_SetPortValue+0x76>
	case PORTA:
		MDIO_PORTA = val;
    116a:	eb e3       	ldi	r30, 0x3B	; 59
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	80 83       	st	Z, r24
    1172:	0e c0       	rjmp	.+28     	; 0x1190 <MDIO_SetPortValue+0x76>
		break;
	case PORTB:
		MDIO_PORTB = val;
    1174:	e8 e3       	ldi	r30, 0x38	; 56
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	80 83       	st	Z, r24
    117c:	09 c0       	rjmp	.+18     	; 0x1190 <MDIO_SetPortValue+0x76>
		break;
	case PORTC:
		MDIO_PORTC = val;
    117e:	e5 e3       	ldi	r30, 0x35	; 53
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	80 83       	st	Z, r24
    1186:	04 c0       	rjmp	.+8      	; 0x1190 <MDIO_SetPortValue+0x76>
		break;
	case PORTD:
		MDIO_PORTD = val;
    1188:	e2 e3       	ldi	r30, 0x32	; 50
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	80 83       	st	Z, r24
		break;
	} // end switch(port)
	return;
}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <MDIO_GetPinValue>:

uint8 MDIO_GetPinValue (uint8 port, uint8 bitNum) {
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <MDIO_GetPinValue+0x6>
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <MDIO_GetPinValue+0x8>
    11a6:	0f 92       	push	r0
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	8a 83       	std	Y+2, r24	; 0x02
    11ae:	6b 83       	std	Y+3, r22	; 0x03
    // TODO
	uint8 val;
	switch (port) {
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	3d 83       	std	Y+5, r19	; 0x05
    11b8:	2c 83       	std	Y+4, r18	; 0x04
    11ba:	4c 81       	ldd	r20, Y+4	; 0x04
    11bc:	5d 81       	ldd	r21, Y+5	; 0x05
    11be:	42 30       	cpi	r20, 0x02	; 2
    11c0:	51 05       	cpc	r21, r1
    11c2:	41 f1       	breq	.+80     	; 0x1214 <MDIO_GetPinValue+0x76>
    11c4:	8c 81       	ldd	r24, Y+4	; 0x04
    11c6:	9d 81       	ldd	r25, Y+5	; 0x05
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	91 05       	cpc	r25, r1
    11cc:	34 f4       	brge	.+12     	; 0x11da <MDIO_GetPinValue+0x3c>
    11ce:	2c 81       	ldd	r18, Y+4	; 0x04
    11d0:	3d 81       	ldd	r19, Y+5	; 0x05
    11d2:	21 30       	cpi	r18, 0x01	; 1
    11d4:	31 05       	cpc	r19, r1
    11d6:	61 f0       	breq	.+24     	; 0x11f0 <MDIO_GetPinValue+0x52>
    11d8:	53 c0       	rjmp	.+166    	; 0x1280 <MDIO_GetPinValue+0xe2>
    11da:	4c 81       	ldd	r20, Y+4	; 0x04
    11dc:	5d 81       	ldd	r21, Y+5	; 0x05
    11de:	43 30       	cpi	r20, 0x03	; 3
    11e0:	51 05       	cpc	r21, r1
    11e2:	51 f1       	breq	.+84     	; 0x1238 <MDIO_GetPinValue+0x9a>
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	9d 81       	ldd	r25, Y+5	; 0x05
    11e8:	84 30       	cpi	r24, 0x04	; 4
    11ea:	91 05       	cpc	r25, r1
    11ec:	b9 f1       	breq	.+110    	; 0x125c <MDIO_GetPinValue+0xbe>
    11ee:	48 c0       	rjmp	.+144    	; 0x1280 <MDIO_GetPinValue+0xe2>
	case PORTA:
		val = GET_BIT(MDIO_PINA, bitNum);
    11f0:	e9 e3       	ldi	r30, 0x39	; 57
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a9 01       	movw	r20, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <MDIO_GetPinValue+0x6a>
    1204:	55 95       	asr	r21
    1206:	47 95       	ror	r20
    1208:	8a 95       	dec	r24
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <MDIO_GetPinValue+0x66>
    120c:	ca 01       	movw	r24, r20
    120e:	81 70       	andi	r24, 0x01	; 1
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	38 c0       	rjmp	.+112    	; 0x1284 <MDIO_GetPinValue+0xe6>
		break;
	case PORTB:
		val = GET_BIT(MDIO_PINB, bitNum);
    1214:	e6 e3       	ldi	r30, 0x36	; 54
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	a9 01       	movw	r20, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <MDIO_GetPinValue+0x8e>
    1228:	55 95       	asr	r21
    122a:	47 95       	ror	r20
    122c:	8a 95       	dec	r24
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <MDIO_GetPinValue+0x8a>
    1230:	ca 01       	movw	r24, r20
    1232:	81 70       	andi	r24, 0x01	; 1
    1234:	89 83       	std	Y+1, r24	; 0x01
    1236:	26 c0       	rjmp	.+76     	; 0x1284 <MDIO_GetPinValue+0xe6>
		break;
	case PORTC:
		val = GET_BIT(MDIO_PINC, bitNum);
    1238:	e3 e3       	ldi	r30, 0x33	; 51
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	a9 01       	movw	r20, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <MDIO_GetPinValue+0xb2>
    124c:	55 95       	asr	r21
    124e:	47 95       	ror	r20
    1250:	8a 95       	dec	r24
    1252:	e2 f7       	brpl	.-8      	; 0x124c <MDIO_GetPinValue+0xae>
    1254:	ca 01       	movw	r24, r20
    1256:	81 70       	andi	r24, 0x01	; 1
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	14 c0       	rjmp	.+40     	; 0x1284 <MDIO_GetPinValue+0xe6>
		break;
	case PORTD:
		val = GET_BIT(MDIO_PIND, bitNum);
    125c:	e0 e3       	ldi	r30, 0x30	; 48
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	88 2f       	mov	r24, r24
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	a9 01       	movw	r20, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <MDIO_GetPinValue+0xd6>
    1270:	55 95       	asr	r21
    1272:	47 95       	ror	r20
    1274:	8a 95       	dec	r24
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <MDIO_GetPinValue+0xd2>
    1278:	ca 01       	movw	r24, r20
    127a:	81 70       	andi	r24, 0x01	; 1
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <MDIO_GetPinValue+0xe6>
		break;
	default:
		val = 0xff;
    1280:	8f ef       	ldi	r24, 0xFF	; 255
    1282:	89 83       	std	Y+1, r24	; 0x01
	} // end switch(port)
	return val;
    1284:	89 81       	ldd	r24, Y+1	; 0x01
} // end MDIO_GetPinValue
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <MDIO_GetPortValue>:

uint8 MDIO_GetPortValue (uint8 port) {
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <MDIO_GetPortValue+0x6>
    129c:	00 d0       	rcall	.+0      	; 0x129e <MDIO_GetPortValue+0x8>
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	8a 83       	std	Y+2, r24	; 0x02
    // TODO
	uint8 val;
	switch (port) {
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	3c 83       	std	Y+4, r19	; 0x04
    12ac:	2b 83       	std	Y+3, r18	; 0x03
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	82 30       	cpi	r24, 0x02	; 2
    12b4:	91 05       	cpc	r25, r1
    12b6:	d9 f0       	breq	.+54     	; 0x12ee <MDIO_GetPortValue+0x58>
    12b8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ba:	3c 81       	ldd	r19, Y+4	; 0x04
    12bc:	23 30       	cpi	r18, 0x03	; 3
    12be:	31 05       	cpc	r19, r1
    12c0:	34 f4       	brge	.+12     	; 0x12ce <MDIO_GetPortValue+0x38>
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	91 05       	cpc	r25, r1
    12ca:	61 f0       	breq	.+24     	; 0x12e4 <MDIO_GetPortValue+0x4e>
    12cc:	1f c0       	rjmp	.+62     	; 0x130c <MDIO_GetPortValue+0x76>
    12ce:	2b 81       	ldd	r18, Y+3	; 0x03
    12d0:	3c 81       	ldd	r19, Y+4	; 0x04
    12d2:	23 30       	cpi	r18, 0x03	; 3
    12d4:	31 05       	cpc	r19, r1
    12d6:	81 f0       	breq	.+32     	; 0x12f8 <MDIO_GetPortValue+0x62>
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	84 30       	cpi	r24, 0x04	; 4
    12de:	91 05       	cpc	r25, r1
    12e0:	81 f0       	breq	.+32     	; 0x1302 <MDIO_GetPortValue+0x6c>
    12e2:	14 c0       	rjmp	.+40     	; 0x130c <MDIO_GetPortValue+0x76>
	case PORTA:
		val = MDIO_PINA;
    12e4:	e9 e3       	ldi	r30, 0x39	; 57
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	11 c0       	rjmp	.+34     	; 0x1310 <MDIO_GetPortValue+0x7a>
		break;
	case PORTB:
		val = MDIO_PINB;
    12ee:	e6 e3       	ldi	r30, 0x36	; 54
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	0c c0       	rjmp	.+24     	; 0x1310 <MDIO_GetPortValue+0x7a>
		break;
	case PORTC:
		val = MDIO_PINC;
    12f8:	e3 e3       	ldi	r30, 0x33	; 51
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	07 c0       	rjmp	.+14     	; 0x1310 <MDIO_GetPortValue+0x7a>
		break;
	case PORTD:
		val = MDIO_PIND;
    1302:	e0 e3       	ldi	r30, 0x30	; 48
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <MDIO_GetPortValue+0x7a>
		break;
	default:
		val = 0xff;
    130c:	8f ef       	ldi	r24, 0xFF	; 255
    130e:	89 83       	std	Y+1, r24	; 0x01
	} // end switch(port)
	return val;
    1310:	89 81       	ldd	r24, Y+1	; 0x01
} // end MDIO_GetPortValue
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <HKeyPad_init>:
#include "../MCAL/MDIO_interface.h"
#include "HKeyPad_private.h"
#include "HKeyPad_interface.h"


void HKeyPad_init() {
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    MDIO_SetPortDirection(KPD_PORT, KPD_DIRECTION);
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	6f e0       	ldi	r22, 0x0F	; 15
    132c:	0e 94 67 07 	call	0xece	; 0xece <MDIO_SetPortDirection>
    MDIO_SetPortValue(KPD_PORT, ~(KPD_DIRECTION));
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	60 ef       	ldi	r22, 0xF0	; 240
    1334:	0e 94 8d 08 	call	0x111a	; 0x111a <MDIO_SetPortValue>
}// end HKeyPad_init
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <HKeyPad_getKey>:


uint8 HKeyPad_getKey(void) {
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <HKeyPad_getKey+0x6>
    1344:	00 d0       	rcall	.+0      	; 0x1346 <HKeyPad_getKey+0x8>
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    uint8 pressedButton;
    for (uint8 i=0; i<4; i++) {
    134a:	1a 82       	std	Y+2, r1	; 0x02
    134c:	43 c0       	rjmp	.+134    	; 0x13d4 <HKeyPad_getKey+0x96>
    	// switch all columns to HIGH
    	MDIO_SetPinOutput(KPD_PORT, 0, HIGH);
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	41 e0       	ldi	r20, 0x01	; 1
    1354:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>
    	MDIO_SetPinOutput(KPD_PORT, 1, HIGH);
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	61 e0       	ldi	r22, 0x01	; 1
    135c:	41 e0       	ldi	r20, 0x01	; 1
    135e:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>
    	MDIO_SetPinOutput(KPD_PORT, 2, HIGH);
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	62 e0       	ldi	r22, 0x02	; 2
    1366:	41 e0       	ldi	r20, 0x01	; 1
    1368:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>
    	MDIO_SetPinOutput(KPD_PORT, 3, HIGH);
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	63 e0       	ldi	r22, 0x03	; 3
    1370:	41 e0       	ldi	r20, 0x01	; 1
    1372:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>

    	// set the current column to LOW
        MDIO_SetPinOutput(KPD_PORT, i, LOW);
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	6a 81       	ldd	r22, Y+2	; 0x02
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>

        // read each row
        for (uint8 j=4; j<8; j++) {
    1380:	84 e0       	ldi	r24, 0x04	; 4
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	21 c0       	rjmp	.+66     	; 0x13c8 <HKeyPad_getKey+0x8a>
            pressedButton = MDIO_GetPinValue(KPD_PORT, j);
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	69 81       	ldd	r22, Y+1	; 0x01
    138a:	0e 94 cf 08 	call	0x119e	; 0x119e <MDIO_GetPinValue>
    138e:	8b 83       	std	Y+3, r24	; 0x03
            // if row=0 at the current column, then switch (row, column) is pressed
            if (!pressedButton)
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	88 23       	and	r24, r24
    1394:	b1 f4       	brne	.+44     	; 0x13c2 <HKeyPad_getKey+0x84>
                return KPD_arr[j-4][i];
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	88 2f       	mov	r24, r24
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	ac 01       	movw	r20, r24
    139e:	44 50       	subi	r20, 0x04	; 4
    13a0:	50 40       	sbci	r21, 0x00	; 0
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	ca 01       	movw	r24, r20
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	82 0f       	add	r24, r18
    13b4:	93 1f       	adc	r25, r19
    13b6:	fc 01       	movw	r30, r24
    13b8:	e8 59       	subi	r30, 0x98	; 152
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	80 81       	ld	r24, Z
    13be:	8c 83       	std	Y+4, r24	; 0x04
    13c0:	0e c0       	rjmp	.+28     	; 0x13de <HKeyPad_getKey+0xa0>

    	// set the current column to LOW
        MDIO_SetPinOutput(KPD_PORT, i, LOW);

        // read each row
        for (uint8 j=4; j<8; j++) {
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	8f 5f       	subi	r24, 0xFF	; 255
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	88 30       	cpi	r24, 0x08	; 8
    13cc:	e0 f2       	brcs	.-72     	; 0x1386 <HKeyPad_getKey+0x48>
}// end HKeyPad_init


uint8 HKeyPad_getKey(void) {
    uint8 pressedButton;
    for (uint8 i=0; i<4; i++) {
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	8f 5f       	subi	r24, 0xFF	; 255
    13d2:	8a 83       	std	Y+2, r24	; 0x02
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	84 30       	cpi	r24, 0x04	; 4
    13d8:	08 f4       	brcc	.+2      	; 0x13dc <HKeyPad_getKey+0x9e>
    13da:	b9 cf       	rjmp	.-142    	; 0x134e <HKeyPad_getKey+0x10>
            // if row=0 at the current column, then switch (row, column) is pressed
            if (!pressedButton)
                return KPD_arr[j-4][i];
        }
    }// end for
    return 0;
    13dc:	1c 82       	std	Y+4, r1	; 0x04
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
}// end HKeyPad_getKey
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <HLCD_init_character>:
#include "HLCD_private.h"
#include "HLCD_interface.h"
#include <util/delay.h>


void HLCD_init_character(void) {
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	2e 97       	sbiw	r28, 0x0e	; 14
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
			0b00010001,
			0b00001010,
			0b00001010,
			0b00000100,
			0b00000000
		};
    1402:	ce 01       	movw	r24, r28
    1404:	02 96       	adiw	r24, 0x02	; 2
    1406:	9b 87       	std	Y+11, r25	; 0x0b
    1408:	8a 87       	std	Y+10, r24	; 0x0a
    140a:	e3 e8       	ldi	r30, 0x83	; 131
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	fd 87       	std	Y+13, r31	; 0x0d
    1410:	ec 87       	std	Y+12, r30	; 0x0c
    1412:	f8 e0       	ldi	r31, 0x08	; 8
    1414:	fe 87       	std	Y+14, r31	; 0x0e
    1416:	ec 85       	ldd	r30, Y+12	; 0x0c
    1418:	fd 85       	ldd	r31, Y+13	; 0x0d
    141a:	00 80       	ld	r0, Z
    141c:	8c 85       	ldd	r24, Y+12	; 0x0c
    141e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1420:	01 96       	adiw	r24, 0x01	; 1
    1422:	9d 87       	std	Y+13, r25	; 0x0d
    1424:	8c 87       	std	Y+12, r24	; 0x0c
    1426:	ea 85       	ldd	r30, Y+10	; 0x0a
    1428:	fb 85       	ldd	r31, Y+11	; 0x0b
    142a:	00 82       	st	Z, r0
    142c:	8a 85       	ldd	r24, Y+10	; 0x0a
    142e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	9b 87       	std	Y+11, r25	; 0x0b
    1434:	8a 87       	std	Y+10, r24	; 0x0a
    1436:	9e 85       	ldd	r25, Y+14	; 0x0e
    1438:	91 50       	subi	r25, 0x01	; 1
    143a:	9e 87       	std	Y+14, r25	; 0x0e
    143c:	ee 85       	ldd	r30, Y+14	; 0x0e
    143e:	ee 23       	and	r30, r30
    1440:	51 f7       	brne	.-44     	; 0x1416 <HLCD_init_character+0x28>
	HLCD_writeCMD(0b01000000);	// set CGRAM address
    1442:	80 e4       	ldi	r24, 0x40	; 64
    1444:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
	for (char i=0; i<8; i++)
    1448:	19 82       	std	Y+1, r1	; 0x01
    144a:	0e c0       	rjmp	.+28     	; 0x1468 <HLCD_init_character+0x7a>
		HLCD_writeData(character[i]);	// write the new character bytes to the CGRAM
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	ce 01       	movw	r24, r28
    1454:	02 96       	adiw	r24, 0x02	; 2
    1456:	fc 01       	movw	r30, r24
    1458:	e2 0f       	add	r30, r18
    145a:	f3 1f       	adc	r31, r19
    145c:	80 81       	ld	r24, Z
    145e:	0e 94 2a 10 	call	0x2054	; 0x2054 <HLCD_writeData>
			0b00001010,
			0b00000100,
			0b00000000
		};
	HLCD_writeCMD(0b01000000);	// set CGRAM address
	for (char i=0; i<8; i++)
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	8f 5f       	subi	r24, 0xFF	; 255
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	88 30       	cpi	r24, 0x08	; 8
    146c:	78 f3       	brcs	.-34     	; 0x144c <HLCD_init_character+0x5e>
		HLCD_writeData(character[i]);	// write the new character bytes to the CGRAM
	HLCD_writeCMD(0b10000000);		// set DDRAM address to 0x00
    146e:	80 e8       	ldi	r24, 0x80	; 128
    1470:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
}
    1474:	2e 96       	adiw	r28, 0x0e	; 14
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <HLCD_writeText>:

void HLCD_writeText(uint8 * text) {
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	00 d0       	rcall	.+0      	; 0x148c <HLCD_writeText+0x6>
    148c:	0f 92       	push	r0
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	9b 83       	std	Y+3, r25	; 0x03
    1494:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i=0; text[i]!='\0'; i++)
    1496:	19 82       	std	Y+1, r1	; 0x01
    1498:	0e c0       	rjmp	.+28     	; 0x14b6 <HLCD_writeText+0x30>
		HLCD_writeData(text[i]);
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	9b 81       	ldd	r25, Y+3	; 0x03
    14a4:	fc 01       	movw	r30, r24
    14a6:	e2 0f       	add	r30, r18
    14a8:	f3 1f       	adc	r31, r19
    14aa:	80 81       	ld	r24, Z
    14ac:	0e 94 2a 10 	call	0x2054	; 0x2054 <HLCD_writeData>
		HLCD_writeData(character[i]);	// write the new character bytes to the CGRAM
	HLCD_writeCMD(0b10000000);		// set DDRAM address to 0x00
}

void HLCD_writeText(uint8 * text) {
	for (uint8 i=0; text[i]!='\0'; i++)
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	8f 5f       	subi	r24, 0xFF	; 255
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	9b 81       	ldd	r25, Y+3	; 0x03
    14c0:	fc 01       	movw	r30, r24
    14c2:	e2 0f       	add	r30, r18
    14c4:	f3 1f       	adc	r31, r19
    14c6:	80 81       	ld	r24, Z
    14c8:	88 23       	and	r24, r24
    14ca:	39 f7       	brne	.-50     	; 0x149a <HLCD_writeText+0x14>
		HLCD_writeData(text[i]);
	return;
}
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <HLCD_clear>:

void HLCD_clear(void) {
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
	if (mode == HLCD_8_BIT)
    14e0:	80 91 78 00 	lds	r24, 0x0078
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	21 f4       	brne	.+8      	; 0x14f0 <HLCD_clear+0x18>
		HLCD_writeCMD(0b00000001);
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
    14ee:	06 c0       	rjmp	.+12     	; 0x14fc <HLCD_clear+0x24>
	else {
		HLCD_writeCMD(0b00000001);
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
		HLCD_writeCMD(0b00000001 << 4);
    14f6:	80 e1       	ldi	r24, 0x10	; 16
    14f8:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
	}
	return;
}// end HLCD_clear
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <HLCD_setLine>:

void HLCD_setLine(uint8 line) {
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	0f 92       	push	r0
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	89 83       	std	Y+1, r24	; 0x01
	HLCD_setCursor(line, 0);
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	0e 94 8f 0a 	call	0x151e	; 0x151e <HLCD_setCursor>
	return;
}// end setLine
    1516:	0f 90       	pop	r0
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	08 95       	ret

0000151e <HLCD_setCursor>:

void HLCD_setCursor (uint8 line, uint8 offset) {
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	00 d0       	rcall	.+0      	; 0x1524 <HLCD_setCursor+0x6>
    1524:	0f 92       	push	r0
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	8a 83       	std	Y+2, r24	; 0x02
    152c:	6b 83       	std	Y+3, r22	; 0x03
		uint8 cmd = ( (line * HLCD_LINE_2_ADDR)|(HLCD_SET_RAM_ADDR_B7) ) + offset;	// AC address is 7-bit while instruction is 8 bit, b7 is 1
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	88 2f       	mov	r24, r24
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	00 24       	eor	r0, r0
    1536:	96 95       	lsr	r25
    1538:	87 95       	ror	r24
    153a:	07 94       	ror	r0
    153c:	96 95       	lsr	r25
    153e:	87 95       	ror	r24
    1540:	07 94       	ror	r0
    1542:	98 2f       	mov	r25, r24
    1544:	80 2d       	mov	r24, r0
    1546:	80 68       	ori	r24, 0x80	; 128
    1548:	98 2f       	mov	r25, r24
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	89 0f       	add	r24, r25
    154e:	89 83       	std	Y+1, r24	; 0x01
		if (mode == HLCD_8_BIT)
    1550:	80 91 78 00 	lds	r24, 0x0078
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	21 f4       	brne	.+8      	; 0x1560 <HLCD_setCursor+0x42>
			HLCD_writeCMD(cmd);
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
    155e:	08 c0       	rjmp	.+16     	; 0x1570 <HLCD_setCursor+0x52>
		else {
			HLCD_writeCMD(cmd);
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
			HLCD_writeCMD(cmd << 4);
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	82 95       	swap	r24
    156a:	80 7f       	andi	r24, 0xF0	; 240
    156c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
		}
	return;
}
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <HLCD_shiftDisplay>:

void HLCD_shiftDisplay(uint8 direction) {
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	0f 92       	push	r0
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	89 83       	std	Y+1, r24	; 0x01
	if (mode == HLCD_8_BIT) {
    1588:	80 91 78 00 	lds	r24, 0x0078
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	71 f4       	brne	.+28     	; 0x15ac <HLCD_shiftDisplay+0x30>


		if (direction == SHIFT_LEFT)
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	21 f4       	brne	.+8      	; 0x159e <HLCD_shiftDisplay+0x22>
			HLCD_writeCMD(0b00011000);
    1596:	88 e1       	ldi	r24, 0x18	; 24
    1598:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
    159c:	1a c0       	rjmp	.+52     	; 0x15d2 <HLCD_shiftDisplay+0x56>
		else if (direction == SHIFT_RIGHT)
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	82 30       	cpi	r24, 0x02	; 2
    15a2:	b9 f4       	brne	.+46     	; 0x15d2 <HLCD_shiftDisplay+0x56>
			HLCD_writeCMD(0b00011100);
    15a4:	8c e1       	ldi	r24, 0x1C	; 28
    15a6:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
    15aa:	13 c0       	rjmp	.+38     	; 0x15d2 <HLCD_shiftDisplay+0x56>


	}else {


		if (direction == SHIFT_LEFT) {
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	39 f4       	brne	.+14     	; 0x15c0 <HLCD_shiftDisplay+0x44>
			HLCD_writeCMD(0b00011000);
    15b2:	88 e1       	ldi	r24, 0x18	; 24
    15b4:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
			HLCD_writeCMD(0b00011000 << 4);
    15b8:	80 e8       	ldi	r24, 0x80	; 128
    15ba:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
    15be:	09 c0       	rjmp	.+18     	; 0x15d2 <HLCD_shiftDisplay+0x56>
		}
		else if (direction == SHIFT_RIGHT) {
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	82 30       	cpi	r24, 0x02	; 2
    15c4:	31 f4       	brne	.+12     	; 0x15d2 <HLCD_shiftDisplay+0x56>
			HLCD_writeCMD(0b00011100);
    15c6:	8c e1       	ldi	r24, 0x1C	; 28
    15c8:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
			HLCD_writeCMD(0b00011100 << 4);
    15cc:	80 ec       	ldi	r24, 0xC0	; 192
    15ce:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
		}


	}
	return;
}// end HLCD_shiftDisplay
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <HLCD_shiftCursor>:

void HLCD_shiftCursor(uint8 direction, uint8 steps) {
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <HLCD_shiftCursor+0x6>
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <HLCD_shiftCursor+0x8>
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <HLCD_shiftCursor+0xa>
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	8d 83       	std	Y+5, r24	; 0x05
    15ea:	6e 83       	std	Y+6, r22	; 0x06


	if (mode == HLCD_8_BIT) {
    15ec:	80 91 78 00 	lds	r24, 0x0078
    15f0:	81 30       	cpi	r24, 0x01	; 1
    15f2:	01 f5       	brne	.+64     	; 0x1634 <HLCD_shiftCursor+0x5a>


		if (direction == SHIFT_LEFT)
    15f4:	8d 81       	ldd	r24, Y+5	; 0x05
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	69 f4       	brne	.+26     	; 0x1614 <HLCD_shiftCursor+0x3a>
			for (uint8 i=0; i<steps; i++)
    15fa:	1c 82       	std	Y+4, r1	; 0x04
    15fc:	06 c0       	rjmp	.+12     	; 0x160a <HLCD_shiftCursor+0x30>
				HLCD_writeCMD(0b00010000);
    15fe:	80 e1       	ldi	r24, 0x10	; 16
    1600:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>

	if (mode == HLCD_8_BIT) {


		if (direction == SHIFT_LEFT)
			for (uint8 i=0; i<steps; i++)
    1604:	8c 81       	ldd	r24, Y+4	; 0x04
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	8c 83       	std	Y+4, r24	; 0x04
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	8e 81       	ldd	r24, Y+6	; 0x06
    160e:	98 17       	cp	r25, r24
    1610:	b0 f3       	brcs	.-20     	; 0x15fe <HLCD_shiftCursor+0x24>
    1612:	35 c0       	rjmp	.+106    	; 0x167e <HLCD_shiftCursor+0xa4>
				HLCD_writeCMD(0b00010000);
		else if (direction == SHIFT_RIGHT)
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	82 30       	cpi	r24, 0x02	; 2
    1618:	91 f5       	brne	.+100    	; 0x167e <HLCD_shiftCursor+0xa4>
			for (uint8 i=0; i<steps; i++)
    161a:	1b 82       	std	Y+3, r1	; 0x03
    161c:	06 c0       	rjmp	.+12     	; 0x162a <HLCD_shiftCursor+0x50>
				HLCD_writeCMD(0b00010100);
    161e:	84 e1       	ldi	r24, 0x14	; 20
    1620:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>

		if (direction == SHIFT_LEFT)
			for (uint8 i=0; i<steps; i++)
				HLCD_writeCMD(0b00010000);
		else if (direction == SHIFT_RIGHT)
			for (uint8 i=0; i<steps; i++)
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	8f 5f       	subi	r24, 0xFF	; 255
    1628:	8b 83       	std	Y+3, r24	; 0x03
    162a:	9b 81       	ldd	r25, Y+3	; 0x03
    162c:	8e 81       	ldd	r24, Y+6	; 0x06
    162e:	98 17       	cp	r25, r24
    1630:	b0 f3       	brcs	.-20     	; 0x161e <HLCD_shiftCursor+0x44>
    1632:	25 c0       	rjmp	.+74     	; 0x167e <HLCD_shiftCursor+0xa4>


	}else{


		if (direction == SHIFT_LEFT) {
    1634:	8d 81       	ldd	r24, Y+5	; 0x05
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	81 f4       	brne	.+32     	; 0x165a <HLCD_shiftCursor+0x80>
			for (uint8 i=0; i<steps; i++) {
    163a:	1a 82       	std	Y+2, r1	; 0x02
    163c:	09 c0       	rjmp	.+18     	; 0x1650 <HLCD_shiftCursor+0x76>
				HLCD_writeCMD(0b00010000);
    163e:	80 e1       	ldi	r24, 0x10	; 16
    1640:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
				HLCD_writeCMD(0b00010000 << 4);
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>

	}else{


		if (direction == SHIFT_LEFT) {
			for (uint8 i=0; i<steps; i++) {
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	8f 5f       	subi	r24, 0xFF	; 255
    164e:	8a 83       	std	Y+2, r24	; 0x02
    1650:	9a 81       	ldd	r25, Y+2	; 0x02
    1652:	8e 81       	ldd	r24, Y+6	; 0x06
    1654:	98 17       	cp	r25, r24
    1656:	98 f3       	brcs	.-26     	; 0x163e <HLCD_shiftCursor+0x64>
    1658:	12 c0       	rjmp	.+36     	; 0x167e <HLCD_shiftCursor+0xa4>
				HLCD_writeCMD(0b00010000);
				HLCD_writeCMD(0b00010000 << 4);
			}
		}else if (direction == SHIFT_RIGHT) {
    165a:	8d 81       	ldd	r24, Y+5	; 0x05
    165c:	82 30       	cpi	r24, 0x02	; 2
    165e:	79 f4       	brne	.+30     	; 0x167e <HLCD_shiftCursor+0xa4>
			for (uint8 i=0; i<steps; i++) {
    1660:	19 82       	std	Y+1, r1	; 0x01
    1662:	09 c0       	rjmp	.+18     	; 0x1676 <HLCD_shiftCursor+0x9c>
				HLCD_writeCMD(0b00010100);
    1664:	84 e1       	ldi	r24, 0x14	; 20
    1666:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
				HLCD_writeCMD(0b00010100 << 4);
    166a:	80 e4       	ldi	r24, 0x40	; 64
    166c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
			for (uint8 i=0; i<steps; i++) {
				HLCD_writeCMD(0b00010000);
				HLCD_writeCMD(0b00010000 << 4);
			}
		}else if (direction == SHIFT_RIGHT) {
			for (uint8 i=0; i<steps; i++) {
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	8f 5f       	subi	r24, 0xFF	; 255
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	99 81       	ldd	r25, Y+1	; 0x01
    1678:	8e 81       	ldd	r24, Y+6	; 0x06
    167a:	98 17       	cp	r25, r24
    167c:	98 f3       	brcs	.-26     	; 0x1664 <HLCD_shiftCursor+0x8a>



	}
	return;
}// end
    167e:	26 96       	adiw	r28, 0x06	; 6
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <HLCD_init>:

void HLCD_init(uint8 m) {
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	c3 56       	subi	r28, 0x63	; 99
    169e:	d0 40       	sbci	r29, 0x00	; 0
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	fe 01       	movw	r30, r28
    16ac:	ed 59       	subi	r30, 0x9D	; 157
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	80 83       	st	Z, r24
	mode = m;
    16b2:	fe 01       	movw	r30, r28
    16b4:	ed 59       	subi	r30, 0x9D	; 157
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	80 81       	ld	r24, Z
    16ba:	80 93 78 00 	sts	0x0078, r24
	// set PORTA as OUTPUT
	if (mode == HLCD_8_BIT) {
    16be:	80 91 78 00 	lds	r24, 0x0078
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	a1 f4       	brne	.+40     	; 0x16ee <HLCD_init+0x5e>
		MDIO_SetPinDirection(HLCD_D0, OUTPUT);
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	41 e0       	ldi	r20, 0x01	; 1
    16cc:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
		MDIO_SetPinDirection(HLCD_D1, OUTPUT);
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	61 e0       	ldi	r22, 0x01	; 1
    16d4:	41 e0       	ldi	r20, 0x01	; 1
    16d6:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
		MDIO_SetPinDirection(HLCD_D2, OUTPUT);
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	62 e0       	ldi	r22, 0x02	; 2
    16de:	41 e0       	ldi	r20, 0x01	; 1
    16e0:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
		MDIO_SetPinDirection(HLCD_D3, OUTPUT);
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	63 e0       	ldi	r22, 0x03	; 3
    16e8:	41 e0       	ldi	r20, 0x01	; 1
    16ea:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
	}
	MDIO_SetPinDirection(HLCD_D4, OUTPUT);
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	64 e0       	ldi	r22, 0x04	; 4
    16f2:	41 e0       	ldi	r20, 0x01	; 1
    16f4:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(HLCD_D5, OUTPUT);
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	65 e0       	ldi	r22, 0x05	; 5
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(HLCD_D6, OUTPUT);
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	66 e0       	ldi	r22, 0x06	; 6
    1706:	41 e0       	ldi	r20, 0x01	; 1
    1708:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(HLCD_D7, OUTPUT);
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	67 e0       	ldi	r22, 0x07	; 7
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
	// set RW as OUTPUT
	MDIO_SetPinDirection(HLCD_RW, OUTPUT);
    1716:	84 e0       	ldi	r24, 0x04	; 4
    1718:	61 e0       	ldi	r22, 0x01	; 1
    171a:	41 e0       	ldi	r20, 0x01	; 1
    171c:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
	// set RS as OUTPUT
	MDIO_SetPinDirection(HLCD_RS, OUTPUT);
    1720:	84 e0       	ldi	r24, 0x04	; 4
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
	// set E as OUTPUT
	MDIO_SetPinDirection(HLCD_E, OUTPUT);
    172a:	84 e0       	ldi	r24, 0x04	; 4
    172c:	62 e0       	ldi	r22, 0x02	; 2
    172e:	41 e0       	ldi	r20, 0x01	; 1
    1730:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>

	// set E to (0)
	MDIO_SetPinOutput(HLCD_E, LOW);
    1734:	84 e0       	ldi	r24, 0x04	; 4
    1736:	62 e0       	ldi	r22, 0x02	; 2
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>
    173e:	fe 01       	movw	r30, r28
    1740:	e1 5a       	subi	r30, 0xA1	; 161
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a8 e4       	ldi	r26, 0x48	; 72
    174a:	b2 e4       	ldi	r27, 0x42	; 66
    174c:	80 83       	st	Z, r24
    174e:	91 83       	std	Z+1, r25	; 0x01
    1750:	a2 83       	std	Z+2, r26	; 0x02
    1752:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1754:	8e 01       	movw	r16, r28
    1756:	05 5a       	subi	r16, 0xA5	; 165
    1758:	1f 4f       	sbci	r17, 0xFF	; 255
    175a:	fe 01       	movw	r30, r28
    175c:	e1 5a       	subi	r30, 0xA1	; 161
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	60 81       	ld	r22, Z
    1762:	71 81       	ldd	r23, Z+1	; 0x01
    1764:	82 81       	ldd	r24, Z+2	; 0x02
    1766:	93 81       	ldd	r25, Z+3	; 0x03
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	4a ef       	ldi	r20, 0xFA	; 250
    176e:	54 e4       	ldi	r21, 0x44	; 68
    1770:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	f8 01       	movw	r30, r16
    177a:	80 83       	st	Z, r24
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	a2 83       	std	Z+2, r26	; 0x02
    1780:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1782:	fe 01       	movw	r30, r28
    1784:	e5 5a       	subi	r30, 0xA5	; 165
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	60 81       	ld	r22, Z
    178a:	71 81       	ldd	r23, Z+1	; 0x01
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	93 81       	ldd	r25, Z+3	; 0x03
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e8       	ldi	r20, 0x80	; 128
    1796:	5f e3       	ldi	r21, 0x3F	; 63
    1798:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    179c:	88 23       	and	r24, r24
    179e:	44 f4       	brge	.+16     	; 0x17b0 <HLCD_init+0x120>
		__ticks = 1;
    17a0:	fe 01       	movw	r30, r28
    17a2:	e7 5a       	subi	r30, 0xA7	; 167
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	91 83       	std	Z+1, r25	; 0x01
    17ac:	80 83       	st	Z, r24
    17ae:	64 c0       	rjmp	.+200    	; 0x1878 <HLCD_init+0x1e8>
	else if (__tmp > 65535)
    17b0:	fe 01       	movw	r30, r28
    17b2:	e5 5a       	subi	r30, 0xA5	; 165
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	60 81       	ld	r22, Z
    17b8:	71 81       	ldd	r23, Z+1	; 0x01
    17ba:	82 81       	ldd	r24, Z+2	; 0x02
    17bc:	93 81       	ldd	r25, Z+3	; 0x03
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	3f ef       	ldi	r19, 0xFF	; 255
    17c2:	4f e7       	ldi	r20, 0x7F	; 127
    17c4:	57 e4       	ldi	r21, 0x47	; 71
    17c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17ca:	18 16       	cp	r1, r24
    17cc:	0c f0       	brlt	.+2      	; 0x17d0 <HLCD_init+0x140>
    17ce:	43 c0       	rjmp	.+134    	; 0x1856 <HLCD_init+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d0:	fe 01       	movw	r30, r28
    17d2:	e1 5a       	subi	r30, 0xA1	; 161
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	60 81       	ld	r22, Z
    17d8:	71 81       	ldd	r23, Z+1	; 0x01
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	93 81       	ldd	r25, Z+3	; 0x03
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e2       	ldi	r20, 0x20	; 32
    17e4:	51 e4       	ldi	r21, 0x41	; 65
    17e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	8e 01       	movw	r16, r28
    17f0:	07 5a       	subi	r16, 0xA7	; 167
    17f2:	1f 4f       	sbci	r17, 0xFF	; 255
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	f8 01       	movw	r30, r16
    1802:	91 83       	std	Z+1, r25	; 0x01
    1804:	80 83       	st	Z, r24
    1806:	1f c0       	rjmp	.+62     	; 0x1846 <HLCD_init+0x1b6>
    1808:	fe 01       	movw	r30, r28
    180a:	e9 5a       	subi	r30, 0xA9	; 169
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	88 ec       	ldi	r24, 0xC8	; 200
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1816:	fe 01       	movw	r30, r28
    1818:	e9 5a       	subi	r30, 0xA9	; 169
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	80 81       	ld	r24, Z
    181e:	91 81       	ldd	r25, Z+1	; 0x01
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <HLCD_init+0x190>
    1824:	fe 01       	movw	r30, r28
    1826:	e9 5a       	subi	r30, 0xA9	; 169
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182e:	de 01       	movw	r26, r28
    1830:	a7 5a       	subi	r26, 0xA7	; 167
    1832:	bf 4f       	sbci	r27, 0xFF	; 255
    1834:	fe 01       	movw	r30, r28
    1836:	e7 5a       	subi	r30, 0xA7	; 167
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	80 81       	ld	r24, Z
    183c:	91 81       	ldd	r25, Z+1	; 0x01
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	11 96       	adiw	r26, 0x01	; 1
    1842:	9c 93       	st	X, r25
    1844:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1846:	fe 01       	movw	r30, r28
    1848:	e7 5a       	subi	r30, 0xA7	; 167
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	80 81       	ld	r24, Z
    184e:	91 81       	ldd	r25, Z+1	; 0x01
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	d1 f6       	brne	.-76     	; 0x1808 <HLCD_init+0x178>
    1854:	28 c0       	rjmp	.+80     	; 0x18a6 <HLCD_init+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1856:	8e 01       	movw	r16, r28
    1858:	07 5a       	subi	r16, 0xA7	; 167
    185a:	1f 4f       	sbci	r17, 0xFF	; 255
    185c:	fe 01       	movw	r30, r28
    185e:	e5 5a       	subi	r30, 0xA5	; 165
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	f8 01       	movw	r30, r16
    1874:	91 83       	std	Z+1, r25	; 0x01
    1876:	80 83       	st	Z, r24
    1878:	de 01       	movw	r26, r28
    187a:	ab 5a       	subi	r26, 0xAB	; 171
    187c:	bf 4f       	sbci	r27, 0xFF	; 255
    187e:	fe 01       	movw	r30, r28
    1880:	e7 5a       	subi	r30, 0xA7	; 167
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	11 96       	adiw	r26, 0x01	; 1
    188a:	9c 93       	st	X, r25
    188c:	8e 93       	st	-X, r24
    188e:	fe 01       	movw	r30, r28
    1890:	eb 5a       	subi	r30, 0xAB	; 171
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 81       	ld	r24, Z
    1896:	91 81       	ldd	r25, Z+1	; 0x01
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <HLCD_init+0x208>
    189c:	fe 01       	movw	r30, r28
    189e:	eb 5a       	subi	r30, 0xAB	; 171
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	80 83       	st	Z, r24
	// start init
	_delay_ms(50);
	if (mode == HLCD_8_BIT) {
    18a6:	80 91 78 00 	lds	r24, 0x0078
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <HLCD_init+0x220>
    18ae:	b7 c1       	rjmp	.+878    	; 0x1c1e <HLCD_init+0x58e>
		HLCD_writeCMD(0b00111000); // set LCD to 8-bit mode, 2 lines, 5x10 font size
    18b0:	88 e3       	ldi	r24, 0x38	; 56
    18b2:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
    18b6:	fe 01       	movw	r30, r28
    18b8:	ef 5a       	subi	r30, 0xAF	; 175
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a0 e8       	ldi	r26, 0x80	; 128
    18c2:	bf e3       	ldi	r27, 0x3F	; 63
    18c4:	80 83       	st	Z, r24
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	a2 83       	std	Z+2, r26	; 0x02
    18ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18cc:	8e 01       	movw	r16, r28
    18ce:	03 5b       	subi	r16, 0xB3	; 179
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	fe 01       	movw	r30, r28
    18d4:	ef 5a       	subi	r30, 0xAF	; 175
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	60 81       	ld	r22, Z
    18da:	71 81       	ldd	r23, Z+1	; 0x01
    18dc:	82 81       	ldd	r24, Z+2	; 0x02
    18de:	93 81       	ldd	r25, Z+3	; 0x03
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	4a ef       	ldi	r20, 0xFA	; 250
    18e6:	54 e4       	ldi	r21, 0x44	; 68
    18e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	f8 01       	movw	r30, r16
    18f2:	80 83       	st	Z, r24
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	a2 83       	std	Z+2, r26	; 0x02
    18f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18fa:	fe 01       	movw	r30, r28
    18fc:	e3 5b       	subi	r30, 0xB3	; 179
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	60 81       	ld	r22, Z
    1902:	71 81       	ldd	r23, Z+1	; 0x01
    1904:	82 81       	ldd	r24, Z+2	; 0x02
    1906:	93 81       	ldd	r25, Z+3	; 0x03
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e8       	ldi	r20, 0x80	; 128
    190e:	5f e3       	ldi	r21, 0x3F	; 63
    1910:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1914:	88 23       	and	r24, r24
    1916:	44 f4       	brge	.+16     	; 0x1928 <HLCD_init+0x298>
		__ticks = 1;
    1918:	fe 01       	movw	r30, r28
    191a:	e5 5b       	subi	r30, 0xB5	; 181
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	91 83       	std	Z+1, r25	; 0x01
    1924:	80 83       	st	Z, r24
    1926:	64 c0       	rjmp	.+200    	; 0x19f0 <HLCD_init+0x360>
	else if (__tmp > 65535)
    1928:	fe 01       	movw	r30, r28
    192a:	e3 5b       	subi	r30, 0xB3	; 179
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	60 81       	ld	r22, Z
    1930:	71 81       	ldd	r23, Z+1	; 0x01
    1932:	82 81       	ldd	r24, Z+2	; 0x02
    1934:	93 81       	ldd	r25, Z+3	; 0x03
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	3f ef       	ldi	r19, 0xFF	; 255
    193a:	4f e7       	ldi	r20, 0x7F	; 127
    193c:	57 e4       	ldi	r21, 0x47	; 71
    193e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1942:	18 16       	cp	r1, r24
    1944:	0c f0       	brlt	.+2      	; 0x1948 <HLCD_init+0x2b8>
    1946:	43 c0       	rjmp	.+134    	; 0x19ce <HLCD_init+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1948:	fe 01       	movw	r30, r28
    194a:	ef 5a       	subi	r30, 0xAF	; 175
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	60 81       	ld	r22, Z
    1950:	71 81       	ldd	r23, Z+1	; 0x01
    1952:	82 81       	ldd	r24, Z+2	; 0x02
    1954:	93 81       	ldd	r25, Z+3	; 0x03
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e2       	ldi	r20, 0x20	; 32
    195c:	51 e4       	ldi	r21, 0x41	; 65
    195e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	8e 01       	movw	r16, r28
    1968:	05 5b       	subi	r16, 0xB5	; 181
    196a:	1f 4f       	sbci	r17, 0xFF	; 255
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	f8 01       	movw	r30, r16
    197a:	91 83       	std	Z+1, r25	; 0x01
    197c:	80 83       	st	Z, r24
    197e:	1f c0       	rjmp	.+62     	; 0x19be <HLCD_init+0x32e>
    1980:	fe 01       	movw	r30, r28
    1982:	e7 5b       	subi	r30, 0xB7	; 183
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	88 ec       	ldi	r24, 0xC8	; 200
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	80 83       	st	Z, r24
    198e:	fe 01       	movw	r30, r28
    1990:	e7 5b       	subi	r30, 0xB7	; 183
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	80 81       	ld	r24, Z
    1996:	91 81       	ldd	r25, Z+1	; 0x01
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <HLCD_init+0x308>
    199c:	fe 01       	movw	r30, r28
    199e:	e7 5b       	subi	r30, 0xB7	; 183
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	91 83       	std	Z+1, r25	; 0x01
    19a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a6:	de 01       	movw	r26, r28
    19a8:	a5 5b       	subi	r26, 0xB5	; 181
    19aa:	bf 4f       	sbci	r27, 0xFF	; 255
    19ac:	fe 01       	movw	r30, r28
    19ae:	e5 5b       	subi	r30, 0xB5	; 181
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	80 81       	ld	r24, Z
    19b4:	91 81       	ldd	r25, Z+1	; 0x01
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	11 96       	adiw	r26, 0x01	; 1
    19ba:	9c 93       	st	X, r25
    19bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19be:	fe 01       	movw	r30, r28
    19c0:	e5 5b       	subi	r30, 0xB5	; 181
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	80 81       	ld	r24, Z
    19c6:	91 81       	ldd	r25, Z+1	; 0x01
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	d1 f6       	brne	.-76     	; 0x1980 <HLCD_init+0x2f0>
    19cc:	27 c0       	rjmp	.+78     	; 0x1a1c <HLCD_init+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ce:	8e 01       	movw	r16, r28
    19d0:	05 5b       	subi	r16, 0xB5	; 181
    19d2:	1f 4f       	sbci	r17, 0xFF	; 255
    19d4:	fe 01       	movw	r30, r28
    19d6:	e3 5b       	subi	r30, 0xB3	; 179
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	60 81       	ld	r22, Z
    19dc:	71 81       	ldd	r23, Z+1	; 0x01
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	f8 01       	movw	r30, r16
    19ec:	91 83       	std	Z+1, r25	; 0x01
    19ee:	80 83       	st	Z, r24
    19f0:	de 01       	movw	r26, r28
    19f2:	a9 5b       	subi	r26, 0xB9	; 185
    19f4:	bf 4f       	sbci	r27, 0xFF	; 255
    19f6:	fe 01       	movw	r30, r28
    19f8:	e5 5b       	subi	r30, 0xB5	; 181
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	80 81       	ld	r24, Z
    19fe:	91 81       	ldd	r25, Z+1	; 0x01
    1a00:	8d 93       	st	X+, r24
    1a02:	9c 93       	st	X, r25
    1a04:	fe 01       	movw	r30, r28
    1a06:	e9 5b       	subi	r30, 0xB9	; 185
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	80 81       	ld	r24, Z
    1a0c:	91 81       	ldd	r25, Z+1	; 0x01
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <HLCD_init+0x37e>
    1a12:	fe 01       	movw	r30, r28
    1a14:	e9 5b       	subi	r30, 0xB9	; 185
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	80 83       	st	Z, r24
		_delay_ms(1);
		HLCD_writeCMD(0b00001111); // set LCD display ON, cursor ON, cursor blink ON
    1a1c:	8f e0       	ldi	r24, 0x0F	; 15
    1a1e:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
    1a22:	fe 01       	movw	r30, r28
    1a24:	ed 5b       	subi	r30, 0xBD	; 189
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	a0 e8       	ldi	r26, 0x80	; 128
    1a2e:	bf e3       	ldi	r27, 0x3F	; 63
    1a30:	80 83       	st	Z, r24
    1a32:	91 83       	std	Z+1, r25	; 0x01
    1a34:	a2 83       	std	Z+2, r26	; 0x02
    1a36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a38:	8e 01       	movw	r16, r28
    1a3a:	01 5c       	subi	r16, 0xC1	; 193
    1a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3e:	fe 01       	movw	r30, r28
    1a40:	ed 5b       	subi	r30, 0xBD	; 189
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	4a ef       	ldi	r20, 0xFA	; 250
    1a52:	54 e4       	ldi	r21, 0x44	; 68
    1a54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	f8 01       	movw	r30, r16
    1a5e:	80 83       	st	Z, r24
    1a60:	91 83       	std	Z+1, r25	; 0x01
    1a62:	a2 83       	std	Z+2, r26	; 0x02
    1a64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a66:	fe 01       	movw	r30, r28
    1a68:	ff 96       	adiw	r30, 0x3f	; 63
    1a6a:	60 81       	ld	r22, Z
    1a6c:	71 81       	ldd	r23, Z+1	; 0x01
    1a6e:	82 81       	ldd	r24, Z+2	; 0x02
    1a70:	93 81       	ldd	r25, Z+3	; 0x03
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e8       	ldi	r20, 0x80	; 128
    1a78:	5f e3       	ldi	r21, 0x3F	; 63
    1a7a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a7e:	88 23       	and	r24, r24
    1a80:	2c f4       	brge	.+10     	; 0x1a8c <HLCD_init+0x3fc>
		__ticks = 1;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9e af       	std	Y+62, r25	; 0x3e
    1a88:	8d af       	std	Y+61, r24	; 0x3d
    1a8a:	46 c0       	rjmp	.+140    	; 0x1b18 <HLCD_init+0x488>
	else if (__tmp > 65535)
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	ff 96       	adiw	r30, 0x3f	; 63
    1a90:	60 81       	ld	r22, Z
    1a92:	71 81       	ldd	r23, Z+1	; 0x01
    1a94:	82 81       	ldd	r24, Z+2	; 0x02
    1a96:	93 81       	ldd	r25, Z+3	; 0x03
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	3f ef       	ldi	r19, 0xFF	; 255
    1a9c:	4f e7       	ldi	r20, 0x7F	; 127
    1a9e:	57 e4       	ldi	r21, 0x47	; 71
    1aa0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1aa4:	18 16       	cp	r1, r24
    1aa6:	64 f5       	brge	.+88     	; 0x1b00 <HLCD_init+0x470>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	ed 5b       	subi	r30, 0xBD	; 189
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	60 81       	ld	r22, Z
    1ab0:	71 81       	ldd	r23, Z+1	; 0x01
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e2       	ldi	r20, 0x20	; 32
    1abc:	51 e4       	ldi	r21, 0x41	; 65
    1abe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	9e af       	std	Y+62, r25	; 0x3e
    1ad4:	8d af       	std	Y+61, r24	; 0x3d
    1ad6:	0f c0       	rjmp	.+30     	; 0x1af6 <HLCD_init+0x466>
    1ad8:	88 ec       	ldi	r24, 0xC8	; 200
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	9c af       	std	Y+60, r25	; 0x3c
    1ade:	8b af       	std	Y+59, r24	; 0x3b
    1ae0:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ae2:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <HLCD_init+0x454>
    1ae8:	9c af       	std	Y+60, r25	; 0x3c
    1aea:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aec:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aee:	9e ad       	ldd	r25, Y+62	; 0x3e
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	9e af       	std	Y+62, r25	; 0x3e
    1af4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1af8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	69 f7       	brne	.-38     	; 0x1ad8 <HLCD_init+0x448>
    1afe:	16 c0       	rjmp	.+44     	; 0x1b2c <HLCD_init+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b00:	fe 01       	movw	r30, r28
    1b02:	ff 96       	adiw	r30, 0x3f	; 63
    1b04:	60 81       	ld	r22, Z
    1b06:	71 81       	ldd	r23, Z+1	; 0x01
    1b08:	82 81       	ldd	r24, Z+2	; 0x02
    1b0a:	93 81       	ldd	r25, Z+3	; 0x03
    1b0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9e af       	std	Y+62, r25	; 0x3e
    1b16:	8d af       	std	Y+61, r24	; 0x3d
    1b18:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b1a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b1c:	9a af       	std	Y+58, r25	; 0x3a
    1b1e:	89 af       	std	Y+57, r24	; 0x39
    1b20:	89 ad       	ldd	r24, Y+57	; 0x39
    1b22:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <HLCD_init+0x494>
    1b28:	9a af       	std	Y+58, r25	; 0x3a
    1b2a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);
		HLCD_writeCMD(0b00000001); // clear LCD display
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	a0 e0       	ldi	r26, 0x00	; 0
    1b38:	b0 e4       	ldi	r27, 0x40	; 64
    1b3a:	8d ab       	std	Y+53, r24	; 0x35
    1b3c:	9e ab       	std	Y+54, r25	; 0x36
    1b3e:	af ab       	std	Y+55, r26	; 0x37
    1b40:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b42:	6d a9       	ldd	r22, Y+53	; 0x35
    1b44:	7e a9       	ldd	r23, Y+54	; 0x36
    1b46:	8f a9       	ldd	r24, Y+55	; 0x37
    1b48:	98 ad       	ldd	r25, Y+56	; 0x38
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	4a ef       	ldi	r20, 0xFA	; 250
    1b50:	54 e4       	ldi	r21, 0x44	; 68
    1b52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	89 ab       	std	Y+49, r24	; 0x31
    1b5c:	9a ab       	std	Y+50, r25	; 0x32
    1b5e:	ab ab       	std	Y+51, r26	; 0x33
    1b60:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b62:	69 a9       	ldd	r22, Y+49	; 0x31
    1b64:	7a a9       	ldd	r23, Y+50	; 0x32
    1b66:	8b a9       	ldd	r24, Y+51	; 0x33
    1b68:	9c a9       	ldd	r25, Y+52	; 0x34
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e8       	ldi	r20, 0x80	; 128
    1b70:	5f e3       	ldi	r21, 0x3F	; 63
    1b72:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b76:	88 23       	and	r24, r24
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <HLCD_init+0x4f4>
		__ticks = 1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	98 ab       	std	Y+48, r25	; 0x30
    1b80:	8f a7       	std	Y+47, r24	; 0x2f
    1b82:	3f c0       	rjmp	.+126    	; 0x1c02 <HLCD_init+0x572>
	else if (__tmp > 65535)
    1b84:	69 a9       	ldd	r22, Y+49	; 0x31
    1b86:	7a a9       	ldd	r23, Y+50	; 0x32
    1b88:	8b a9       	ldd	r24, Y+51	; 0x33
    1b8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	3f ef       	ldi	r19, 0xFF	; 255
    1b90:	4f e7       	ldi	r20, 0x7F	; 127
    1b92:	57 e4       	ldi	r21, 0x47	; 71
    1b94:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b98:	18 16       	cp	r1, r24
    1b9a:	4c f5       	brge	.+82     	; 0x1bee <HLCD_init+0x55e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b9e:	7e a9       	ldd	r23, Y+54	; 0x36
    1ba0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ba2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e2       	ldi	r20, 0x20	; 32
    1baa:	51 e4       	ldi	r21, 0x41	; 65
    1bac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	bc 01       	movw	r22, r24
    1bb6:	cd 01       	movw	r24, r26
    1bb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	98 ab       	std	Y+48, r25	; 0x30
    1bc2:	8f a7       	std	Y+47, r24	; 0x2f
    1bc4:	0f c0       	rjmp	.+30     	; 0x1be4 <HLCD_init+0x554>
    1bc6:	88 ec       	ldi	r24, 0xC8	; 200
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9e a7       	std	Y+46, r25	; 0x2e
    1bcc:	8d a7       	std	Y+45, r24	; 0x2d
    1bce:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bd0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <HLCD_init+0x542>
    1bd6:	9e a7       	std	Y+46, r25	; 0x2e
    1bd8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bdc:	98 a9       	ldd	r25, Y+48	; 0x30
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	98 ab       	std	Y+48, r25	; 0x30
    1be2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1be6:	98 a9       	ldd	r25, Y+48	; 0x30
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	69 f7       	brne	.-38     	; 0x1bc6 <HLCD_init+0x536>
    1bec:	14 c0       	rjmp	.+40     	; 0x1c16 <HLCD_init+0x586>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bee:	69 a9       	ldd	r22, Y+49	; 0x31
    1bf0:	7a a9       	ldd	r23, Y+50	; 0x32
    1bf2:	8b a9       	ldd	r24, Y+51	; 0x33
    1bf4:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	98 ab       	std	Y+48, r25	; 0x30
    1c00:	8f a7       	std	Y+47, r24	; 0x2f
    1c02:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c04:	98 a9       	ldd	r25, Y+48	; 0x30
    1c06:	9c a7       	std	Y+44, r25	; 0x2c
    1c08:	8b a7       	std	Y+43, r24	; 0x2b
    1c0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <HLCD_init+0x57e>
    1c12:	9c a7       	std	Y+44, r25	; 0x2c
    1c14:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		HLCD_writeCMD(0b00000110); // set Address Counter to increasing, NO display shift
    1c16:	86 e0       	ldi	r24, 0x06	; 6
    1c18:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
    1c1c:	71 c1       	rjmp	.+738    	; 0x1f00 <HLCD_init+0x870>
	} else {
		HLCD_writeCMD(0b00101000); // set LCD to 4-bit mode, 2 lines, 5x10 font size
    1c1e:	88 e2       	ldi	r24, 0x28	; 40
    1c20:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
		HLCD_writeCMD(0b00101000);
    1c24:	88 e2       	ldi	r24, 0x28	; 40
    1c26:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
		HLCD_writeCMD(0b00101000 << 4);
    1c2a:	80 e8       	ldi	r24, 0x80	; 128
    1c2c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	a0 e8       	ldi	r26, 0x80	; 128
    1c36:	bf e3       	ldi	r27, 0x3F	; 63
    1c38:	8f a3       	std	Y+39, r24	; 0x27
    1c3a:	98 a7       	std	Y+40, r25	; 0x28
    1c3c:	a9 a7       	std	Y+41, r26	; 0x29
    1c3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c40:	6f a1       	ldd	r22, Y+39	; 0x27
    1c42:	78 a5       	ldd	r23, Y+40	; 0x28
    1c44:	89 a5       	ldd	r24, Y+41	; 0x29
    1c46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	4a ef       	ldi	r20, 0xFA	; 250
    1c4e:	54 e4       	ldi	r21, 0x44	; 68
    1c50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	8b a3       	std	Y+35, r24	; 0x23
    1c5a:	9c a3       	std	Y+36, r25	; 0x24
    1c5c:	ad a3       	std	Y+37, r26	; 0x25
    1c5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c60:	6b a1       	ldd	r22, Y+35	; 0x23
    1c62:	7c a1       	ldd	r23, Y+36	; 0x24
    1c64:	8d a1       	ldd	r24, Y+37	; 0x25
    1c66:	9e a1       	ldd	r25, Y+38	; 0x26
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e8       	ldi	r20, 0x80	; 128
    1c6e:	5f e3       	ldi	r21, 0x3F	; 63
    1c70:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c74:	88 23       	and	r24, r24
    1c76:	2c f4       	brge	.+10     	; 0x1c82 <HLCD_init+0x5f2>
		__ticks = 1;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9a a3       	std	Y+34, r25	; 0x22
    1c7e:	89 a3       	std	Y+33, r24	; 0x21
    1c80:	3f c0       	rjmp	.+126    	; 0x1d00 <HLCD_init+0x670>
	else if (__tmp > 65535)
    1c82:	6b a1       	ldd	r22, Y+35	; 0x23
    1c84:	7c a1       	ldd	r23, Y+36	; 0x24
    1c86:	8d a1       	ldd	r24, Y+37	; 0x25
    1c88:	9e a1       	ldd	r25, Y+38	; 0x26
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	3f ef       	ldi	r19, 0xFF	; 255
    1c8e:	4f e7       	ldi	r20, 0x7F	; 127
    1c90:	57 e4       	ldi	r21, 0x47	; 71
    1c92:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c96:	18 16       	cp	r1, r24
    1c98:	4c f5       	brge	.+82     	; 0x1cec <HLCD_init+0x65c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1ca0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e2       	ldi	r20, 0x20	; 32
    1ca8:	51 e4       	ldi	r21, 0x41	; 65
    1caa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	cd 01       	movw	r24, r26
    1cb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	9a a3       	std	Y+34, r25	; 0x22
    1cc0:	89 a3       	std	Y+33, r24	; 0x21
    1cc2:	0f c0       	rjmp	.+30     	; 0x1ce2 <HLCD_init+0x652>
    1cc4:	88 ec       	ldi	r24, 0xC8	; 200
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	98 a3       	std	Y+32, r25	; 0x20
    1cca:	8f 8f       	std	Y+31, r24	; 0x1f
    1ccc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cce:	98 a1       	ldd	r25, Y+32	; 0x20
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <HLCD_init+0x640>
    1cd4:	98 a3       	std	Y+32, r25	; 0x20
    1cd6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cda:	9a a1       	ldd	r25, Y+34	; 0x22
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	9a a3       	std	Y+34, r25	; 0x22
    1ce0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce6:	00 97       	sbiw	r24, 0x00	; 0
    1ce8:	69 f7       	brne	.-38     	; 0x1cc4 <HLCD_init+0x634>
    1cea:	14 c0       	rjmp	.+40     	; 0x1d14 <HLCD_init+0x684>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cec:	6b a1       	ldd	r22, Y+35	; 0x23
    1cee:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf0:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf2:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9a a3       	std	Y+34, r25	; 0x22
    1cfe:	89 a3       	std	Y+33, r24	; 0x21
    1d00:	89 a1       	ldd	r24, Y+33	; 0x21
    1d02:	9a a1       	ldd	r25, Y+34	; 0x22
    1d04:	9e 8f       	std	Y+30, r25	; 0x1e
    1d06:	8d 8f       	std	Y+29, r24	; 0x1d
    1d08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <HLCD_init+0x67c>
    1d10:	9e 8f       	std	Y+30, r25	; 0x1e
    1d12:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		HLCD_writeCMD(0b00001111); // set LCD display ON, cursor ON, cursor blink ON
    1d14:	8f e0       	ldi	r24, 0x0F	; 15
    1d16:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
		HLCD_writeCMD(0b00001111 << 4);
    1d1a:	80 ef       	ldi	r24, 0xF0	; 240
    1d1c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	a0 e8       	ldi	r26, 0x80	; 128
    1d26:	bf e3       	ldi	r27, 0x3F	; 63
    1d28:	89 8f       	std	Y+25, r24	; 0x19
    1d2a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d2c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d30:	69 8d       	ldd	r22, Y+25	; 0x19
    1d32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	4a ef       	ldi	r20, 0xFA	; 250
    1d3e:	54 e4       	ldi	r21, 0x44	; 68
    1d40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	8d 8b       	std	Y+21, r24	; 0x15
    1d4a:	9e 8b       	std	Y+22, r25	; 0x16
    1d4c:	af 8b       	std	Y+23, r26	; 0x17
    1d4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d50:	6d 89       	ldd	r22, Y+21	; 0x15
    1d52:	7e 89       	ldd	r23, Y+22	; 0x16
    1d54:	8f 89       	ldd	r24, Y+23	; 0x17
    1d56:	98 8d       	ldd	r25, Y+24	; 0x18
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e8       	ldi	r20, 0x80	; 128
    1d5e:	5f e3       	ldi	r21, 0x3F	; 63
    1d60:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d64:	88 23       	and	r24, r24
    1d66:	2c f4       	brge	.+10     	; 0x1d72 <HLCD_init+0x6e2>
		__ticks = 1;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9c 8b       	std	Y+20, r25	; 0x14
    1d6e:	8b 8b       	std	Y+19, r24	; 0x13
    1d70:	3f c0       	rjmp	.+126    	; 0x1df0 <HLCD_init+0x760>
	else if (__tmp > 65535)
    1d72:	6d 89       	ldd	r22, Y+21	; 0x15
    1d74:	7e 89       	ldd	r23, Y+22	; 0x16
    1d76:	8f 89       	ldd	r24, Y+23	; 0x17
    1d78:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	3f ef       	ldi	r19, 0xFF	; 255
    1d7e:	4f e7       	ldi	r20, 0x7F	; 127
    1d80:	57 e4       	ldi	r21, 0x47	; 71
    1d82:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d86:	18 16       	cp	r1, r24
    1d88:	4c f5       	brge	.+82     	; 0x1ddc <HLCD_init+0x74c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e2       	ldi	r20, 0x20	; 32
    1d98:	51 e4       	ldi	r21, 0x41	; 65
    1d9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	9c 8b       	std	Y+20, r25	; 0x14
    1db0:	8b 8b       	std	Y+19, r24	; 0x13
    1db2:	0f c0       	rjmp	.+30     	; 0x1dd2 <HLCD_init+0x742>
    1db4:	88 ec       	ldi	r24, 0xC8	; 200
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9a 8b       	std	Y+18, r25	; 0x12
    1dba:	89 8b       	std	Y+17, r24	; 0x11
    1dbc:	89 89       	ldd	r24, Y+17	; 0x11
    1dbe:	9a 89       	ldd	r25, Y+18	; 0x12
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <HLCD_init+0x730>
    1dc4:	9a 8b       	std	Y+18, r25	; 0x12
    1dc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dca:	9c 89       	ldd	r25, Y+20	; 0x14
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	9c 8b       	std	Y+20, r25	; 0x14
    1dd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	69 f7       	brne	.-38     	; 0x1db4 <HLCD_init+0x724>
    1dda:	14 c0       	rjmp	.+40     	; 0x1e04 <HLCD_init+0x774>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ddc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dde:	7e 89       	ldd	r23, Y+22	; 0x16
    1de0:	8f 89       	ldd	r24, Y+23	; 0x17
    1de2:	98 8d       	ldd	r25, Y+24	; 0x18
    1de4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	9c 8b       	std	Y+20, r25	; 0x14
    1dee:	8b 8b       	std	Y+19, r24	; 0x13
    1df0:	8b 89       	ldd	r24, Y+19	; 0x13
    1df2:	9c 89       	ldd	r25, Y+20	; 0x14
    1df4:	98 8b       	std	Y+16, r25	; 0x10
    1df6:	8f 87       	std	Y+15, r24	; 0x0f
    1df8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dfa:	98 89       	ldd	r25, Y+16	; 0x10
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <HLCD_init+0x76c>
    1e00:	98 8b       	std	Y+16, r25	; 0x10
    1e02:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		HLCD_writeCMD(0b00000001); // clear LCD display
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
		HLCD_writeCMD(0b00000001 << 4);
    1e0a:	80 e1       	ldi	r24, 0x10	; 16
    1e0c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	a0 e0       	ldi	r26, 0x00	; 0
    1e16:	b0 e4       	ldi	r27, 0x40	; 64
    1e18:	8b 87       	std	Y+11, r24	; 0x0b
    1e1a:	9c 87       	std	Y+12, r25	; 0x0c
    1e1c:	ad 87       	std	Y+13, r26	; 0x0d
    1e1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	4a ef       	ldi	r20, 0xFA	; 250
    1e2e:	54 e4       	ldi	r21, 0x44	; 68
    1e30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	8f 83       	std	Y+7, r24	; 0x07
    1e3a:	98 87       	std	Y+8, r25	; 0x08
    1e3c:	a9 87       	std	Y+9, r26	; 0x09
    1e3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e40:	6f 81       	ldd	r22, Y+7	; 0x07
    1e42:	78 85       	ldd	r23, Y+8	; 0x08
    1e44:	89 85       	ldd	r24, Y+9	; 0x09
    1e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e8       	ldi	r20, 0x80	; 128
    1e4e:	5f e3       	ldi	r21, 0x3F	; 63
    1e50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e54:	88 23       	and	r24, r24
    1e56:	2c f4       	brge	.+10     	; 0x1e62 <HLCD_init+0x7d2>
		__ticks = 1;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9e 83       	std	Y+6, r25	; 0x06
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
    1e60:	3f c0       	rjmp	.+126    	; 0x1ee0 <HLCD_init+0x850>
	else if (__tmp > 65535)
    1e62:	6f 81       	ldd	r22, Y+7	; 0x07
    1e64:	78 85       	ldd	r23, Y+8	; 0x08
    1e66:	89 85       	ldd	r24, Y+9	; 0x09
    1e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	3f ef       	ldi	r19, 0xFF	; 255
    1e6e:	4f e7       	ldi	r20, 0x7F	; 127
    1e70:	57 e4       	ldi	r21, 0x47	; 71
    1e72:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e76:	18 16       	cp	r1, r24
    1e78:	4c f5       	brge	.+82     	; 0x1ecc <HLCD_init+0x83c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e2       	ldi	r20, 0x20	; 32
    1e88:	51 e4       	ldi	r21, 0x41	; 65
    1e8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	bc 01       	movw	r22, r24
    1e94:	cd 01       	movw	r24, r26
    1e96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	0f c0       	rjmp	.+30     	; 0x1ec2 <HLCD_init+0x832>
    1ea4:	88 ec       	ldi	r24, 0xC8	; 200
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9c 83       	std	Y+4, r25	; 0x04
    1eaa:	8b 83       	std	Y+3, r24	; 0x03
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <HLCD_init+0x820>
    1eb4:	9c 83       	std	Y+4, r25	; 0x04
    1eb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eba:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	9e 83       	std	Y+6, r25	; 0x06
    1ec0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	69 f7       	brne	.-38     	; 0x1ea4 <HLCD_init+0x814>
    1eca:	14 c0       	rjmp	.+40     	; 0x1ef4 <HLCD_init+0x864>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	9e 83       	std	Y+6, r25	; 0x06
    1ede:	8d 83       	std	Y+5, r24	; 0x05
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	9a 83       	std	Y+2, r25	; 0x02
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	9a 81       	ldd	r25, Y+2	; 0x02
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <HLCD_init+0x85c>
    1ef0:	9a 83       	std	Y+2, r25	; 0x02
    1ef2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		HLCD_writeCMD(0b00000110); // set Address Counter to increasing, NO display shift
    1ef4:	86 e0       	ldi	r24, 0x06	; 6
    1ef6:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
		HLCD_writeCMD(0b00000110 << 4);
    1efa:	80 e6       	ldi	r24, 0x60	; 96
    1efc:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <HLCD_writeCMD>
	}
	return;
}// end HLCD_init
    1f00:	cd 59       	subi	r28, 0x9D	; 157
    1f02:	df 4f       	sbci	r29, 0xFF	; 255
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	1f 91       	pop	r17
    1f14:	0f 91       	pop	r16
    1f16:	08 95       	ret

00001f18 <HLCD_writeCMD>:

//LCD in 8-bit mode
void HLCD_writeCMD(uint8 cmd) {
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	2f 97       	sbiw	r28, 0x0f	; 15
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_SetPinOutput(HLCD_RS, LOW);		// set RS to 0 (Command Reg)
    1f2e:	84 e0       	ldi	r24, 0x04	; 4
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	40 e0       	ldi	r20, 0x00	; 0
    1f34:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>
	MDIO_SetPinOutput(HLCD_RW, LOW);		// Set RW to 0
    1f38:	84 e0       	ldi	r24, 0x04	; 4
    1f3a:	61 e0       	ldi	r22, 0x01	; 1
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>

	MDIO_SetPortValue(HLCD_PORT, cmd);		// Write the command to D0-D7
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f46:	0e 94 8d 08 	call	0x111a	; 0x111a <MDIO_SetPortValue>

	MDIO_SetPinOutput(HLCD_E, HIGH);		// Set E to 1 (Read Data)
    1f4a:	84 e0       	ldi	r24, 0x04	; 4
    1f4c:	62 e0       	ldi	r22, 0x02	; 2
    1f4e:	41 e0       	ldi	r20, 0x01	; 1
    1f50:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a0 e0       	ldi	r26, 0x00	; 0
    1f5a:	b0 e4       	ldi	r27, 0x40	; 64
    1f5c:	8b 87       	std	Y+11, r24	; 0x0b
    1f5e:	9c 87       	std	Y+12, r25	; 0x0c
    1f60:	ad 87       	std	Y+13, r26	; 0x0d
    1f62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	4a ef       	ldi	r20, 0xFA	; 250
    1f72:	54 e4       	ldi	r21, 0x44	; 68
    1f74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	8f 83       	std	Y+7, r24	; 0x07
    1f7e:	98 87       	std	Y+8, r25	; 0x08
    1f80:	a9 87       	std	Y+9, r26	; 0x09
    1f82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f84:	6f 81       	ldd	r22, Y+7	; 0x07
    1f86:	78 85       	ldd	r23, Y+8	; 0x08
    1f88:	89 85       	ldd	r24, Y+9	; 0x09
    1f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e8       	ldi	r20, 0x80	; 128
    1f92:	5f e3       	ldi	r21, 0x3F	; 63
    1f94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f98:	88 23       	and	r24, r24
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <HLCD_writeCMD+0x8e>
		__ticks = 1;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9e 83       	std	Y+6, r25	; 0x06
    1fa2:	8d 83       	std	Y+5, r24	; 0x05
    1fa4:	3f c0       	rjmp	.+126    	; 0x2024 <HLCD_writeCMD+0x10c>
	else if (__tmp > 65535)
    1fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa8:	78 85       	ldd	r23, Y+8	; 0x08
    1faa:	89 85       	ldd	r24, Y+9	; 0x09
    1fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	3f ef       	ldi	r19, 0xFF	; 255
    1fb2:	4f e7       	ldi	r20, 0x7F	; 127
    1fb4:	57 e4       	ldi	r21, 0x47	; 71
    1fb6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fba:	18 16       	cp	r1, r24
    1fbc:	4c f5       	brge	.+82     	; 0x2010 <HLCD_writeCMD+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e2       	ldi	r20, 0x20	; 32
    1fcc:	51 e4       	ldi	r21, 0x41	; 65
    1fce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	9e 83       	std	Y+6, r25	; 0x06
    1fe4:	8d 83       	std	Y+5, r24	; 0x05
    1fe6:	0f c0       	rjmp	.+30     	; 0x2006 <HLCD_writeCMD+0xee>
    1fe8:	88 ec       	ldi	r24, 0xC8	; 200
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9c 83       	std	Y+4, r25	; 0x04
    1fee:	8b 83       	std	Y+3, r24	; 0x03
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <HLCD_writeCMD+0xdc>
    1ff8:	9c 83       	std	Y+4, r25	; 0x04
    1ffa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	9e 83       	std	Y+6, r25	; 0x06
    2004:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2006:	8d 81       	ldd	r24, Y+5	; 0x05
    2008:	9e 81       	ldd	r25, Y+6	; 0x06
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	69 f7       	brne	.-38     	; 0x1fe8 <HLCD_writeCMD+0xd0>
    200e:	14 c0       	rjmp	.+40     	; 0x2038 <HLCD_writeCMD+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2010:	6f 81       	ldd	r22, Y+7	; 0x07
    2012:	78 85       	ldd	r23, Y+8	; 0x08
    2014:	89 85       	ldd	r24, Y+9	; 0x09
    2016:	9a 85       	ldd	r25, Y+10	; 0x0a
    2018:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	9e 83       	std	Y+6, r25	; 0x06
    2022:	8d 83       	std	Y+5, r24	; 0x05
    2024:	8d 81       	ldd	r24, Y+5	; 0x05
    2026:	9e 81       	ldd	r25, Y+6	; 0x06
    2028:	9a 83       	std	Y+2, r25	; 0x02
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	9a 81       	ldd	r25, Y+2	; 0x02
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <HLCD_writeCMD+0x118>
    2034:	9a 83       	std	Y+2, r25	; 0x02
    2036:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);							// delay 2ms
	MDIO_SetPinOutput(HLCD_E, LOW);			// Set E to 0 (falling edge: Write Data)
    2038:	84 e0       	ldi	r24, 0x04	; 4
    203a:	62 e0       	ldi	r22, 0x02	; 2
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>
	return;
}// end HLCD_writeCMD
    2042:	2f 96       	adiw	r28, 0x0f	; 15
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <HLCD_writeData>:

void HLCD_writeData(uint8 data) {
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	ab 97       	sbiw	r28, 0x2b	; 43
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	8b a7       	std	Y+43, r24	; 0x2b
	MDIO_SetPinOutput(HLCD_RS, HIGH);		// set RS to 1 (Data Reg)
    206a:	84 e0       	ldi	r24, 0x04	; 4
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	41 e0       	ldi	r20, 0x01	; 1
    2070:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>
	MDIO_SetPinOutput(HLCD_RW, LOW); 		// Set RW to 0
    2074:	84 e0       	ldi	r24, 0x04	; 4
    2076:	61 e0       	ldi	r22, 0x01	; 1
    2078:	40 e0       	ldi	r20, 0x00	; 0
    207a:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>

	if (mode == HLCD_8_BIT) {
    207e:	80 91 78 00 	lds	r24, 0x0078
    2082:	81 30       	cpi	r24, 0x01	; 1
    2084:	09 f0       	breq	.+2      	; 0x2088 <HLCD_writeData+0x34>
    2086:	81 c0       	rjmp	.+258    	; 0x218a <HLCD_writeData+0x136>
		MDIO_SetPortValue(HLCD_PORT, data);	// Write the data to D0-D7
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	6b a5       	ldd	r22, Y+43	; 0x2b
    208c:	0e 94 8d 08 	call	0x111a	; 0x111a <MDIO_SetPortValue>
		MDIO_SetPinOutput(HLCD_E, HIGH); 		// Set E to 1 (Read Data)
    2090:	84 e0       	ldi	r24, 0x04	; 4
    2092:	62 e0       	ldi	r22, 0x02	; 2
    2094:	41 e0       	ldi	r20, 0x01	; 1
    2096:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a0 e0       	ldi	r26, 0x00	; 0
    20a0:	b0 e4       	ldi	r27, 0x40	; 64
    20a2:	8f a3       	std	Y+39, r24	; 0x27
    20a4:	98 a7       	std	Y+40, r25	; 0x28
    20a6:	a9 a7       	std	Y+41, r26	; 0x29
    20a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20aa:	6f a1       	ldd	r22, Y+39	; 0x27
    20ac:	78 a5       	ldd	r23, Y+40	; 0x28
    20ae:	89 a5       	ldd	r24, Y+41	; 0x29
    20b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	4a ef       	ldi	r20, 0xFA	; 250
    20b8:	54 e4       	ldi	r21, 0x44	; 68
    20ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	8b a3       	std	Y+35, r24	; 0x23
    20c4:	9c a3       	std	Y+36, r25	; 0x24
    20c6:	ad a3       	std	Y+37, r26	; 0x25
    20c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ca:	6b a1       	ldd	r22, Y+35	; 0x23
    20cc:	7c a1       	ldd	r23, Y+36	; 0x24
    20ce:	8d a1       	ldd	r24, Y+37	; 0x25
    20d0:	9e a1       	ldd	r25, Y+38	; 0x26
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e8       	ldi	r20, 0x80	; 128
    20d8:	5f e3       	ldi	r21, 0x3F	; 63
    20da:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20de:	88 23       	and	r24, r24
    20e0:	2c f4       	brge	.+10     	; 0x20ec <HLCD_writeData+0x98>
		__ticks = 1;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	9a a3       	std	Y+34, r25	; 0x22
    20e8:	89 a3       	std	Y+33, r24	; 0x21
    20ea:	3f c0       	rjmp	.+126    	; 0x216a <HLCD_writeData+0x116>
	else if (__tmp > 65535)
    20ec:	6b a1       	ldd	r22, Y+35	; 0x23
    20ee:	7c a1       	ldd	r23, Y+36	; 0x24
    20f0:	8d a1       	ldd	r24, Y+37	; 0x25
    20f2:	9e a1       	ldd	r25, Y+38	; 0x26
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	3f ef       	ldi	r19, 0xFF	; 255
    20f8:	4f e7       	ldi	r20, 0x7F	; 127
    20fa:	57 e4       	ldi	r21, 0x47	; 71
    20fc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2100:	18 16       	cp	r1, r24
    2102:	4c f5       	brge	.+82     	; 0x2156 <HLCD_writeData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2104:	6f a1       	ldd	r22, Y+39	; 0x27
    2106:	78 a5       	ldd	r23, Y+40	; 0x28
    2108:	89 a5       	ldd	r24, Y+41	; 0x29
    210a:	9a a5       	ldd	r25, Y+42	; 0x2a
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e2       	ldi	r20, 0x20	; 32
    2112:	51 e4       	ldi	r21, 0x41	; 65
    2114:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	9a a3       	std	Y+34, r25	; 0x22
    212a:	89 a3       	std	Y+33, r24	; 0x21
    212c:	0f c0       	rjmp	.+30     	; 0x214c <HLCD_writeData+0xf8>
    212e:	88 ec       	ldi	r24, 0xC8	; 200
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	98 a3       	std	Y+32, r25	; 0x20
    2134:	8f 8f       	std	Y+31, r24	; 0x1f
    2136:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2138:	98 a1       	ldd	r25, Y+32	; 0x20
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <HLCD_writeData+0xe6>
    213e:	98 a3       	std	Y+32, r25	; 0x20
    2140:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2142:	89 a1       	ldd	r24, Y+33	; 0x21
    2144:	9a a1       	ldd	r25, Y+34	; 0x22
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	9a a3       	std	Y+34, r25	; 0x22
    214a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214c:	89 a1       	ldd	r24, Y+33	; 0x21
    214e:	9a a1       	ldd	r25, Y+34	; 0x22
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	69 f7       	brne	.-38     	; 0x212e <HLCD_writeData+0xda>
    2154:	14 c0       	rjmp	.+40     	; 0x217e <HLCD_writeData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2156:	6b a1       	ldd	r22, Y+35	; 0x23
    2158:	7c a1       	ldd	r23, Y+36	; 0x24
    215a:	8d a1       	ldd	r24, Y+37	; 0x25
    215c:	9e a1       	ldd	r25, Y+38	; 0x26
    215e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9a a3       	std	Y+34, r25	; 0x22
    2168:	89 a3       	std	Y+33, r24	; 0x21
    216a:	89 a1       	ldd	r24, Y+33	; 0x21
    216c:	9a a1       	ldd	r25, Y+34	; 0x22
    216e:	9e 8f       	std	Y+30, r25	; 0x1e
    2170:	8d 8f       	std	Y+29, r24	; 0x1d
    2172:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2174:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <HLCD_writeData+0x122>
    217a:	9e 8f       	std	Y+30, r25	; 0x1e
    217c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);							// delay 2ms
		MDIO_SetPinOutput(HLCD_E, LOW); 		// Set E to 0 (falling edge: Write Data)
    217e:	84 e0       	ldi	r24, 0x04	; 4
    2180:	62 e0       	ldi	r22, 0x02	; 2
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>
    2188:	0d c1       	rjmp	.+538    	; 0x23a4 <HLCD_writeData+0x350>

	}else{
		MDIO_SetPortValue(HLCD_PORT, data & 0xF0);	// Write the Hdata to D4-D7
    218a:	8b a5       	ldd	r24, Y+43	; 0x2b
    218c:	98 2f       	mov	r25, r24
    218e:	90 7f       	andi	r25, 0xF0	; 240
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	69 2f       	mov	r22, r25
    2194:	0e 94 8d 08 	call	0x111a	; 0x111a <MDIO_SetPortValue>
		MDIO_SetPinOutput(HLCD_E, HIGH); 		// Set E to 1 (Read Data)
    2198:	84 e0       	ldi	r24, 0x04	; 4
    219a:	62 e0       	ldi	r22, 0x02	; 2
    219c:	41 e0       	ldi	r20, 0x01	; 1
    219e:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	a0 e0       	ldi	r26, 0x00	; 0
    21a8:	b0 e4       	ldi	r27, 0x40	; 64
    21aa:	89 8f       	std	Y+25, r24	; 0x19
    21ac:	9a 8f       	std	Y+26, r25	; 0x1a
    21ae:	ab 8f       	std	Y+27, r26	; 0x1b
    21b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b2:	69 8d       	ldd	r22, Y+25	; 0x19
    21b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	4a ef       	ldi	r20, 0xFA	; 250
    21c0:	54 e4       	ldi	r21, 0x44	; 68
    21c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	8d 8b       	std	Y+21, r24	; 0x15
    21cc:	9e 8b       	std	Y+22, r25	; 0x16
    21ce:	af 8b       	std	Y+23, r26	; 0x17
    21d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21d2:	6d 89       	ldd	r22, Y+21	; 0x15
    21d4:	7e 89       	ldd	r23, Y+22	; 0x16
    21d6:	8f 89       	ldd	r24, Y+23	; 0x17
    21d8:	98 8d       	ldd	r25, Y+24	; 0x18
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e8       	ldi	r20, 0x80	; 128
    21e0:	5f e3       	ldi	r21, 0x3F	; 63
    21e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21e6:	88 23       	and	r24, r24
    21e8:	2c f4       	brge	.+10     	; 0x21f4 <HLCD_writeData+0x1a0>
		__ticks = 1;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	9c 8b       	std	Y+20, r25	; 0x14
    21f0:	8b 8b       	std	Y+19, r24	; 0x13
    21f2:	3f c0       	rjmp	.+126    	; 0x2272 <HLCD_writeData+0x21e>
	else if (__tmp > 65535)
    21f4:	6d 89       	ldd	r22, Y+21	; 0x15
    21f6:	7e 89       	ldd	r23, Y+22	; 0x16
    21f8:	8f 89       	ldd	r24, Y+23	; 0x17
    21fa:	98 8d       	ldd	r25, Y+24	; 0x18
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	4c f5       	brge	.+82     	; 0x225e <HLCD_writeData+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220c:	69 8d       	ldd	r22, Y+25	; 0x19
    220e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2210:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2212:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e2       	ldi	r20, 0x20	; 32
    221a:	51 e4       	ldi	r21, 0x41	; 65
    221c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9c 8b       	std	Y+20, r25	; 0x14
    2232:	8b 8b       	std	Y+19, r24	; 0x13
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <HLCD_writeData+0x200>
    2236:	88 ec       	ldi	r24, 0xC8	; 200
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9a 8b       	std	Y+18, r25	; 0x12
    223c:	89 8b       	std	Y+17, r24	; 0x11
    223e:	89 89       	ldd	r24, Y+17	; 0x11
    2240:	9a 89       	ldd	r25, Y+18	; 0x12
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <HLCD_writeData+0x1ee>
    2246:	9a 8b       	std	Y+18, r25	; 0x12
    2248:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224a:	8b 89       	ldd	r24, Y+19	; 0x13
    224c:	9c 89       	ldd	r25, Y+20	; 0x14
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	9c 8b       	std	Y+20, r25	; 0x14
    2252:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2254:	8b 89       	ldd	r24, Y+19	; 0x13
    2256:	9c 89       	ldd	r25, Y+20	; 0x14
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	69 f7       	brne	.-38     	; 0x2236 <HLCD_writeData+0x1e2>
    225c:	14 c0       	rjmp	.+40     	; 0x2286 <HLCD_writeData+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225e:	6d 89       	ldd	r22, Y+21	; 0x15
    2260:	7e 89       	ldd	r23, Y+22	; 0x16
    2262:	8f 89       	ldd	r24, Y+23	; 0x17
    2264:	98 8d       	ldd	r25, Y+24	; 0x18
    2266:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9c 8b       	std	Y+20, r25	; 0x14
    2270:	8b 8b       	std	Y+19, r24	; 0x13
    2272:	8b 89       	ldd	r24, Y+19	; 0x13
    2274:	9c 89       	ldd	r25, Y+20	; 0x14
    2276:	98 8b       	std	Y+16, r25	; 0x10
    2278:	8f 87       	std	Y+15, r24	; 0x0f
    227a:	8f 85       	ldd	r24, Y+15	; 0x0f
    227c:	98 89       	ldd	r25, Y+16	; 0x10
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <HLCD_writeData+0x22a>
    2282:	98 8b       	std	Y+16, r25	; 0x10
    2284:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);							// delay 2ms
		MDIO_SetPinOutput(HLCD_E, LOW); 		// Set E to 0 (falling edge: Write Data)
    2286:	84 e0       	ldi	r24, 0x04	; 4
    2288:	62 e0       	ldi	r22, 0x02	; 2
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>

		MDIO_SetPortValue(HLCD_PORT, (data << 4) & 0xF0);	// Write the Ldata to D4-D7
    2290:	8b a5       	ldd	r24, Y+43	; 0x2b
    2292:	88 2f       	mov	r24, r24
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	82 95       	swap	r24
    2298:	92 95       	swap	r25
    229a:	90 7f       	andi	r25, 0xF0	; 240
    229c:	98 27       	eor	r25, r24
    229e:	80 7f       	andi	r24, 0xF0	; 240
    22a0:	98 27       	eor	r25, r24
    22a2:	98 2f       	mov	r25, r24
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	69 2f       	mov	r22, r25
    22a8:	0e 94 8d 08 	call	0x111a	; 0x111a <MDIO_SetPortValue>
		MDIO_SetPinOutput(HLCD_E, HIGH); 		// Set E to 1 (Read Data)
    22ac:	84 e0       	ldi	r24, 0x04	; 4
    22ae:	62 e0       	ldi	r22, 0x02	; 2
    22b0:	41 e0       	ldi	r20, 0x01	; 1
    22b2:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	a0 e0       	ldi	r26, 0x00	; 0
    22bc:	b0 e4       	ldi	r27, 0x40	; 64
    22be:	8b 87       	std	Y+11, r24	; 0x0b
    22c0:	9c 87       	std	Y+12, r25	; 0x0c
    22c2:	ad 87       	std	Y+13, r26	; 0x0d
    22c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    22cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	4a ef       	ldi	r20, 0xFA	; 250
    22d4:	54 e4       	ldi	r21, 0x44	; 68
    22d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	8f 83       	std	Y+7, r24	; 0x07
    22e0:	98 87       	std	Y+8, r25	; 0x08
    22e2:	a9 87       	std	Y+9, r26	; 0x09
    22e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22e6:	6f 81       	ldd	r22, Y+7	; 0x07
    22e8:	78 85       	ldd	r23, Y+8	; 0x08
    22ea:	89 85       	ldd	r24, Y+9	; 0x09
    22ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e8       	ldi	r20, 0x80	; 128
    22f4:	5f e3       	ldi	r21, 0x3F	; 63
    22f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22fa:	88 23       	and	r24, r24
    22fc:	2c f4       	brge	.+10     	; 0x2308 <HLCD_writeData+0x2b4>
		__ticks = 1;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	9e 83       	std	Y+6, r25	; 0x06
    2304:	8d 83       	std	Y+5, r24	; 0x05
    2306:	3f c0       	rjmp	.+126    	; 0x2386 <HLCD_writeData+0x332>
	else if (__tmp > 65535)
    2308:	6f 81       	ldd	r22, Y+7	; 0x07
    230a:	78 85       	ldd	r23, Y+8	; 0x08
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	3f ef       	ldi	r19, 0xFF	; 255
    2314:	4f e7       	ldi	r20, 0x7F	; 127
    2316:	57 e4       	ldi	r21, 0x47	; 71
    2318:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    231c:	18 16       	cp	r1, r24
    231e:	4c f5       	brge	.+82     	; 0x2372 <HLCD_writeData+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2320:	6b 85       	ldd	r22, Y+11	; 0x0b
    2322:	7c 85       	ldd	r23, Y+12	; 0x0c
    2324:	8d 85       	ldd	r24, Y+13	; 0x0d
    2326:	9e 85       	ldd	r25, Y+14	; 0x0e
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e2       	ldi	r20, 0x20	; 32
    232e:	51 e4       	ldi	r21, 0x41	; 65
    2330:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	bc 01       	movw	r22, r24
    233a:	cd 01       	movw	r24, r26
    233c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	9e 83       	std	Y+6, r25	; 0x06
    2346:	8d 83       	std	Y+5, r24	; 0x05
    2348:	0f c0       	rjmp	.+30     	; 0x2368 <HLCD_writeData+0x314>
    234a:	88 ec       	ldi	r24, 0xC8	; 200
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	9c 83       	std	Y+4, r25	; 0x04
    2350:	8b 83       	std	Y+3, r24	; 0x03
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	9c 81       	ldd	r25, Y+4	; 0x04
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	f1 f7       	brne	.-4      	; 0x2356 <HLCD_writeData+0x302>
    235a:	9c 83       	std	Y+4, r25	; 0x04
    235c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235e:	8d 81       	ldd	r24, Y+5	; 0x05
    2360:	9e 81       	ldd	r25, Y+6	; 0x06
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	9e 83       	std	Y+6, r25	; 0x06
    2366:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2368:	8d 81       	ldd	r24, Y+5	; 0x05
    236a:	9e 81       	ldd	r25, Y+6	; 0x06
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	69 f7       	brne	.-38     	; 0x234a <HLCD_writeData+0x2f6>
    2370:	14 c0       	rjmp	.+40     	; 0x239a <HLCD_writeData+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2372:	6f 81       	ldd	r22, Y+7	; 0x07
    2374:	78 85       	ldd	r23, Y+8	; 0x08
    2376:	89 85       	ldd	r24, Y+9	; 0x09
    2378:	9a 85       	ldd	r25, Y+10	; 0x0a
    237a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	9e 83       	std	Y+6, r25	; 0x06
    2384:	8d 83       	std	Y+5, r24	; 0x05
    2386:	8d 81       	ldd	r24, Y+5	; 0x05
    2388:	9e 81       	ldd	r25, Y+6	; 0x06
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <HLCD_writeData+0x33e>
    2396:	9a 83       	std	Y+2, r25	; 0x02
    2398:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);							// delay 2ms
		MDIO_SetPinOutput(HLCD_E, LOW); 		// Set E to 0 (falling edge: Write Data)
    239a:	84 e0       	ldi	r24, 0x04	; 4
    239c:	62 e0       	ldi	r22, 0x02	; 2
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>
	}
	return;
} // end HLCD_writeData
    23a4:	ab 96       	adiw	r28, 0x2b	; 43
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <addLED>:
#include "../libraries/L_STD_TYPES.h"
#include "../libraries/L_UTILS.h"
#include "../MCAL/MDIO_interface.h"

void addLED(port, bit) {
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <addLED+0x6>
    23bc:	00 d0       	rcall	.+0      	; 0x23be <addLED+0x8>
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	9a 83       	std	Y+2, r25	; 0x02
    23c4:	89 83       	std	Y+1, r24	; 0x01
    23c6:	7c 83       	std	Y+4, r23	; 0x04
    23c8:	6b 83       	std	Y+3, r22	; 0x03
	MDIO_SetPinDirection(port, bit, OUTPUT);
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	9b 81       	ldd	r25, Y+3	; 0x03
    23ce:	69 2f       	mov	r22, r25
    23d0:	41 e0       	ldi	r20, 0x01	; 1
    23d2:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
}
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <LED_ON>:
void LED_ON(port, bit) {
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <LED_ON+0x6>
    23ea:	00 d0       	rcall	.+0      	; 0x23ec <LED_ON+0x8>
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	9a 83       	std	Y+2, r25	; 0x02
    23f2:	89 83       	std	Y+1, r24	; 0x01
    23f4:	7c 83       	std	Y+4, r23	; 0x04
    23f6:	6b 83       	std	Y+3, r22	; 0x03
	MDIO_SetPinOutput(port, bit, HIGH);
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	9b 81       	ldd	r25, Y+3	; 0x03
    23fc:	69 2f       	mov	r22, r25
    23fe:	41 e0       	ldi	r20, 0x01	; 1
    2400:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>
}
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	08 95       	ret

00002412 <LED_OFF>:
void LED_OFF(port, bit) {
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	00 d0       	rcall	.+0      	; 0x2418 <LED_OFF+0x6>
    2418:	00 d0       	rcall	.+0      	; 0x241a <LED_OFF+0x8>
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	7c 83       	std	Y+4, r23	; 0x04
    2424:	6b 83       	std	Y+3, r22	; 0x03
	MDIO_SetPinOutput(port, bit, LOW);
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	9b 81       	ldd	r25, Y+3	; 0x03
    242a:	69 2f       	mov	r22, r25
    242c:	40 e0       	ldi	r20, 0x00	; 0
    242e:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>
}
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <NPN_ON>:
#include "../MCAL/MDIO_interface.h"
#include "HNPN_interface.h"


void NPN_ON(uint8 port, uint8 pin)
{
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	00 d0       	rcall	.+0      	; 0x2446 <NPN_ON+0x6>
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	89 83       	std	Y+1, r24	; 0x01
    244c:	6a 83       	std	Y+2, r22	; 0x02
    MDIO_SetPinDirection(port, pin, OUTPUT);
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	6a 81       	ldd	r22, Y+2	; 0x02
    2452:	41 e0       	ldi	r20, 0x01	; 1
    2454:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
    MDIO_SetPinOutput(port, pin, HIGH);
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	6a 81       	ldd	r22, Y+2	; 0x02
    245c:	41 e0       	ldi	r20, 0x01	; 1
    245e:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>
    return;
}// end NPN_ON
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <NPN_OFF>:


void NPN_OFF(uint8 port, uint8 pin) {
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	00 d0       	rcall	.+0      	; 0x2472 <NPN_OFF+0x6>
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	89 83       	std	Y+1, r24	; 0x01
    2478:	6a 83       	std	Y+2, r22	; 0x02
    MDIO_SetPinDirection(port, pin, OUTPUT);
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	6a 81       	ldd	r22, Y+2	; 0x02
    247e:	41 e0       	ldi	r20, 0x01	; 1
    2480:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
    MDIO_SetPinOutput(port, pin, LOW);
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	6a 81       	ldd	r22, Y+2	; 0x02
    2488:	40 e0       	ldi	r20, 0x00	; 0
    248a:	0e 94 a9 07 	call	0xf52	; 0xf52 <MDIO_SetPinOutput>
    return;
}// end NPN_OFF
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <H7Seg_clear>:
#include "../MCAL/MDIO_interface.h"
#include "../MCAL/MDIO_private.h"
#include "HSevenSegments_private.h"
#include "HSevenSegments_interface.h"

void H7Seg_clear(void) {
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
	MDIO_SetPortValue(PORTC, HIGH);
    24a0:	83 e0       	ldi	r24, 0x03	; 3
    24a2:	61 e0       	ldi	r22, 0x01	; 1
    24a4:	0e 94 8d 08 	call	0x111a	; 0x111a <MDIO_SetPortValue>
	return;
}
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <H7Seg_initialize>:

void H7Seg_initialize(void) {
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
	MDIO_SetPortDirection(PORTC, 0xFF);
    24b6:	83 e0       	ldi	r24, 0x03	; 3
    24b8:	6f ef       	ldi	r22, 0xFF	; 255
    24ba:	0e 94 67 07 	call	0xece	; 0xece <MDIO_SetPortDirection>
	return;
}
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <H7Seg_display>:

void H7Seg_display(uint8 num) {
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	0f 92       	push	r0
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	89 83       	std	Y+1, r24	; 0x01
//	H7Seg_clear();
//	for (uint8 j=0; numbers[num][j] != -1; j++)
	MDIO_SetPortValue(PORTC, numbers[num]);
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	88 2f       	mov	r24, r24
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	fc 01       	movw	r30, r24
    24d8:	e7 58       	subi	r30, 0x87	; 135
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	90 81       	ld	r25, Z
    24de:	83 e0       	ldi	r24, 0x03	; 3
    24e0:	69 2f       	mov	r22, r25
    24e2:	0e 94 8d 08 	call	0x111a	; 0x111a <MDIO_SetPortValue>
//		{MDIO_SetPinOutput(PORTC, numbers[num][j], LOW);}
//		MDIO_PORTC &= ~(0b00000001 << numbers[num][j]);	// Set PORTB bits at numbers to 0
//	MDIO_SetPortValue(PORTC, LOW);
	return;
}
    24e6:	0f 90       	pop	r0
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <main>:
#include "MCAL/MDIO_interface.h"
#include "HAL/HSevenSegments_interface.h"
#include <util/delay.h>


int main(void) {
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	00 d0       	rcall	.+0      	; 0x24f4 <main+0x6>
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
	MDIO_SetPinDirection(PORTB, 0, INPUT_PULLUP);
    24f8:	82 e0       	ldi	r24, 0x02	; 2
    24fa:	60 e0       	ldi	r22, 0x00	; 0
    24fc:	43 e0       	ldi	r20, 0x03	; 3
    24fe:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PORTB, 1, INPUT_PULLUP);
    2502:	82 e0       	ldi	r24, 0x02	; 2
    2504:	61 e0       	ldi	r22, 0x01	; 1
    2506:	43 e0       	ldi	r20, 0x03	; 3
    2508:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PORTB, 2, INPUT_PULLUP);
    250c:	82 e0       	ldi	r24, 0x02	; 2
    250e:	62 e0       	ldi	r22, 0x02	; 2
    2510:	43 e0       	ldi	r20, 0x03	; 3
    2512:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PORTB, 3, INPUT_PULLUP);
    2516:	82 e0       	ldi	r24, 0x02	; 2
    2518:	63 e0       	ldi	r22, 0x03	; 3
    251a:	43 e0       	ldi	r20, 0x03	; 3
    251c:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PORTB, 4, INPUT_PULLUP);
    2520:	82 e0       	ldi	r24, 0x02	; 2
    2522:	64 e0       	ldi	r22, 0x04	; 4
    2524:	43 e0       	ldi	r20, 0x03	; 3
    2526:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PORTB, 5, INPUT_PULLUP);
    252a:	82 e0       	ldi	r24, 0x02	; 2
    252c:	65 e0       	ldi	r22, 0x05	; 5
    252e:	43 e0       	ldi	r20, 0x03	; 3
    2530:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PORTB, 6, INPUT_PULLUP);
    2534:	82 e0       	ldi	r24, 0x02	; 2
    2536:	66 e0       	ldi	r22, 0x06	; 6
    2538:	43 e0       	ldi	r20, 0x03	; 3
    253a:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PORTB, 7, INPUT_PULLUP);
    253e:	82 e0       	ldi	r24, 0x02	; 2
    2540:	67 e0       	ldi	r22, 0x07	; 7
    2542:	43 e0       	ldi	r20, 0x03	; 3
    2544:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_SetPinDirection>
	H7Seg_initialize();
    2548:	0e 94 57 12 	call	0x24ae	; 0x24ae <H7Seg_initialize>

	while (1) {
		uint8 switches1 = MDIO_GetPinValue(PORTB, 0);
    254c:	82 e0       	ldi	r24, 0x02	; 2
    254e:	60 e0       	ldi	r22, 0x00	; 0
    2550:	0e 94 cf 08 	call	0x119e	; 0x119e <MDIO_GetPinValue>
    2554:	8a 83       	std	Y+2, r24	; 0x02
		uint8 switches2 = MDIO_GetPinValue(PORTB, 1);
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	61 e0       	ldi	r22, 0x01	; 1
    255a:	0e 94 cf 08 	call	0x119e	; 0x119e <MDIO_GetPinValue>
    255e:	89 83       	std	Y+1, r24	; 0x01
		if (switches1 == 0)
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	88 23       	and	r24, r24
    2564:	21 f4       	brne	.+8      	; 0x256e <main+0x80>
			H7Seg_display(0);
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	0e 94 62 12 	call	0x24c4	; 0x24c4 <H7Seg_display>
    256c:	ef cf       	rjmp	.-34     	; 0x254c <main+0x5e>
		else if(switches2 == 0)
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	88 23       	and	r24, r24
    2572:	21 f4       	brne	.+8      	; 0x257c <main+0x8e>
			H7Seg_display(1);
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	0e 94 62 12 	call	0x24c4	; 0x24c4 <H7Seg_display>
    257a:	e8 cf       	rjmp	.-48     	; 0x254c <main+0x5e>
		else
			H7Seg_display(6);
    257c:	86 e0       	ldi	r24, 0x06	; 6
    257e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <H7Seg_display>
    2582:	e4 cf       	rjmp	.-56     	; 0x254c <main+0x5e>

00002584 <__prologue_saves__>:
    2584:	2f 92       	push	r2
    2586:	3f 92       	push	r3
    2588:	4f 92       	push	r4
    258a:	5f 92       	push	r5
    258c:	6f 92       	push	r6
    258e:	7f 92       	push	r7
    2590:	8f 92       	push	r8
    2592:	9f 92       	push	r9
    2594:	af 92       	push	r10
    2596:	bf 92       	push	r11
    2598:	cf 92       	push	r12
    259a:	df 92       	push	r13
    259c:	ef 92       	push	r14
    259e:	ff 92       	push	r15
    25a0:	0f 93       	push	r16
    25a2:	1f 93       	push	r17
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	ca 1b       	sub	r28, r26
    25ae:	db 0b       	sbc	r29, r27
    25b0:	0f b6       	in	r0, 0x3f	; 63
    25b2:	f8 94       	cli
    25b4:	de bf       	out	0x3e, r29	; 62
    25b6:	0f be       	out	0x3f, r0	; 63
    25b8:	cd bf       	out	0x3d, r28	; 61
    25ba:	09 94       	ijmp

000025bc <__epilogue_restores__>:
    25bc:	2a 88       	ldd	r2, Y+18	; 0x12
    25be:	39 88       	ldd	r3, Y+17	; 0x11
    25c0:	48 88       	ldd	r4, Y+16	; 0x10
    25c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    25c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    25c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    25c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    25ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    25cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    25ce:	b9 84       	ldd	r11, Y+9	; 0x09
    25d0:	c8 84       	ldd	r12, Y+8	; 0x08
    25d2:	df 80       	ldd	r13, Y+7	; 0x07
    25d4:	ee 80       	ldd	r14, Y+6	; 0x06
    25d6:	fd 80       	ldd	r15, Y+5	; 0x05
    25d8:	0c 81       	ldd	r16, Y+4	; 0x04
    25da:	1b 81       	ldd	r17, Y+3	; 0x03
    25dc:	aa 81       	ldd	r26, Y+2	; 0x02
    25de:	b9 81       	ldd	r27, Y+1	; 0x01
    25e0:	ce 0f       	add	r28, r30
    25e2:	d1 1d       	adc	r29, r1
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	ed 01       	movw	r28, r26
    25f0:	08 95       	ret

000025f2 <_exit>:
    25f2:	f8 94       	cli

000025f4 <__stop_program>:
    25f4:	ff cf       	rjmp	.-2      	; 0x25f4 <__stop_program>
